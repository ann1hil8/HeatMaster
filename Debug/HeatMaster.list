
HeatMaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a8c  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08006c90  08006c90  00007c90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007088  08007088  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007088  08007088  00008088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007090  08007090  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007090  08007090  00008090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007098  08007098  00008098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800709c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  200001d4  08007270  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  08007270  000094d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc95  00000000  00000000  00009202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021bf  00000000  00000000  00018e97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  0001b058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ac0  00000000  00000000  0001be20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b011  00000000  00000000  0001c8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011830  00000000  00000000  000478f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe375  00000000  00000000  00059121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00157496  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004914  00000000  00000000  001574dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0015bdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d4 	.word	0x200001d4
 800021c:	00000000 	.word	0x00000000
 8000220:	08006c74 	.word	0x08006c74

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d8 	.word	0x200001d8
 800023c:	08006c74 	.word	0x08006c74

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <_ZN7DS18B20C1EP17TIM_HandleTypeDefP12GPIO_TypeDeft>:
Constructor for temperature sensor object
@param tim Pointer to hardware timer handle. The timer has to tick every microsecond!
@param port GPIO port of the sensor pin, e.g. GPIOB
@param pin GPIO pin number of the sensor pin
*/
DS18B20::DS18B20(TIM_HandleTypeDef *tim, GPIO_TypeDef *port, uint16_t pin) : _tim(tim), _port(port), _pin(pin)
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
 80005ec:	807b      	strh	r3, [r7, #2]
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	68ba      	ldr	r2, [r7, #8]
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	887a      	ldrh	r2, [r7, #2]
 80005fe:	811a      	strh	r2, [r3, #8]
{
	HAL_TIM_Base_Start(_tim);
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4618      	mov	r0, r3
 8000606:	f002 fbbd 	bl	8002d84 <HAL_TIM_Base_Start>
}
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	4618      	mov	r0, r3
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <_ZN7DS18B208delay_usEt>:

/*
Block for given time in microseconds by waiting for the htim ticks
*/
void DS18B20::delay_us(uint16_t us)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	807b      	strh	r3, [r7, #2]
	_tim->Instance->CNT = 0;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2200      	movs	r2, #0
 8000628:	625a      	str	r2, [r3, #36]	@ 0x24
	while (_tim->Instance->CNT < us)
 800062a:	bf00      	nop
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000634:	887b      	ldrh	r3, [r7, #2]
 8000636:	429a      	cmp	r2, r3
 8000638:	bf34      	ite	cc
 800063a:	2301      	movcc	r3, #1
 800063c:	2300      	movcs	r3, #0
 800063e:	b2db      	uxtb	r3, r3
 8000640:	2b00      	cmp	r3, #0
 8000642:	d1f3      	bne.n	800062c <_ZN7DS18B208delay_usEt+0x18>
		;
}
 8000644:	bf00      	nop
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr

08000652 <_ZN7DS18B2012set_data_pinEb>:

void DS18B20::set_data_pin(bool on)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	b082      	sub	sp, #8
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
 800065a:	460b      	mov	r3, r1
 800065c:	70fb      	strb	r3, [r7, #3]
	return HAL_GPIO_WritePin(_port, _pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	6858      	ldr	r0, [r3, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	8919      	ldrh	r1, [r3, #8]
 8000666:	78fb      	ldrb	r3, [r7, #3]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <_ZN7DS18B2012set_data_pinEb+0x1e>
 800066c:	2301      	movs	r3, #1
 800066e:	e000      	b.n	8000672 <_ZN7DS18B2012set_data_pinEb+0x20>
 8000670:	2300      	movs	r3, #0
 8000672:	461a      	mov	r2, r3
 8000674:	f001 fa1a 	bl	8001aac <HAL_GPIO_WritePin>
 8000678:	bf00      	nop
}
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <_ZN7DS18B2013read_data_pinEv>:
{
	return HAL_GPIO_TogglePin(_port, _pin);
}

GPIO_PinState DS18B20::read_data_pin()
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(_port, _pin);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	685a      	ldr	r2, [r3, #4]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	891b      	ldrh	r3, [r3, #8]
 8000690:	4619      	mov	r1, r3
 8000692:	4610      	mov	r0, r2
 8000694:	f001 f9f2 	bl	8001a7c <HAL_GPIO_ReadPin>
 8000698:	4603      	mov	r3, r0
}
 800069a:	4618      	mov	r0, r3
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <_ZN7DS18B2014set_pin_outputEv>:

void DS18B20::set_pin_output()
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b088      	sub	sp, #32
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = _pin;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	891b      	ldrh	r3, [r3, #8]
 80006be:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c0:	2301      	movs	r3, #1
 80006c2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80006c4:	2303      	movs	r3, #3
 80006c6:	61bb      	str	r3, [r7, #24]
	return HAL_GPIO_Init(_port, &GPIO_InitStruct);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	f107 020c 	add.w	r2, r7, #12
 80006d0:	4611      	mov	r1, r2
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 f826 	bl	8001724 <HAL_GPIO_Init>
 80006d8:	bf00      	nop
}
 80006da:	3720      	adds	r7, #32
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <_ZN7DS18B2013set_pin_inputEv>:

void DS18B20::set_pin_input()
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = _pin;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	891b      	ldrh	r3, [r3, #8]
 80006fc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000702:	2303      	movs	r3, #3
 8000704:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000706:	2301      	movs	r3, #1
 8000708:	617b      	str	r3, [r7, #20]
	return HAL_GPIO_Init(_port, &GPIO_InitStruct);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	f107 020c 	add.w	r2, r7, #12
 8000712:	4611      	mov	r1, r2
 8000714:	4618      	mov	r0, r3
 8000716:	f001 f805 	bl	8001724 <HAL_GPIO_Init>
 800071a:	bf00      	nop
}
 800071c:	3720      	adds	r7, #32
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <_ZN7DS18B2012start_sensorEv>:

void DS18B20::start_sensor()
{
 8000722:	b580      	push	{r7, lr}
 8000724:	b082      	sub	sp, #8
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
	set_pin_output();
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f7ff ffb9 	bl	80006a2 <_ZN7DS18B2014set_pin_outputEv>
	set_data_pin(false);
 8000730:	2100      	movs	r1, #0
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f7ff ff8d 	bl	8000652 <_ZN7DS18B2012set_data_pinEb>

	delay_us(480);
 8000738:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff ff69 	bl	8000614 <_ZN7DS18B208delay_usEt>
	set_pin_input();
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	f7ff ffcc 	bl	80006e0 <_ZN7DS18B2013set_pin_inputEv>
	delay_us(80);
 8000748:	2150      	movs	r1, #80	@ 0x50
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f7ff ff62 	bl	8000614 <_ZN7DS18B208delay_usEt>
	read_data_pin();
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f7ff ff95 	bl	8000680 <_ZN7DS18B2013read_data_pinEv>
	delay_us(400);
 8000756:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f7ff ff5a 	bl	8000614 <_ZN7DS18B208delay_usEt>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <_ZN7DS18B209writeDataEh>:

void DS18B20::writeData(uint8_t data)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	460b      	mov	r3, r1
 8000772:	70fb      	strb	r3, [r7, #3]
	set_pin_output();
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff ff94 	bl	80006a2 <_ZN7DS18B2014set_pin_outputEv>

	for (uint8_t i = 0; i < 8; i++)
 800077a:	2300      	movs	r3, #0
 800077c:	73fb      	strb	r3, [r7, #15]
 800077e:	e02b      	b.n	80007d8 <_ZN7DS18B209writeDataEh+0x70>
	{

		if (data & (1 << i))
 8000780:	78fa      	ldrb	r2, [r7, #3]
 8000782:	7bfb      	ldrb	r3, [r7, #15]
 8000784:	fa42 f303 	asr.w	r3, r2, r3
 8000788:	f003 0301 	and.w	r3, r3, #1
 800078c:	2b00      	cmp	r3, #0
 800078e:	d012      	beq.n	80007b6 <_ZN7DS18B209writeDataEh+0x4e>
		{
			set_pin_output();
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f7ff ff86 	bl	80006a2 <_ZN7DS18B2014set_pin_outputEv>
			set_data_pin(false);
 8000796:	2100      	movs	r1, #0
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff ff5a 	bl	8000652 <_ZN7DS18B2012set_data_pinEb>
			delay_us(1);
 800079e:	2101      	movs	r1, #1
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f7ff ff37 	bl	8000614 <_ZN7DS18B208delay_usEt>

			set_pin_input();
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f7ff ff9a 	bl	80006e0 <_ZN7DS18B2013set_pin_inputEv>
			delay_us(60);
 80007ac:	213c      	movs	r1, #60	@ 0x3c
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f7ff ff30 	bl	8000614 <_ZN7DS18B208delay_usEt>
			continue;
 80007b4:	e00d      	b.n	80007d2 <_ZN7DS18B209writeDataEh+0x6a>
		}

		set_pin_output();
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f7ff ff73 	bl	80006a2 <_ZN7DS18B2014set_pin_outputEv>
		set_data_pin(false);
 80007bc:	2100      	movs	r1, #0
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f7ff ff47 	bl	8000652 <_ZN7DS18B2012set_data_pinEb>
		delay_us(60);
 80007c4:	213c      	movs	r1, #60	@ 0x3c
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f7ff ff24 	bl	8000614 <_ZN7DS18B208delay_usEt>

		set_pin_input();
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff ff87 	bl	80006e0 <_ZN7DS18B2013set_pin_inputEv>
	for (uint8_t i = 0; i < 8; i++)
 80007d2:	7bfb      	ldrb	r3, [r7, #15]
 80007d4:	3301      	adds	r3, #1
 80007d6:	73fb      	strb	r3, [r7, #15]
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	2b07      	cmp	r3, #7
 80007dc:	d9d0      	bls.n	8000780 <_ZN7DS18B209writeDataEh+0x18>
	}
}
 80007de:	bf00      	nop
 80007e0:	bf00      	nop
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <_ZN7DS18B209read_dataEv>:

uint8_t DS18B20::read_data()
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	uint8_t value = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	73fb      	strb	r3, [r7, #15]
	set_pin_input();
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f7ff ff73 	bl	80006e0 <_ZN7DS18B2013set_pin_inputEv>

	for (uint8_t i = 0; i < 8; i++)
 80007fa:	2300      	movs	r3, #0
 80007fc:	73bb      	strb	r3, [r7, #14]
 80007fe:	e029      	b.n	8000854 <_ZN7DS18B209read_dataEv+0x6c>
	{
		set_pin_output();
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f7ff ff4e 	bl	80006a2 <_ZN7DS18B2014set_pin_outputEv>

		set_data_pin(false);
 8000806:	2100      	movs	r1, #0
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f7ff ff22 	bl	8000652 <_ZN7DS18B2012set_data_pinEb>
		delay_us(2);
 800080e:	2102      	movs	r1, #2
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f7ff feff 	bl	8000614 <_ZN7DS18B208delay_usEt>
		set_pin_input();
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f7ff ff62 	bl	80006e0 <_ZN7DS18B2013set_pin_inputEv>

		if (read_data_pin())
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f7ff ff2f 	bl	8000680 <_ZN7DS18B2013read_data_pinEv>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	bf14      	ite	ne
 8000828:	2301      	movne	r3, #1
 800082a:	2300      	moveq	r3, #0
 800082c:	b2db      	uxtb	r3, r3
 800082e:	2b00      	cmp	r3, #0
 8000830:	d009      	beq.n	8000846 <_ZN7DS18B209read_dataEv+0x5e>
		{
			value |= 1 << i;
 8000832:	7bbb      	ldrb	r3, [r7, #14]
 8000834:	2201      	movs	r2, #1
 8000836:	fa02 f303 	lsl.w	r3, r2, r3
 800083a:	b25a      	sxtb	r2, r3
 800083c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000840:	4313      	orrs	r3, r2
 8000842:	b25b      	sxtb	r3, r3
 8000844:	73fb      	strb	r3, [r7, #15]
		}

		delay_us(60);
 8000846:	213c      	movs	r1, #60	@ 0x3c
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f7ff fee3 	bl	8000614 <_ZN7DS18B208delay_usEt>
	for (uint8_t i = 0; i < 8; i++)
 800084e:	7bbb      	ldrb	r3, [r7, #14]
 8000850:	3301      	adds	r3, #1
 8000852:	73bb      	strb	r3, [r7, #14]
 8000854:	7bbb      	ldrb	r3, [r7, #14]
 8000856:	2b07      	cmp	r3, #7
 8000858:	d9d2      	bls.n	8000800 <_ZN7DS18B209read_dataEv+0x18>
	}
	return value;
 800085a:	7bfb      	ldrb	r3, [r7, #15]
}
 800085c:	4618      	mov	r0, r3
 800085e:	3710      	adds	r7, #16
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <_ZN7DS18B2017read_temp_celsiusEv>:
Read the current temperature from the sensor.
This functions blocks for around 800ms as it waits for the conversion time!
@return Temperature in degrees Celsius
*/
float DS18B20::read_temp_celsius()
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	start_sensor();
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f7ff ff58 	bl	8000722 <_ZN7DS18B2012start_sensorEv>
	HAL_Delay(1);
 8000872:	2001      	movs	r0, #1
 8000874:	f000 fe20 	bl	80014b8 <HAL_Delay>
	writeData(0xCC);
 8000878:	21cc      	movs	r1, #204	@ 0xcc
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff ff74 	bl	8000768 <_ZN7DS18B209writeDataEh>
	writeData(0x44);
 8000880:	2144      	movs	r1, #68	@ 0x44
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f7ff ff70 	bl	8000768 <_ZN7DS18B209writeDataEh>
	HAL_Delay(800);
 8000888:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800088c:	f000 fe14 	bl	80014b8 <HAL_Delay>
	start_sensor();
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f7ff ff46 	bl	8000722 <_ZN7DS18B2012start_sensorEv>
	writeData(0xCC);
 8000896:	21cc      	movs	r1, #204	@ 0xcc
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f7ff ff65 	bl	8000768 <_ZN7DS18B209writeDataEh>
	writeData(0xBE);
 800089e:	21be      	movs	r1, #190	@ 0xbe
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f7ff ff61 	bl	8000768 <_ZN7DS18B209writeDataEh>

	uint8_t temp1 = read_data();
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f7ff ff9e 	bl	80007e8 <_ZN7DS18B209read_dataEv>
 80008ac:	4603      	mov	r3, r0
 80008ae:	73fb      	strb	r3, [r7, #15]
	uint8_t temp2 = read_data();
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f7ff ff99 	bl	80007e8 <_ZN7DS18B209read_dataEv>
 80008b6:	4603      	mov	r3, r0
 80008b8:	73bb      	strb	r3, [r7, #14]

	uint16_t temp_com = (temp2 << 8) | temp1;
 80008ba:	7bbb      	ldrb	r3, [r7, #14]
 80008bc:	021b      	lsls	r3, r3, #8
 80008be:	b21a      	sxth	r2, r3
 80008c0:	7bfb      	ldrb	r3, [r7, #15]
 80008c2:	b21b      	sxth	r3, r3
 80008c4:	4313      	orrs	r3, r2
 80008c6:	b21b      	sxth	r3, r3
 80008c8:	81bb      	strh	r3, [r7, #12]

	return (float)(temp_com / 16.0);
 80008ca:	89bb      	ldrh	r3, [r7, #12]
 80008cc:	ee07 3a90 	vmov	s15, r3
 80008d0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80008d4:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80008d8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008dc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 80008e0:	eeb0 0a67 	vmov.f32	s0, s15
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	0000      	movs	r0, r0
 80008ec:	0000      	movs	r0, r0
	...

080008f0 <_ZN7DS18B2020read_temp_fahrenheitEv>:
Read the current temperature from the sensor.
This functions blocks for around 800ms as it waits for the conversion time!
@return Temperature in degrees Fahrenheit
*/
float DS18B20::read_temp_fahrenheit()
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	return read_temp_celsius() * 1.8 + 32.0;
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f7ff ffb3 	bl	8000864 <_ZN7DS18B2017read_temp_celsiusEv>
 80008fe:	eef0 7a40 	vmov.f32	s15, s0
 8000902:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000906:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8000928 <_ZN7DS18B2020read_temp_fahrenheitEv+0x38>
 800090a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800090e:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8000930 <_ZN7DS18B2020read_temp_fahrenheitEv+0x40>
 8000912:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000916:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 800091a:	eeb0 0a67 	vmov.f32	s0, s15
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	f3af 8000 	nop.w
 8000928:	cccccccd 	.word	0xcccccccd
 800092c:	3ffccccc 	.word	0x3ffccccc
 8000930:	00000000 	.word	0x00000000
 8000934:	40400000 	.word	0x40400000

08000938 <_Z13displayStatusv>:
	Cool_State,
	Range_State,
	Off_State
} FSM_State;

void displayStatus(){
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af02      	add	r7, sp, #8
	  sprintf(msg, "HeatMaster Status:\r\n");
 800093e:	4928      	ldr	r1, [pc, #160]	@ (80009e0 <_Z13displayStatusv+0xa8>)
 8000940:	4828      	ldr	r0, [pc, #160]	@ (80009e4 <_Z13displayStatusv+0xac>)
 8000942:	f004 f8d7 	bl	8004af4 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000946:	4827      	ldr	r0, [pc, #156]	@ (80009e4 <_Z13displayStatusv+0xac>)
 8000948:	f7ff fcca 	bl	80002e0 <strlen>
 800094c:	4603      	mov	r3, r0
 800094e:	b29a      	uxth	r2, r3
 8000950:	f04f 33ff 	mov.w	r3, #4294967295
 8000954:	4923      	ldr	r1, [pc, #140]	@ (80009e4 <_Z13displayStatusv+0xac>)
 8000956:	4824      	ldr	r0, [pc, #144]	@ (80009e8 <_Z13displayStatusv+0xb0>)
 8000958:	f002 fec8 	bl	80036ec <HAL_UART_Transmit>
	  sprintf(msg, "Meat Set:  %.2f\tCur: %.2f\r\n", temps.set_meat, temps.cur_meat);
 800095c:	4b23      	ldr	r3, [pc, #140]	@ (80009ec <_Z13displayStatusv+0xb4>)
 800095e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000962:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000966:	4b21      	ldr	r3, [pc, #132]	@ (80009ec <_Z13displayStatusv+0xb4>)
 8000968:	edd3 7a00 	vldr	s15, [r3]
 800096c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000970:	ed8d 7b00 	vstr	d7, [sp]
 8000974:	ec53 2b16 	vmov	r2, r3, d6
 8000978:	491d      	ldr	r1, [pc, #116]	@ (80009f0 <_Z13displayStatusv+0xb8>)
 800097a:	481a      	ldr	r0, [pc, #104]	@ (80009e4 <_Z13displayStatusv+0xac>)
 800097c:	f004 f8ba 	bl	8004af4 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000980:	4818      	ldr	r0, [pc, #96]	@ (80009e4 <_Z13displayStatusv+0xac>)
 8000982:	f7ff fcad 	bl	80002e0 <strlen>
 8000986:	4603      	mov	r3, r0
 8000988:	b29a      	uxth	r2, r3
 800098a:	f04f 33ff 	mov.w	r3, #4294967295
 800098e:	4915      	ldr	r1, [pc, #84]	@ (80009e4 <_Z13displayStatusv+0xac>)
 8000990:	4815      	ldr	r0, [pc, #84]	@ (80009e8 <_Z13displayStatusv+0xb0>)
 8000992:	f002 feab 	bl	80036ec <HAL_UART_Transmit>
	  sprintf(msg, "Grill Set: %.2f\tCur: %.2f\r\n\n", temps.set_grill, temps.cur_grill);
 8000996:	4b15      	ldr	r3, [pc, #84]	@ (80009ec <_Z13displayStatusv+0xb4>)
 8000998:	edd3 7a04 	vldr	s15, [r3, #16]
 800099c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80009a0:	4b12      	ldr	r3, [pc, #72]	@ (80009ec <_Z13displayStatusv+0xb4>)
 80009a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80009a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009aa:	ed8d 7b00 	vstr	d7, [sp]
 80009ae:	ec53 2b16 	vmov	r2, r3, d6
 80009b2:	4910      	ldr	r1, [pc, #64]	@ (80009f4 <_Z13displayStatusv+0xbc>)
 80009b4:	480b      	ldr	r0, [pc, #44]	@ (80009e4 <_Z13displayStatusv+0xac>)
 80009b6:	f004 f89d 	bl	8004af4 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80009ba:	480a      	ldr	r0, [pc, #40]	@ (80009e4 <_Z13displayStatusv+0xac>)
 80009bc:	f7ff fc90 	bl	80002e0 <strlen>
 80009c0:	4603      	mov	r3, r0
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	f04f 33ff 	mov.w	r3, #4294967295
 80009c8:	4906      	ldr	r1, [pc, #24]	@ (80009e4 <_Z13displayStatusv+0xac>)
 80009ca:	4807      	ldr	r0, [pc, #28]	@ (80009e8 <_Z13displayStatusv+0xb0>)
 80009cc:	f002 fe8e 	bl	80036ec <HAL_UART_Transmit>
	  HAL_Delay(500); // 500ms delay before we send next message.
 80009d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009d4:	f000 fd70 	bl	80014b8 <HAL_Delay>
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	08006c90 	.word	0x08006c90
 80009e4:	20000300 	.word	0x20000300
 80009e8:	2000023c 	.word	0x2000023c
 80009ec:	200002e8 	.word	0x200002e8
 80009f0:	08006ca8 	.word	0x08006ca8
 80009f4:	08006cc4 	.word	0x08006cc4

080009f8 <_Z18displayFinishedMSGv>:

void displayFinishedMSG(){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	sprintf(msg, "HeatMaster Finished!\r\n");
 80009fc:	4908      	ldr	r1, [pc, #32]	@ (8000a20 <_Z18displayFinishedMSGv+0x28>)
 80009fe:	4809      	ldr	r0, [pc, #36]	@ (8000a24 <_Z18displayFinishedMSGv+0x2c>)
 8000a00:	f004 f878 	bl	8004af4 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000a04:	4807      	ldr	r0, [pc, #28]	@ (8000a24 <_Z18displayFinishedMSGv+0x2c>)
 8000a06:	f7ff fc6b 	bl	80002e0 <strlen>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a12:	4904      	ldr	r1, [pc, #16]	@ (8000a24 <_Z18displayFinishedMSGv+0x2c>)
 8000a14:	4804      	ldr	r0, [pc, #16]	@ (8000a28 <_Z18displayFinishedMSGv+0x30>)
 8000a16:	f002 fe69 	bl	80036ec <HAL_UART_Transmit>
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	08006ce4 	.word	0x08006ce4
 8000a24:	20000300 	.word	0x20000300
 8000a28:	2000023c 	.word	0x2000023c

08000a2c <_Z8getTempsv>:

void getTemps(void){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
	temps.cur_meat = meat_temp_sensor.read_temp_fahrenheit();;
 8000a30:	480c      	ldr	r0, [pc, #48]	@ (8000a64 <_Z8getTempsv+0x38>)
 8000a32:	f7ff ff5d 	bl	80008f0 <_ZN7DS18B2020read_temp_fahrenheitEv>
 8000a36:	eef0 7a40 	vmov.f32	s15, s0
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a68 <_Z8getTempsv+0x3c>)
 8000a3c:	edc3 7a00 	vstr	s15, [r3]
	temps.cur_grill = grill_temp_sensor.read_temp_fahrenheit();;
 8000a40:	480a      	ldr	r0, [pc, #40]	@ (8000a6c <_Z8getTempsv+0x40>)
 8000a42:	f7ff ff55 	bl	80008f0 <_ZN7DS18B2020read_temp_fahrenheitEv>
 8000a46:	eef0 7a40 	vmov.f32	s15, s0
 8000a4a:	4b07      	ldr	r3, [pc, #28]	@ (8000a68 <_Z8getTempsv+0x3c>)
 8000a4c:	edc3 7a01 	vstr	s15, [r3, #4]
	temps.cur_flame = flame_temp_sensor.read_temp_fahrenheit();;
 8000a50:	4807      	ldr	r0, [pc, #28]	@ (8000a70 <_Z8getTempsv+0x44>)
 8000a52:	f7ff ff4d 	bl	80008f0 <_ZN7DS18B2020read_temp_fahrenheitEv>
 8000a56:	eef0 7a40 	vmov.f32	s15, s0
 8000a5a:	4b03      	ldr	r3, [pc, #12]	@ (8000a68 <_Z8getTempsv+0x3c>)
 8000a5c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	200002c4 	.word	0x200002c4
 8000a68:	200002e8 	.word	0x200002e8
 8000a6c:	200002d0 	.word	0x200002d0
 8000a70:	200002dc 	.word	0x200002dc

08000a74 <_Z10SetHandlerv>:

FSM_State SetHandler(void){
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
	if(temps.cur_meat < temps.set_meat){ // needs more cooking
 8000a78:	4b09      	ldr	r3, [pc, #36]	@ (8000aa0 <_Z10SetHandlerv+0x2c>)
 8000a7a:	ed93 7a00 	vldr	s14, [r3]
 8000a7e:	4b08      	ldr	r3, [pc, #32]	@ (8000aa0 <_Z10SetHandlerv+0x2c>)
 8000a80:	edd3 7a03 	vldr	s15, [r3, #12]
 8000a84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a8c:	d501      	bpl.n	8000a92 <_Z10SetHandlerv+0x1e>
		return Range_State;
 8000a8e:	2304      	movs	r3, #4
 8000a90:	e000      	b.n	8000a94 <_Z10SetHandlerv+0x20>
	} else { // done cooking
		return Off_State;
 8000a92:	2305      	movs	r3, #5
	}
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	200002e8 	.word	0x200002e8

08000aa4 <_Z11IdleHandlerv>:

FSM_State IdleHandler(void){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	// Insert code to handle the Idle state.
	displayStatus(); // there is also a delay in this function
 8000aa8:	f7ff ff46 	bl	8000938 <_Z13displayStatusv>
	HAL_Delay(500);
 8000aac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ab0:	f000 fd02 	bl	80014b8 <HAL_Delay>
	return Set_State;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <_Z11HeatHandlerv>:

FSM_State HeatHandler(void){
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
	// bump up the heat a little
	// if the servo is maxed out then stay maxed out
	// if the grill is off then turn the grill on
	//temps.cur_meat += 1;
	//temps.cur_grill += 2;
	return Idle_State;
 8000abe:	2301      	movs	r3, #1
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <_Z11CoolHandlerv>:

FSM_State CoolHandler(void){
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
	// Insert code to handle the Cool state.
	// turn the heat down a little
	// if the servo is maxed out then turn the grill off.
	//temps.cur_grill -= 1;
	return Idle_State;
 8000ace:	2301      	movs	r3, #1
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
	...

08000adc <_Z12RangeHandlerv>:

FSM_State RangeHandler(void){
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	// Insert code to handle the Range state.
	getTemps();
 8000ae0:	f7ff ffa4 	bl	8000a2c <_Z8getTempsv>
	if(temps.cur_grill < temps.set_grill){ // needs to heat
 8000ae4:	4b07      	ldr	r3, [pc, #28]	@ (8000b04 <_Z12RangeHandlerv+0x28>)
 8000ae6:	ed93 7a01 	vldr	s14, [r3, #4]
 8000aea:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <_Z12RangeHandlerv+0x28>)
 8000aec:	edd3 7a04 	vldr	s15, [r3, #16]
 8000af0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000af8:	d501      	bpl.n	8000afe <_Z12RangeHandlerv+0x22>
		return Heat_State;
 8000afa:	2302      	movs	r3, #2
 8000afc:	e000      	b.n	8000b00 <_Z12RangeHandlerv+0x24>
	} else { // needs to cool
		return Cool_State;
 8000afe:	2303      	movs	r3, #3
	}
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200002e8 	.word	0x200002e8

08000b08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b0e:	f000 fc76 	bl	80013fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b12:	f000 f851 	bl	8000bb8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b16:	f000 f94b 	bl	8000db0 <_ZL12MX_GPIO_Initv>
  MX_TIM1_Init();
 8000b1a:	f000 f8b3 	bl	8000c84 <_ZL12MX_TIM1_Initv>
  MX_USART3_UART_Init();
 8000b1e:	f000 f913 	bl	8000d48 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */
  FSM_State NextState = Set_State;
 8000b22:	2300      	movs	r3, #0
 8000b24:	71fb      	strb	r3, [r7, #7]
  temps.set_grill = GRILL_TEMP;
 8000b26:	4b20      	ldr	r3, [pc, #128]	@ (8000ba8 <main+0xa0>)
 8000b28:	4a20      	ldr	r2, [pc, #128]	@ (8000bac <main+0xa4>)
 8000b2a:	611a      	str	r2, [r3, #16]
  //temps.cur_grill = 300.00;
  temps.set_meat = MEAT_TEMP;
 8000b2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba8 <main+0xa0>)
 8000b2e:	4a20      	ldr	r2, [pc, #128]	@ (8000bb0 <main+0xa8>)
 8000b30:	60da      	str	r2, [r3, #12]
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Here is our FSM that will continue to loop while the food is not cooked.
	  while(!food_cooked){
 8000b32:	e02f      	b.n	8000b94 <main+0x8c>
		  switch(NextState){
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	2b05      	cmp	r3, #5
 8000b38:	d82b      	bhi.n	8000b92 <main+0x8a>
 8000b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8000b40 <main+0x38>)
 8000b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b40:	08000b59 	.word	0x08000b59
 8000b44:	08000b63 	.word	0x08000b63
 8000b48:	08000b6d 	.word	0x08000b6d
 8000b4c:	08000b77 	.word	0x08000b77
 8000b50:	08000b81 	.word	0x08000b81
 8000b54:	08000b8b 	.word	0x08000b8b
		  case Set_State:
			  NextState = SetHandler();
 8000b58:	f7ff ff8c 	bl	8000a74 <_Z10SetHandlerv>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	71fb      	strb	r3, [r7, #7]
			  break;
 8000b60:	e018      	b.n	8000b94 <main+0x8c>
		  case Idle_State:
			  NextState = IdleHandler();
 8000b62:	f7ff ff9f 	bl	8000aa4 <_Z11IdleHandlerv>
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
			  break;
 8000b6a:	e013      	b.n	8000b94 <main+0x8c>
		  case Heat_State:
			  NextState = HeatHandler();
 8000b6c:	f7ff ffa5 	bl	8000aba <_Z11HeatHandlerv>
 8000b70:	4603      	mov	r3, r0
 8000b72:	71fb      	strb	r3, [r7, #7]
			  break;
 8000b74:	e00e      	b.n	8000b94 <main+0x8c>
		  case Cool_State:
			  NextState = CoolHandler();
 8000b76:	f7ff ffa8 	bl	8000aca <_Z11CoolHandlerv>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	71fb      	strb	r3, [r7, #7]
			  break;
 8000b7e:	e009      	b.n	8000b94 <main+0x8c>
		  case Range_State:
			  NextState = RangeHandler();
 8000b80:	f7ff ffac 	bl	8000adc <_Z12RangeHandlerv>
 8000b84:	4603      	mov	r3, r0
 8000b86:	71fb      	strb	r3, [r7, #7]
			  break;
 8000b88:	e004      	b.n	8000b94 <main+0x8c>
		  case Off_State:
			  food_cooked = true;
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb4 <main+0xac>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	701a      	strb	r2, [r3, #0]
			  break;
 8000b90:	e000      	b.n	8000b94 <main+0x8c>
		  default:
			  break;
 8000b92:	bf00      	nop
	  while(!food_cooked){
 8000b94:	4b07      	ldr	r3, [pc, #28]	@ (8000bb4 <main+0xac>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	f083 0301 	eor.w	r3, r3, #1
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d1c8      	bne.n	8000b34 <main+0x2c>
		  }
	  }
	  displayFinishedMSG();
 8000ba2:	f7ff ff29 	bl	80009f8 <_Z18displayFinishedMSGv>
	  while(!food_cooked){
 8000ba6:	e7f5      	b.n	8000b94 <main+0x8c>
 8000ba8:	200002e8 	.word	0x200002e8
 8000bac:	43af0000 	.word	0x43af0000
 8000bb0:	43250000 	.word	0x43250000
 8000bb4:	20000380 	.word	0x20000380

08000bb8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b094      	sub	sp, #80	@ 0x50
 8000bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	2234      	movs	r2, #52	@ 0x34
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f003 fff7 	bl	8004bba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bcc:	f107 0308 	add.w	r3, r7, #8
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bdc:	4b27      	ldr	r3, [pc, #156]	@ (8000c7c <_Z18SystemClock_Configv+0xc4>)
 8000bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be0:	4a26      	ldr	r2, [pc, #152]	@ (8000c7c <_Z18SystemClock_Configv+0xc4>)
 8000be2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000be6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000be8:	4b24      	ldr	r3, [pc, #144]	@ (8000c7c <_Z18SystemClock_Configv+0xc4>)
 8000bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bf4:	4b22      	ldr	r3, [pc, #136]	@ (8000c80 <_Z18SystemClock_Configv+0xc8>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bfc:	4a20      	ldr	r2, [pc, #128]	@ (8000c80 <_Z18SystemClock_Configv+0xc8>)
 8000bfe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c02:	6013      	str	r3, [r2, #0]
 8000c04:	4b1e      	ldr	r3, [pc, #120]	@ (8000c80 <_Z18SystemClock_Configv+0xc8>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c0c:	603b      	str	r3, [r7, #0]
 8000c0e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c10:	2302      	movs	r3, #2
 8000c12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c14:	2301      	movs	r3, #1
 8000c16:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c18:	2310      	movs	r3, #16
 8000c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c20:	f107 031c 	add.w	r3, r7, #28
 8000c24:	4618      	mov	r0, r3
 8000c26:	f000 ff5b 	bl	8001ae0 <HAL_RCC_OscConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	bf14      	ite	ne
 8000c30:	2301      	movne	r3, #1
 8000c32:	2300      	moveq	r3, #0
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 8000c3a:	f000 f9bd 	bl	8000fb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3e:	230f      	movs	r3, #15
 8000c40:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c54:	f107 0308 	add.w	r3, r7, #8
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f001 f9ee 	bl	800203c <HAL_RCC_ClockConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	bf14      	ite	ne
 8000c66:	2301      	movne	r3, #1
 8000c68:	2300      	moveq	r3, #0
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 8000c70:	f000 f9a2 	bl	8000fb8 <Error_Handler>
  }
}
 8000c74:	bf00      	nop
 8000c76:	3750      	adds	r7, #80	@ 0x50
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40007000 	.word	0x40007000

08000c84 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c8a:	f107 0310 	add.w	r3, r7, #16
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ca2:	4b27      	ldr	r3, [pc, #156]	@ (8000d40 <_ZL12MX_TIM1_Initv+0xbc>)
 8000ca4:	4a27      	ldr	r2, [pc, #156]	@ (8000d44 <_ZL12MX_TIM1_Initv+0xc0>)
 8000ca6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8000ca8:	4b25      	ldr	r3, [pc, #148]	@ (8000d40 <_ZL12MX_TIM1_Initv+0xbc>)
 8000caa:	220f      	movs	r2, #15
 8000cac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cae:	4b24      	ldr	r3, [pc, #144]	@ (8000d40 <_ZL12MX_TIM1_Initv+0xbc>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFF-1;
 8000cb4:	4b22      	ldr	r3, [pc, #136]	@ (8000d40 <_ZL12MX_TIM1_Initv+0xbc>)
 8000cb6:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8000cba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cbc:	4b20      	ldr	r3, [pc, #128]	@ (8000d40 <_ZL12MX_TIM1_Initv+0xbc>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cc2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d40 <_ZL12MX_TIM1_Initv+0xbc>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d40 <_ZL12MX_TIM1_Initv+0xbc>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cce:	481c      	ldr	r0, [pc, #112]	@ (8000d40 <_ZL12MX_TIM1_Initv+0xbc>)
 8000cd0:	f002 f800 	bl	8002cd4 <HAL_TIM_Base_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	bf14      	ite	ne
 8000cda:	2301      	movne	r3, #1
 8000cdc:	2300      	moveq	r3, #0
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <_ZL12MX_TIM1_Initv+0x64>
  {
    Error_Handler();
 8000ce4:	f000 f968 	bl	8000fb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ce8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cee:	f107 0310 	add.w	r3, r7, #16
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4812      	ldr	r0, [pc, #72]	@ (8000d40 <_ZL12MX_TIM1_Initv+0xbc>)
 8000cf6:	f002 f9bd 	bl	8003074 <HAL_TIM_ConfigClockSource>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	bf14      	ite	ne
 8000d00:	2301      	movne	r3, #1
 8000d02:	2300      	moveq	r3, #0
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <_ZL12MX_TIM1_Initv+0x8a>
  {
    Error_Handler();
 8000d0a:	f000 f955 	bl	8000fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4808      	ldr	r0, [pc, #32]	@ (8000d40 <_ZL12MX_TIM1_Initv+0xbc>)
 8000d20:	f002 fbea 	bl	80034f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	bf14      	ite	ne
 8000d2a:	2301      	movne	r3, #1
 8000d2c:	2300      	moveq	r3, #0
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <_ZL12MX_TIM1_Initv+0xb4>
  {
    Error_Handler();
 8000d34:	f000 f940 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d38:	bf00      	nop
 8000d3a:	3720      	adds	r7, #32
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	200001f0 	.word	0x200001f0
 8000d44:	40010000 	.word	0x40010000

08000d48 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d4c:	4b16      	ldr	r3, [pc, #88]	@ (8000da8 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000d4e:	4a17      	ldr	r2, [pc, #92]	@ (8000dac <_ZL19MX_USART3_UART_Initv+0x64>)
 8000d50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d52:	4b15      	ldr	r3, [pc, #84]	@ (8000da8 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000d54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5a:	4b13      	ldr	r3, [pc, #76]	@ (8000da8 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d60:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d66:	4b10      	ldr	r3, [pc, #64]	@ (8000da8 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000da8 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000d6e:	220c      	movs	r2, #12
 8000d70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d72:	4b0d      	ldr	r3, [pc, #52]	@ (8000da8 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d78:	4b0b      	ldr	r3, [pc, #44]	@ (8000da8 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000da8 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d84:	4b08      	ldr	r3, [pc, #32]	@ (8000da8 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d8a:	4807      	ldr	r0, [pc, #28]	@ (8000da8 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000d8c:	f002 fc60 	bl	8003650 <HAL_UART_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	bf14      	ite	ne
 8000d96:	2301      	movne	r3, #1
 8000d98:	2300      	moveq	r3, #0
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <_ZL19MX_USART3_UART_Initv+0x5c>
  {
    Error_Handler();
 8000da0:	f000 f90a 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	2000023c 	.word	0x2000023c
 8000dac:	40004800 	.word	0x40004800

08000db0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08c      	sub	sp, #48	@ 0x30
 8000db4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db6:	f107 031c 	add.w	r3, r7, #28
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
 8000dc4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc6:	4b77      	ldr	r3, [pc, #476]	@ (8000fa4 <_ZL12MX_GPIO_Initv+0x1f4>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	4a76      	ldr	r2, [pc, #472]	@ (8000fa4 <_ZL12MX_GPIO_Initv+0x1f4>)
 8000dcc:	f043 0304 	orr.w	r3, r3, #4
 8000dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd2:	4b74      	ldr	r3, [pc, #464]	@ (8000fa4 <_ZL12MX_GPIO_Initv+0x1f4>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	f003 0304 	and.w	r3, r3, #4
 8000dda:	61bb      	str	r3, [r7, #24]
 8000ddc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dde:	4b71      	ldr	r3, [pc, #452]	@ (8000fa4 <_ZL12MX_GPIO_Initv+0x1f4>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	4a70      	ldr	r2, [pc, #448]	@ (8000fa4 <_ZL12MX_GPIO_Initv+0x1f4>)
 8000de4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dea:	4b6e      	ldr	r3, [pc, #440]	@ (8000fa4 <_ZL12MX_GPIO_Initv+0x1f4>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	4b6b      	ldr	r3, [pc, #428]	@ (8000fa4 <_ZL12MX_GPIO_Initv+0x1f4>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	4a6a      	ldr	r2, [pc, #424]	@ (8000fa4 <_ZL12MX_GPIO_Initv+0x1f4>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e02:	4b68      	ldr	r3, [pc, #416]	@ (8000fa4 <_ZL12MX_GPIO_Initv+0x1f4>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0e:	4b65      	ldr	r3, [pc, #404]	@ (8000fa4 <_ZL12MX_GPIO_Initv+0x1f4>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	4a64      	ldr	r2, [pc, #400]	@ (8000fa4 <_ZL12MX_GPIO_Initv+0x1f4>)
 8000e14:	f043 0302 	orr.w	r3, r3, #2
 8000e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1a:	4b62      	ldr	r3, [pc, #392]	@ (8000fa4 <_ZL12MX_GPIO_Initv+0x1f4>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e26:	4b5f      	ldr	r3, [pc, #380]	@ (8000fa4 <_ZL12MX_GPIO_Initv+0x1f4>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	4a5e      	ldr	r2, [pc, #376]	@ (8000fa4 <_ZL12MX_GPIO_Initv+0x1f4>)
 8000e2c:	f043 0308 	orr.w	r3, r3, #8
 8000e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e32:	4b5c      	ldr	r3, [pc, #368]	@ (8000fa4 <_ZL12MX_GPIO_Initv+0x1f4>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	f003 0308 	and.w	r3, r3, #8
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e3e:	4b59      	ldr	r3, [pc, #356]	@ (8000fa4 <_ZL12MX_GPIO_Initv+0x1f4>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	4a58      	ldr	r2, [pc, #352]	@ (8000fa4 <_ZL12MX_GPIO_Initv+0x1f4>)
 8000e44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4a:	4b56      	ldr	r3, [pc, #344]	@ (8000fa4 <_ZL12MX_GPIO_Initv+0x1f4>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000e5c:	4852      	ldr	r0, [pc, #328]	@ (8000fa8 <_ZL12MX_GPIO_Initv+0x1f8>)
 8000e5e:	f000 fe25 	bl	8001aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2140      	movs	r1, #64	@ 0x40
 8000e66:	4851      	ldr	r0, [pc, #324]	@ (8000fac <_ZL12MX_GPIO_Initv+0x1fc>)
 8000e68:	f000 fe20 	bl	8001aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e72:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 031c 	add.w	r3, r7, #28
 8000e80:	4619      	mov	r1, r3
 8000e82:	484b      	ldr	r0, [pc, #300]	@ (8000fb0 <_ZL12MX_GPIO_Initv+0x200>)
 8000e84:	f000 fc4e 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e88:	2332      	movs	r3, #50	@ 0x32
 8000e8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e94:	2303      	movs	r3, #3
 8000e96:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e98:	230b      	movs	r3, #11
 8000e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e9c:	f107 031c 	add.w	r3, r7, #28
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4843      	ldr	r0, [pc, #268]	@ (8000fb0 <_ZL12MX_GPIO_Initv+0x200>)
 8000ea4:	f000 fc3e 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ea8:	2386      	movs	r3, #134	@ 0x86
 8000eaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eb8:	230b      	movs	r3, #11
 8000eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	f107 031c 	add.w	r3, r7, #28
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	483c      	ldr	r0, [pc, #240]	@ (8000fb4 <_ZL12MX_GPIO_Initv+0x204>)
 8000ec4:	f000 fc2e 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ec8:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000ecc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eda:	f107 031c 	add.w	r3, r7, #28
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4831      	ldr	r0, [pc, #196]	@ (8000fa8 <_ZL12MX_GPIO_Initv+0x1f8>)
 8000ee2:	f000 fc1f 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ee6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ef8:	230b      	movs	r3, #11
 8000efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000efc:	f107 031c 	add.w	r3, r7, #28
 8000f00:	4619      	mov	r1, r3
 8000f02:	4829      	ldr	r0, [pc, #164]	@ (8000fa8 <_ZL12MX_GPIO_Initv+0x1f8>)
 8000f04:	f000 fc0e 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f08:	2340      	movs	r3, #64	@ 0x40
 8000f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	2300      	movs	r3, #0
 8000f16:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f18:	f107 031c 	add.w	r3, r7, #28
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4823      	ldr	r0, [pc, #140]	@ (8000fac <_ZL12MX_GPIO_Initv+0x1fc>)
 8000f20:	f000 fc00 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f24:	2380      	movs	r3, #128	@ 0x80
 8000f26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f30:	f107 031c 	add.w	r3, r7, #28
 8000f34:	4619      	mov	r1, r3
 8000f36:	481d      	ldr	r0, [pc, #116]	@ (8000fac <_ZL12MX_GPIO_Initv+0x1fc>)
 8000f38:	f000 fbf4 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f3c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000f40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f4e:	230a      	movs	r3, #10
 8000f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	4619      	mov	r1, r3
 8000f58:	4816      	ldr	r0, [pc, #88]	@ (8000fb4 <_ZL12MX_GPIO_Initv+0x204>)
 8000f5a:	f000 fbe3 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f64:	2300      	movs	r3, #0
 8000f66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	4619      	mov	r1, r3
 8000f72:	4810      	ldr	r0, [pc, #64]	@ (8000fb4 <_ZL12MX_GPIO_Initv+0x204>)
 8000f74:	f000 fbd6 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f78:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f86:	2303      	movs	r3, #3
 8000f88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f8a:	230b      	movs	r3, #11
 8000f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	4619      	mov	r1, r3
 8000f94:	4805      	ldr	r0, [pc, #20]	@ (8000fac <_ZL12MX_GPIO_Initv+0x1fc>)
 8000f96:	f000 fbc5 	bl	8001724 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f9a:	bf00      	nop
 8000f9c:	3730      	adds	r7, #48	@ 0x30
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40020400 	.word	0x40020400
 8000fac:	40021800 	.word	0x40021800
 8000fb0:	40020800 	.word	0x40020800
 8000fb4:	40020000 	.word	0x40020000

08000fb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fbc:	b672      	cpsid	i
}
 8000fbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <Error_Handler+0x8>

08000fc4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d119      	bne.n	8001008 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d114      	bne.n	8001008 <_Z41__static_initialization_and_destruction_0ii+0x44>
DS18B20 meat_temp_sensor = DS18B20(&htim1, MEAT_PORT, MEAT_PIN);
 8000fde:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fe2:	4a0b      	ldr	r2, [pc, #44]	@ (8001010 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8000fe4:	490b      	ldr	r1, [pc, #44]	@ (8001014 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8000fe6:	480c      	ldr	r0, [pc, #48]	@ (8001018 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8000fe8:	f7ff fafa 	bl	80005e0 <_ZN7DS18B20C1EP17TIM_HandleTypeDefP12GPIO_TypeDeft>
DS18B20 grill_temp_sensor = DS18B20(&htim1, GRILL_PORT, GRILL_PIN);
 8000fec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ff0:	4a07      	ldr	r2, [pc, #28]	@ (8001010 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8000ff2:	4908      	ldr	r1, [pc, #32]	@ (8001014 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8000ff4:	4809      	ldr	r0, [pc, #36]	@ (800101c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8000ff6:	f7ff faf3 	bl	80005e0 <_ZN7DS18B20C1EP17TIM_HandleTypeDefP12GPIO_TypeDeft>
DS18B20 flame_temp_sensor = DS18B20(&htim1, FLAME_PORT, FLAME_PIN);
 8000ffa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ffe:	4a04      	ldr	r2, [pc, #16]	@ (8001010 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001000:	4904      	ldr	r1, [pc, #16]	@ (8001014 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001002:	4807      	ldr	r0, [pc, #28]	@ (8001020 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001004:	f7ff faec 	bl	80005e0 <_ZN7DS18B20C1EP17TIM_HandleTypeDefP12GPIO_TypeDeft>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40020400 	.word	0x40020400
 8001014:	200001f0 	.word	0x200001f0
 8001018:	200002c4 	.word	0x200002c4
 800101c:	200002d0 	.word	0x200002d0
 8001020:	200002dc 	.word	0x200002dc

08001024 <_GLOBAL__sub_I_htim1>:
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
 8001028:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800102c:	2001      	movs	r0, #1
 800102e:	f7ff ffc9 	bl	8000fc4 <_Z41__static_initialization_and_destruction_0ii>
 8001032:	bd80      	pop	{r7, pc}

08001034 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800103a:	4b0f      	ldr	r3, [pc, #60]	@ (8001078 <HAL_MspInit+0x44>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103e:	4a0e      	ldr	r2, [pc, #56]	@ (8001078 <HAL_MspInit+0x44>)
 8001040:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001044:	6413      	str	r3, [r2, #64]	@ 0x40
 8001046:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <HAL_MspInit+0x44>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <HAL_MspInit+0x44>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001056:	4a08      	ldr	r2, [pc, #32]	@ (8001078 <HAL_MspInit+0x44>)
 8001058:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800105c:	6453      	str	r3, [r2, #68]	@ 0x44
 800105e:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <HAL_MspInit+0x44>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001062:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001066:	603b      	str	r3, [r7, #0]
 8001068:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	40023800 	.word	0x40023800

0800107c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a0d      	ldr	r2, [pc, #52]	@ (80010c0 <HAL_TIM_Base_MspInit+0x44>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d113      	bne.n	80010b6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800108e:	4b0d      	ldr	r3, [pc, #52]	@ (80010c4 <HAL_TIM_Base_MspInit+0x48>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001092:	4a0c      	ldr	r2, [pc, #48]	@ (80010c4 <HAL_TIM_Base_MspInit+0x48>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6453      	str	r3, [r2, #68]	@ 0x44
 800109a:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <HAL_TIM_Base_MspInit+0x48>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	2019      	movs	r0, #25
 80010ac:	f000 fb03 	bl	80016b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80010b0:	2019      	movs	r0, #25
 80010b2:	f000 fb1c 	bl	80016ee <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40010000 	.word	0x40010000
 80010c4:	40023800 	.word	0x40023800

080010c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b0ae      	sub	sp, #184	@ 0xb8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	2290      	movs	r2, #144	@ 0x90
 80010e6:	2100      	movs	r1, #0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f003 fd66 	bl	8004bba <memset>
  if(huart->Instance==USART3)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a22      	ldr	r2, [pc, #136]	@ (800117c <HAL_UART_MspInit+0xb4>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d13c      	bne.n	8001172 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010fc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010fe:	2300      	movs	r3, #0
 8001100:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4618      	mov	r0, r3
 8001108:	f001 f9bc 	bl	8002484 <HAL_RCCEx_PeriphCLKConfig>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001112:	f7ff ff51 	bl	8000fb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001116:	4b1a      	ldr	r3, [pc, #104]	@ (8001180 <HAL_UART_MspInit+0xb8>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111a:	4a19      	ldr	r2, [pc, #100]	@ (8001180 <HAL_UART_MspInit+0xb8>)
 800111c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001120:	6413      	str	r3, [r2, #64]	@ 0x40
 8001122:	4b17      	ldr	r3, [pc, #92]	@ (8001180 <HAL_UART_MspInit+0xb8>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001126:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800112e:	4b14      	ldr	r3, [pc, #80]	@ (8001180 <HAL_UART_MspInit+0xb8>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	4a13      	ldr	r2, [pc, #76]	@ (8001180 <HAL_UART_MspInit+0xb8>)
 8001134:	f043 0308 	orr.w	r3, r3, #8
 8001138:	6313      	str	r3, [r2, #48]	@ 0x30
 800113a:	4b11      	ldr	r3, [pc, #68]	@ (8001180 <HAL_UART_MspInit+0xb8>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	f003 0308 	and.w	r3, r3, #8
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001146:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800114a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	2302      	movs	r3, #2
 8001150:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115a:	2303      	movs	r3, #3
 800115c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001160:	2307      	movs	r3, #7
 8001162:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001166:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800116a:	4619      	mov	r1, r3
 800116c:	4805      	ldr	r0, [pc, #20]	@ (8001184 <HAL_UART_MspInit+0xbc>)
 800116e:	f000 fad9 	bl	8001724 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001172:	bf00      	nop
 8001174:	37b8      	adds	r7, #184	@ 0xb8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40004800 	.word	0x40004800
 8001180:	40023800 	.word	0x40023800
 8001184:	40020c00 	.word	0x40020c00

08001188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <NMI_Handler+0x4>

08001190 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001194:	bf00      	nop
 8001196:	e7fd      	b.n	8001194 <HardFault_Handler+0x4>

08001198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <MemManage_Handler+0x4>

080011a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a4:	bf00      	nop
 80011a6:	e7fd      	b.n	80011a4 <BusFault_Handler+0x4>

080011a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <UsageFault_Handler+0x4>

080011b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011de:	f000 f94b 	bl	8001478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011ec:	4802      	ldr	r0, [pc, #8]	@ (80011f8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80011ee:	f001 fe39 	bl	8002e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200001f0 	.word	0x200001f0

080011fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return 1;
 8001200:	2301      	movs	r3, #1
}
 8001202:	4618      	mov	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <_kill>:

int _kill(int pid, int sig)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001216:	f003 fd23 	bl	8004c60 <__errno>
 800121a:	4603      	mov	r3, r0
 800121c:	2216      	movs	r2, #22
 800121e:	601a      	str	r2, [r3, #0]
  return -1;
 8001220:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <_exit>:

void _exit (int status)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001234:	f04f 31ff 	mov.w	r1, #4294967295
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ffe7 	bl	800120c <_kill>
  while (1) {}    /* Make sure we hang here */
 800123e:	bf00      	nop
 8001240:	e7fd      	b.n	800123e <_exit+0x12>

08001242 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b086      	sub	sp, #24
 8001246:	af00      	add	r7, sp, #0
 8001248:	60f8      	str	r0, [r7, #12]
 800124a:	60b9      	str	r1, [r7, #8]
 800124c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	e00a      	b.n	800126a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001254:	f3af 8000 	nop.w
 8001258:	4601      	mov	r1, r0
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	1c5a      	adds	r2, r3, #1
 800125e:	60ba      	str	r2, [r7, #8]
 8001260:	b2ca      	uxtb	r2, r1
 8001262:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	3301      	adds	r3, #1
 8001268:	617b      	str	r3, [r7, #20]
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	429a      	cmp	r2, r3
 8001270:	dbf0      	blt.n	8001254 <_read+0x12>
  }

  return len;
 8001272:	687b      	ldr	r3, [r7, #4]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	e009      	b.n	80012a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	1c5a      	adds	r2, r3, #1
 8001292:	60ba      	str	r2, [r7, #8]
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	3301      	adds	r3, #1
 80012a0:	617b      	str	r3, [r7, #20]
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	dbf1      	blt.n	800128e <_write+0x12>
  }
  return len;
 80012aa:	687b      	ldr	r3, [r7, #4]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <_close>:

int _close(int file)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012dc:	605a      	str	r2, [r3, #4]
  return 0;
 80012de:	2300      	movs	r3, #0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <_isatty>:

int _isatty(int file)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012f4:	2301      	movs	r3, #1
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001302:	b480      	push	{r7}
 8001304:	b085      	sub	sp, #20
 8001306:	af00      	add	r7, sp, #0
 8001308:	60f8      	str	r0, [r7, #12]
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001324:	4a14      	ldr	r2, [pc, #80]	@ (8001378 <_sbrk+0x5c>)
 8001326:	4b15      	ldr	r3, [pc, #84]	@ (800137c <_sbrk+0x60>)
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001330:	4b13      	ldr	r3, [pc, #76]	@ (8001380 <_sbrk+0x64>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d102      	bne.n	800133e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001338:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <_sbrk+0x64>)
 800133a:	4a12      	ldr	r2, [pc, #72]	@ (8001384 <_sbrk+0x68>)
 800133c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800133e:	4b10      	ldr	r3, [pc, #64]	@ (8001380 <_sbrk+0x64>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4413      	add	r3, r2
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	429a      	cmp	r2, r3
 800134a:	d207      	bcs.n	800135c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800134c:	f003 fc88 	bl	8004c60 <__errno>
 8001350:	4603      	mov	r3, r0
 8001352:	220c      	movs	r2, #12
 8001354:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001356:	f04f 33ff 	mov.w	r3, #4294967295
 800135a:	e009      	b.n	8001370 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800135c:	4b08      	ldr	r3, [pc, #32]	@ (8001380 <_sbrk+0x64>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001362:	4b07      	ldr	r3, [pc, #28]	@ (8001380 <_sbrk+0x64>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4413      	add	r3, r2
 800136a:	4a05      	ldr	r2, [pc, #20]	@ (8001380 <_sbrk+0x64>)
 800136c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800136e:	68fb      	ldr	r3, [r7, #12]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20080000 	.word	0x20080000
 800137c:	00000400 	.word	0x00000400
 8001380:	20000384 	.word	0x20000384
 8001384:	200004d8 	.word	0x200004d8

08001388 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <SystemInit+0x20>)
 800138e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001392:	4a05      	ldr	r2, [pc, #20]	@ (80013a8 <SystemInit+0x20>)
 8001394:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001398:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013b0:	f7ff ffea 	bl	8001388 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013b4:	480c      	ldr	r0, [pc, #48]	@ (80013e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013b6:	490d      	ldr	r1, [pc, #52]	@ (80013ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013b8:	4a0d      	ldr	r2, [pc, #52]	@ (80013f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013bc:	e002      	b.n	80013c4 <LoopCopyDataInit>

080013be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c2:	3304      	adds	r3, #4

080013c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c8:	d3f9      	bcc.n	80013be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ca:	4a0a      	ldr	r2, [pc, #40]	@ (80013f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013cc:	4c0a      	ldr	r4, [pc, #40]	@ (80013f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d0:	e001      	b.n	80013d6 <LoopFillZerobss>

080013d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d4:	3204      	adds	r2, #4

080013d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d8:	d3fb      	bcc.n	80013d2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80013da:	f003 fc47 	bl	8004c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013de:	f7ff fb93 	bl	8000b08 <main>
  bx  lr    
 80013e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013e4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80013e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013ec:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80013f0:	0800709c 	.word	0x0800709c
  ldr r2, =_sbss
 80013f4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80013f8:	200004d8 	.word	0x200004d8

080013fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013fc:	e7fe      	b.n	80013fc <ADC_IRQHandler>

080013fe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001402:	2003      	movs	r0, #3
 8001404:	f000 f94c 	bl	80016a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001408:	2000      	movs	r0, #0
 800140a:	f000 f805 	bl	8001418 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800140e:	f7ff fe11 	bl	8001034 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	bd80      	pop	{r7, pc}

08001418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001420:	4b12      	ldr	r3, [pc, #72]	@ (800146c <HAL_InitTick+0x54>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4b12      	ldr	r3, [pc, #72]	@ (8001470 <HAL_InitTick+0x58>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	4619      	mov	r1, r3
 800142a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800142e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001432:	fbb2 f3f3 	udiv	r3, r2, r3
 8001436:	4618      	mov	r0, r3
 8001438:	f000 f967 	bl	800170a <HAL_SYSTICK_Config>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e00e      	b.n	8001464 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b0f      	cmp	r3, #15
 800144a:	d80a      	bhi.n	8001462 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800144c:	2200      	movs	r2, #0
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	f04f 30ff 	mov.w	r0, #4294967295
 8001454:	f000 f92f 	bl	80016b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001458:	4a06      	ldr	r2, [pc, #24]	@ (8001474 <HAL_InitTick+0x5c>)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	e000      	b.n	8001464 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
}
 8001464:	4618      	mov	r0, r3
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000000 	.word	0x20000000
 8001470:	20000008 	.word	0x20000008
 8001474:	20000004 	.word	0x20000004

08001478 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800147c:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <HAL_IncTick+0x20>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	461a      	mov	r2, r3
 8001482:	4b06      	ldr	r3, [pc, #24]	@ (800149c <HAL_IncTick+0x24>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4413      	add	r3, r2
 8001488:	4a04      	ldr	r2, [pc, #16]	@ (800149c <HAL_IncTick+0x24>)
 800148a:	6013      	str	r3, [r2, #0]
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	20000008 	.word	0x20000008
 800149c:	20000388 	.word	0x20000388

080014a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  return uwTick;
 80014a4:	4b03      	ldr	r3, [pc, #12]	@ (80014b4 <HAL_GetTick+0x14>)
 80014a6:	681b      	ldr	r3, [r3, #0]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	20000388 	.word	0x20000388

080014b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014c0:	f7ff ffee 	bl	80014a0 <HAL_GetTick>
 80014c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d0:	d005      	beq.n	80014de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014d2:	4b0a      	ldr	r3, [pc, #40]	@ (80014fc <HAL_Delay+0x44>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	461a      	mov	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4413      	add	r3, r2
 80014dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014de:	bf00      	nop
 80014e0:	f7ff ffde 	bl	80014a0 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d8f7      	bhi.n	80014e0 <HAL_Delay+0x28>
  {
  }
}
 80014f0:	bf00      	nop
 80014f2:	bf00      	nop
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000008 	.word	0x20000008

08001500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001510:	4b0b      	ldr	r3, [pc, #44]	@ (8001540 <__NVIC_SetPriorityGrouping+0x40>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800151c:	4013      	ands	r3, r2
 800151e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001528:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <__NVIC_SetPriorityGrouping+0x44>)
 800152a:	4313      	orrs	r3, r2
 800152c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800152e:	4a04      	ldr	r2, [pc, #16]	@ (8001540 <__NVIC_SetPriorityGrouping+0x40>)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	60d3      	str	r3, [r2, #12]
}
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000ed00 	.word	0xe000ed00
 8001544:	05fa0000 	.word	0x05fa0000

08001548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800154c:	4b04      	ldr	r3, [pc, #16]	@ (8001560 <__NVIC_GetPriorityGrouping+0x18>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	0a1b      	lsrs	r3, r3, #8
 8001552:	f003 0307 	and.w	r3, r3, #7
}
 8001556:	4618      	mov	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	2b00      	cmp	r3, #0
 8001574:	db0b      	blt.n	800158e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	f003 021f 	and.w	r2, r3, #31
 800157c:	4907      	ldr	r1, [pc, #28]	@ (800159c <__NVIC_EnableIRQ+0x38>)
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	095b      	lsrs	r3, r3, #5
 8001584:	2001      	movs	r0, #1
 8001586:	fa00 f202 	lsl.w	r2, r0, r2
 800158a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000e100 	.word	0xe000e100

080015a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	6039      	str	r1, [r7, #0]
 80015aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	db0a      	blt.n	80015ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	490c      	ldr	r1, [pc, #48]	@ (80015ec <__NVIC_SetPriority+0x4c>)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	0112      	lsls	r2, r2, #4
 80015c0:	b2d2      	uxtb	r2, r2
 80015c2:	440b      	add	r3, r1
 80015c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c8:	e00a      	b.n	80015e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	4908      	ldr	r1, [pc, #32]	@ (80015f0 <__NVIC_SetPriority+0x50>)
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	3b04      	subs	r3, #4
 80015d8:	0112      	lsls	r2, r2, #4
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	440b      	add	r3, r1
 80015de:	761a      	strb	r2, [r3, #24]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000e100 	.word	0xe000e100
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b089      	sub	sp, #36	@ 0x24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f1c3 0307 	rsb	r3, r3, #7
 800160e:	2b04      	cmp	r3, #4
 8001610:	bf28      	it	cs
 8001612:	2304      	movcs	r3, #4
 8001614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3304      	adds	r3, #4
 800161a:	2b06      	cmp	r3, #6
 800161c:	d902      	bls.n	8001624 <NVIC_EncodePriority+0x30>
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3b03      	subs	r3, #3
 8001622:	e000      	b.n	8001626 <NVIC_EncodePriority+0x32>
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	f04f 32ff 	mov.w	r2, #4294967295
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43da      	mvns	r2, r3
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	401a      	ands	r2, r3
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800163c:	f04f 31ff 	mov.w	r1, #4294967295
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	fa01 f303 	lsl.w	r3, r1, r3
 8001646:	43d9      	mvns	r1, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164c:	4313      	orrs	r3, r2
         );
}
 800164e:	4618      	mov	r0, r3
 8001650:	3724      	adds	r7, #36	@ 0x24
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3b01      	subs	r3, #1
 8001668:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800166c:	d301      	bcc.n	8001672 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800166e:	2301      	movs	r3, #1
 8001670:	e00f      	b.n	8001692 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001672:	4a0a      	ldr	r2, [pc, #40]	@ (800169c <SysTick_Config+0x40>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3b01      	subs	r3, #1
 8001678:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800167a:	210f      	movs	r1, #15
 800167c:	f04f 30ff 	mov.w	r0, #4294967295
 8001680:	f7ff ff8e 	bl	80015a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001684:	4b05      	ldr	r3, [pc, #20]	@ (800169c <SysTick_Config+0x40>)
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800168a:	4b04      	ldr	r3, [pc, #16]	@ (800169c <SysTick_Config+0x40>)
 800168c:	2207      	movs	r2, #7
 800168e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	e000e010 	.word	0xe000e010

080016a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff ff29 	bl	8001500 <__NVIC_SetPriorityGrouping>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b086      	sub	sp, #24
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	4603      	mov	r3, r0
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
 80016c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016c8:	f7ff ff3e 	bl	8001548 <__NVIC_GetPriorityGrouping>
 80016cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	68b9      	ldr	r1, [r7, #8]
 80016d2:	6978      	ldr	r0, [r7, #20]
 80016d4:	f7ff ff8e 	bl	80015f4 <NVIC_EncodePriority>
 80016d8:	4602      	mov	r2, r0
 80016da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016de:	4611      	mov	r1, r2
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff5d 	bl	80015a0 <__NVIC_SetPriority>
}
 80016e6:	bf00      	nop
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	4603      	mov	r3, r0
 80016f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ff31 	bl	8001564 <__NVIC_EnableIRQ>
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff ffa2 	bl	800165c <SysTick_Config>
 8001718:	4603      	mov	r3, r0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001724:	b480      	push	{r7}
 8001726:	b089      	sub	sp, #36	@ 0x24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800173a:	2300      	movs	r3, #0
 800173c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
 8001742:	e175      	b.n	8001a30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001744:	2201      	movs	r2, #1
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	4013      	ands	r3, r2
 8001756:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	429a      	cmp	r2, r3
 800175e:	f040 8164 	bne.w	8001a2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	2b01      	cmp	r3, #1
 800176c:	d005      	beq.n	800177a <HAL_GPIO_Init+0x56>
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d130      	bne.n	80017dc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	2203      	movs	r2, #3
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43db      	mvns	r3, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4013      	ands	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	68da      	ldr	r2, [r3, #12]
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017b0:	2201      	movs	r2, #1
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	091b      	lsrs	r3, r3, #4
 80017c6:	f003 0201 	and.w	r2, r3, #1
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	2b03      	cmp	r3, #3
 80017e6:	d017      	beq.n	8001818 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	2203      	movs	r2, #3
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d123      	bne.n	800186c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	08da      	lsrs	r2, r3, #3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3208      	adds	r2, #8
 800182c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	220f      	movs	r2, #15
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	691a      	ldr	r2, [r3, #16]
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	08da      	lsrs	r2, r3, #3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	3208      	adds	r2, #8
 8001866:	69b9      	ldr	r1, [r7, #24]
 8001868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	2203      	movs	r2, #3
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 0203 	and.w	r2, r3, #3
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 80be 	beq.w	8001a2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ae:	4b66      	ldr	r3, [pc, #408]	@ (8001a48 <HAL_GPIO_Init+0x324>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b2:	4a65      	ldr	r2, [pc, #404]	@ (8001a48 <HAL_GPIO_Init+0x324>)
 80018b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ba:	4b63      	ldr	r3, [pc, #396]	@ (8001a48 <HAL_GPIO_Init+0x324>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80018c6:	4a61      	ldr	r2, [pc, #388]	@ (8001a4c <HAL_GPIO_Init+0x328>)
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	089b      	lsrs	r3, r3, #2
 80018cc:	3302      	adds	r3, #2
 80018ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	220f      	movs	r2, #15
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a58      	ldr	r2, [pc, #352]	@ (8001a50 <HAL_GPIO_Init+0x32c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d037      	beq.n	8001962 <HAL_GPIO_Init+0x23e>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a57      	ldr	r2, [pc, #348]	@ (8001a54 <HAL_GPIO_Init+0x330>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d031      	beq.n	800195e <HAL_GPIO_Init+0x23a>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a56      	ldr	r2, [pc, #344]	@ (8001a58 <HAL_GPIO_Init+0x334>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d02b      	beq.n	800195a <HAL_GPIO_Init+0x236>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a55      	ldr	r2, [pc, #340]	@ (8001a5c <HAL_GPIO_Init+0x338>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d025      	beq.n	8001956 <HAL_GPIO_Init+0x232>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a54      	ldr	r2, [pc, #336]	@ (8001a60 <HAL_GPIO_Init+0x33c>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d01f      	beq.n	8001952 <HAL_GPIO_Init+0x22e>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a53      	ldr	r2, [pc, #332]	@ (8001a64 <HAL_GPIO_Init+0x340>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d019      	beq.n	800194e <HAL_GPIO_Init+0x22a>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a52      	ldr	r2, [pc, #328]	@ (8001a68 <HAL_GPIO_Init+0x344>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d013      	beq.n	800194a <HAL_GPIO_Init+0x226>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a51      	ldr	r2, [pc, #324]	@ (8001a6c <HAL_GPIO_Init+0x348>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d00d      	beq.n	8001946 <HAL_GPIO_Init+0x222>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a50      	ldr	r2, [pc, #320]	@ (8001a70 <HAL_GPIO_Init+0x34c>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d007      	beq.n	8001942 <HAL_GPIO_Init+0x21e>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a4f      	ldr	r2, [pc, #316]	@ (8001a74 <HAL_GPIO_Init+0x350>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d101      	bne.n	800193e <HAL_GPIO_Init+0x21a>
 800193a:	2309      	movs	r3, #9
 800193c:	e012      	b.n	8001964 <HAL_GPIO_Init+0x240>
 800193e:	230a      	movs	r3, #10
 8001940:	e010      	b.n	8001964 <HAL_GPIO_Init+0x240>
 8001942:	2308      	movs	r3, #8
 8001944:	e00e      	b.n	8001964 <HAL_GPIO_Init+0x240>
 8001946:	2307      	movs	r3, #7
 8001948:	e00c      	b.n	8001964 <HAL_GPIO_Init+0x240>
 800194a:	2306      	movs	r3, #6
 800194c:	e00a      	b.n	8001964 <HAL_GPIO_Init+0x240>
 800194e:	2305      	movs	r3, #5
 8001950:	e008      	b.n	8001964 <HAL_GPIO_Init+0x240>
 8001952:	2304      	movs	r3, #4
 8001954:	e006      	b.n	8001964 <HAL_GPIO_Init+0x240>
 8001956:	2303      	movs	r3, #3
 8001958:	e004      	b.n	8001964 <HAL_GPIO_Init+0x240>
 800195a:	2302      	movs	r3, #2
 800195c:	e002      	b.n	8001964 <HAL_GPIO_Init+0x240>
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <HAL_GPIO_Init+0x240>
 8001962:	2300      	movs	r3, #0
 8001964:	69fa      	ldr	r2, [r7, #28]
 8001966:	f002 0203 	and.w	r2, r2, #3
 800196a:	0092      	lsls	r2, r2, #2
 800196c:	4093      	lsls	r3, r2
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4313      	orrs	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001974:	4935      	ldr	r1, [pc, #212]	@ (8001a4c <HAL_GPIO_Init+0x328>)
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	089b      	lsrs	r3, r3, #2
 800197a:	3302      	adds	r3, #2
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001982:	4b3d      	ldr	r3, [pc, #244]	@ (8001a78 <HAL_GPIO_Init+0x354>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	43db      	mvns	r3, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4013      	ands	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019a6:	4a34      	ldr	r2, [pc, #208]	@ (8001a78 <HAL_GPIO_Init+0x354>)
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019ac:	4b32      	ldr	r3, [pc, #200]	@ (8001a78 <HAL_GPIO_Init+0x354>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d003      	beq.n	80019d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019d0:	4a29      	ldr	r2, [pc, #164]	@ (8001a78 <HAL_GPIO_Init+0x354>)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019d6:	4b28      	ldr	r3, [pc, #160]	@ (8001a78 <HAL_GPIO_Init+0x354>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	43db      	mvns	r3, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4013      	ands	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019fa:	4a1f      	ldr	r2, [pc, #124]	@ (8001a78 <HAL_GPIO_Init+0x354>)
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a00:	4b1d      	ldr	r3, [pc, #116]	@ (8001a78 <HAL_GPIO_Init+0x354>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a24:	4a14      	ldr	r2, [pc, #80]	@ (8001a78 <HAL_GPIO_Init+0x354>)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	61fb      	str	r3, [r7, #28]
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	2b0f      	cmp	r3, #15
 8001a34:	f67f ae86 	bls.w	8001744 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a38:	bf00      	nop
 8001a3a:	bf00      	nop
 8001a3c:	3724      	adds	r7, #36	@ 0x24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40013800 	.word	0x40013800
 8001a50:	40020000 	.word	0x40020000
 8001a54:	40020400 	.word	0x40020400
 8001a58:	40020800 	.word	0x40020800
 8001a5c:	40020c00 	.word	0x40020c00
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40021400 	.word	0x40021400
 8001a68:	40021800 	.word	0x40021800
 8001a6c:	40021c00 	.word	0x40021c00
 8001a70:	40022000 	.word	0x40022000
 8001a74:	40022400 	.word	0x40022400
 8001a78:	40013c00 	.word	0x40013c00

08001a7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	691a      	ldr	r2, [r3, #16]
 8001a8c:	887b      	ldrh	r3, [r7, #2]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d002      	beq.n	8001a9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a94:	2301      	movs	r3, #1
 8001a96:	73fb      	strb	r3, [r7, #15]
 8001a98:	e001      	b.n	8001a9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	807b      	strh	r3, [r7, #2]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001abc:	787b      	ldrb	r3, [r7, #1]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ac2:	887a      	ldrh	r2, [r7, #2]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ac8:	e003      	b.n	8001ad2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001aca:	887b      	ldrh	r3, [r7, #2]
 8001acc:	041a      	lsls	r2, r3, #16
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	619a      	str	r2, [r3, #24]
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e29b      	b.n	800202e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 8087 	beq.w	8001c12 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b04:	4b96      	ldr	r3, [pc, #600]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 030c 	and.w	r3, r3, #12
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d00c      	beq.n	8001b2a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b10:	4b93      	ldr	r3, [pc, #588]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 030c 	and.w	r3, r3, #12
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d112      	bne.n	8001b42 <HAL_RCC_OscConfig+0x62>
 8001b1c:	4b90      	ldr	r3, [pc, #576]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b28:	d10b      	bne.n	8001b42 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b2a:	4b8d      	ldr	r3, [pc, #564]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d06c      	beq.n	8001c10 <HAL_RCC_OscConfig+0x130>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d168      	bne.n	8001c10 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e275      	b.n	800202e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b4a:	d106      	bne.n	8001b5a <HAL_RCC_OscConfig+0x7a>
 8001b4c:	4b84      	ldr	r3, [pc, #528]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a83      	ldr	r2, [pc, #524]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001b52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	e02e      	b.n	8001bb8 <HAL_RCC_OscConfig+0xd8>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10c      	bne.n	8001b7c <HAL_RCC_OscConfig+0x9c>
 8001b62:	4b7f      	ldr	r3, [pc, #508]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a7e      	ldr	r2, [pc, #504]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001b68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	4b7c      	ldr	r3, [pc, #496]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a7b      	ldr	r2, [pc, #492]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001b74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	e01d      	b.n	8001bb8 <HAL_RCC_OscConfig+0xd8>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b84:	d10c      	bne.n	8001ba0 <HAL_RCC_OscConfig+0xc0>
 8001b86:	4b76      	ldr	r3, [pc, #472]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a75      	ldr	r2, [pc, #468]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001b8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	4b73      	ldr	r3, [pc, #460]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a72      	ldr	r2, [pc, #456]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001b98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	e00b      	b.n	8001bb8 <HAL_RCC_OscConfig+0xd8>
 8001ba0:	4b6f      	ldr	r3, [pc, #444]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a6e      	ldr	r2, [pc, #440]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001ba6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001baa:	6013      	str	r3, [r2, #0]
 8001bac:	4b6c      	ldr	r3, [pc, #432]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a6b      	ldr	r2, [pc, #428]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001bb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d013      	beq.n	8001be8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc0:	f7ff fc6e 	bl	80014a0 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc8:	f7ff fc6a 	bl	80014a0 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b64      	cmp	r3, #100	@ 0x64
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e229      	b.n	800202e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bda:	4b61      	ldr	r3, [pc, #388]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0f0      	beq.n	8001bc8 <HAL_RCC_OscConfig+0xe8>
 8001be6:	e014      	b.n	8001c12 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be8:	f7ff fc5a 	bl	80014a0 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf0:	f7ff fc56 	bl	80014a0 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b64      	cmp	r3, #100	@ 0x64
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e215      	b.n	800202e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c02:	4b57      	ldr	r3, [pc, #348]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f0      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x110>
 8001c0e:	e000      	b.n	8001c12 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d069      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c1e:	4b50      	ldr	r3, [pc, #320]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 030c 	and.w	r3, r3, #12
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d00b      	beq.n	8001c42 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c2a:	4b4d      	ldr	r3, [pc, #308]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 030c 	and.w	r3, r3, #12
 8001c32:	2b08      	cmp	r3, #8
 8001c34:	d11c      	bne.n	8001c70 <HAL_RCC_OscConfig+0x190>
 8001c36:	4b4a      	ldr	r3, [pc, #296]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d116      	bne.n	8001c70 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c42:	4b47      	ldr	r3, [pc, #284]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d005      	beq.n	8001c5a <HAL_RCC_OscConfig+0x17a>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d001      	beq.n	8001c5a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e1e9      	b.n	800202e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5a:	4b41      	ldr	r3, [pc, #260]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	493d      	ldr	r1, [pc, #244]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c6e:	e040      	b.n	8001cf2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d023      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c78:	4b39      	ldr	r3, [pc, #228]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a38      	ldr	r2, [pc, #224]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c84:	f7ff fc0c 	bl	80014a0 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c8c:	f7ff fc08 	bl	80014a0 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e1c7      	b.n	800202e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c9e:	4b30      	ldr	r3, [pc, #192]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f0      	beq.n	8001c8c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001caa:	4b2d      	ldr	r3, [pc, #180]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	4929      	ldr	r1, [pc, #164]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	600b      	str	r3, [r1, #0]
 8001cbe:	e018      	b.n	8001cf2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cc0:	4b27      	ldr	r3, [pc, #156]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a26      	ldr	r2, [pc, #152]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001cc6:	f023 0301 	bic.w	r3, r3, #1
 8001cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ccc:	f7ff fbe8 	bl	80014a0 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd4:	f7ff fbe4 	bl	80014a0 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e1a3      	b.n	800202e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f0      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d038      	beq.n	8001d70 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d019      	beq.n	8001d3a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d06:	4b16      	ldr	r3, [pc, #88]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001d08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d0a:	4a15      	ldr	r2, [pc, #84]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d12:	f7ff fbc5 	bl	80014a0 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d1a:	f7ff fbc1 	bl	80014a0 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e180      	b.n	800202e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001d2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0f0      	beq.n	8001d1a <HAL_RCC_OscConfig+0x23a>
 8001d38:	e01a      	b.n	8001d70 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d3a:	4b09      	ldr	r3, [pc, #36]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001d3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d3e:	4a08      	ldr	r2, [pc, #32]	@ (8001d60 <HAL_RCC_OscConfig+0x280>)
 8001d40:	f023 0301 	bic.w	r3, r3, #1
 8001d44:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d46:	f7ff fbab 	bl	80014a0 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d4c:	e00a      	b.n	8001d64 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d4e:	f7ff fba7 	bl	80014a0 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d903      	bls.n	8001d64 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e166      	b.n	800202e <HAL_RCC_OscConfig+0x54e>
 8001d60:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d64:	4b92      	ldr	r3, [pc, #584]	@ (8001fb0 <HAL_RCC_OscConfig+0x4d0>)
 8001d66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1ee      	bne.n	8001d4e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f000 80a4 	beq.w	8001ec6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d7e:	4b8c      	ldr	r3, [pc, #560]	@ (8001fb0 <HAL_RCC_OscConfig+0x4d0>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10d      	bne.n	8001da6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d8a:	4b89      	ldr	r3, [pc, #548]	@ (8001fb0 <HAL_RCC_OscConfig+0x4d0>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8e:	4a88      	ldr	r2, [pc, #544]	@ (8001fb0 <HAL_RCC_OscConfig+0x4d0>)
 8001d90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d96:	4b86      	ldr	r3, [pc, #536]	@ (8001fb0 <HAL_RCC_OscConfig+0x4d0>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001da2:	2301      	movs	r3, #1
 8001da4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001da6:	4b83      	ldr	r3, [pc, #524]	@ (8001fb4 <HAL_RCC_OscConfig+0x4d4>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d118      	bne.n	8001de4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001db2:	4b80      	ldr	r3, [pc, #512]	@ (8001fb4 <HAL_RCC_OscConfig+0x4d4>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a7f      	ldr	r2, [pc, #508]	@ (8001fb4 <HAL_RCC_OscConfig+0x4d4>)
 8001db8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dbe:	f7ff fb6f 	bl	80014a0 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc6:	f7ff fb6b 	bl	80014a0 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b64      	cmp	r3, #100	@ 0x64
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e12a      	b.n	800202e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dd8:	4b76      	ldr	r3, [pc, #472]	@ (8001fb4 <HAL_RCC_OscConfig+0x4d4>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0f0      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d106      	bne.n	8001dfa <HAL_RCC_OscConfig+0x31a>
 8001dec:	4b70      	ldr	r3, [pc, #448]	@ (8001fb0 <HAL_RCC_OscConfig+0x4d0>)
 8001dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001df0:	4a6f      	ldr	r2, [pc, #444]	@ (8001fb0 <HAL_RCC_OscConfig+0x4d0>)
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001df8:	e02d      	b.n	8001e56 <HAL_RCC_OscConfig+0x376>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10c      	bne.n	8001e1c <HAL_RCC_OscConfig+0x33c>
 8001e02:	4b6b      	ldr	r3, [pc, #428]	@ (8001fb0 <HAL_RCC_OscConfig+0x4d0>)
 8001e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e06:	4a6a      	ldr	r2, [pc, #424]	@ (8001fb0 <HAL_RCC_OscConfig+0x4d0>)
 8001e08:	f023 0301 	bic.w	r3, r3, #1
 8001e0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e0e:	4b68      	ldr	r3, [pc, #416]	@ (8001fb0 <HAL_RCC_OscConfig+0x4d0>)
 8001e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e12:	4a67      	ldr	r2, [pc, #412]	@ (8001fb0 <HAL_RCC_OscConfig+0x4d0>)
 8001e14:	f023 0304 	bic.w	r3, r3, #4
 8001e18:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e1a:	e01c      	b.n	8001e56 <HAL_RCC_OscConfig+0x376>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	2b05      	cmp	r3, #5
 8001e22:	d10c      	bne.n	8001e3e <HAL_RCC_OscConfig+0x35e>
 8001e24:	4b62      	ldr	r3, [pc, #392]	@ (8001fb0 <HAL_RCC_OscConfig+0x4d0>)
 8001e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e28:	4a61      	ldr	r2, [pc, #388]	@ (8001fb0 <HAL_RCC_OscConfig+0x4d0>)
 8001e2a:	f043 0304 	orr.w	r3, r3, #4
 8001e2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e30:	4b5f      	ldr	r3, [pc, #380]	@ (8001fb0 <HAL_RCC_OscConfig+0x4d0>)
 8001e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e34:	4a5e      	ldr	r2, [pc, #376]	@ (8001fb0 <HAL_RCC_OscConfig+0x4d0>)
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e3c:	e00b      	b.n	8001e56 <HAL_RCC_OscConfig+0x376>
 8001e3e:	4b5c      	ldr	r3, [pc, #368]	@ (8001fb0 <HAL_RCC_OscConfig+0x4d0>)
 8001e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e42:	4a5b      	ldr	r2, [pc, #364]	@ (8001fb0 <HAL_RCC_OscConfig+0x4d0>)
 8001e44:	f023 0301 	bic.w	r3, r3, #1
 8001e48:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e4a:	4b59      	ldr	r3, [pc, #356]	@ (8001fb0 <HAL_RCC_OscConfig+0x4d0>)
 8001e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e4e:	4a58      	ldr	r2, [pc, #352]	@ (8001fb0 <HAL_RCC_OscConfig+0x4d0>)
 8001e50:	f023 0304 	bic.w	r3, r3, #4
 8001e54:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d015      	beq.n	8001e8a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e5e:	f7ff fb1f 	bl	80014a0 <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e64:	e00a      	b.n	8001e7c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e66:	f7ff fb1b 	bl	80014a0 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e0d8      	b.n	800202e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e7c:	4b4c      	ldr	r3, [pc, #304]	@ (8001fb0 <HAL_RCC_OscConfig+0x4d0>)
 8001e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0ee      	beq.n	8001e66 <HAL_RCC_OscConfig+0x386>
 8001e88:	e014      	b.n	8001eb4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8a:	f7ff fb09 	bl	80014a0 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e90:	e00a      	b.n	8001ea8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e92:	f7ff fb05 	bl	80014a0 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e0c2      	b.n	800202e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea8:	4b41      	ldr	r3, [pc, #260]	@ (8001fb0 <HAL_RCC_OscConfig+0x4d0>)
 8001eaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1ee      	bne.n	8001e92 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001eb4:	7dfb      	ldrb	r3, [r7, #23]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d105      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eba:	4b3d      	ldr	r3, [pc, #244]	@ (8001fb0 <HAL_RCC_OscConfig+0x4d0>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebe:	4a3c      	ldr	r2, [pc, #240]	@ (8001fb0 <HAL_RCC_OscConfig+0x4d0>)
 8001ec0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ec4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 80ae 	beq.w	800202c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ed0:	4b37      	ldr	r3, [pc, #220]	@ (8001fb0 <HAL_RCC_OscConfig+0x4d0>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 030c 	and.w	r3, r3, #12
 8001ed8:	2b08      	cmp	r3, #8
 8001eda:	d06d      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d14b      	bne.n	8001f7c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee4:	4b32      	ldr	r3, [pc, #200]	@ (8001fb0 <HAL_RCC_OscConfig+0x4d0>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a31      	ldr	r2, [pc, #196]	@ (8001fb0 <HAL_RCC_OscConfig+0x4d0>)
 8001eea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001eee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef0:	f7ff fad6 	bl	80014a0 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef8:	f7ff fad2 	bl	80014a0 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e091      	b.n	800202e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f0a:	4b29      	ldr	r3, [pc, #164]	@ (8001fb0 <HAL_RCC_OscConfig+0x4d0>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f0      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69da      	ldr	r2, [r3, #28]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f24:	019b      	lsls	r3, r3, #6
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f2c:	085b      	lsrs	r3, r3, #1
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	041b      	lsls	r3, r3, #16
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f38:	061b      	lsls	r3, r3, #24
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f40:	071b      	lsls	r3, r3, #28
 8001f42:	491b      	ldr	r1, [pc, #108]	@ (8001fb0 <HAL_RCC_OscConfig+0x4d0>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f48:	4b19      	ldr	r3, [pc, #100]	@ (8001fb0 <HAL_RCC_OscConfig+0x4d0>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a18      	ldr	r2, [pc, #96]	@ (8001fb0 <HAL_RCC_OscConfig+0x4d0>)
 8001f4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f54:	f7ff faa4 	bl	80014a0 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f5c:	f7ff faa0 	bl	80014a0 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e05f      	b.n	800202e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6e:	4b10      	ldr	r3, [pc, #64]	@ (8001fb0 <HAL_RCC_OscConfig+0x4d0>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f0      	beq.n	8001f5c <HAL_RCC_OscConfig+0x47c>
 8001f7a:	e057      	b.n	800202c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb0 <HAL_RCC_OscConfig+0x4d0>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a0b      	ldr	r2, [pc, #44]	@ (8001fb0 <HAL_RCC_OscConfig+0x4d0>)
 8001f82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f88:	f7ff fa8a 	bl	80014a0 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f90:	f7ff fa86 	bl	80014a0 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e045      	b.n	800202e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa2:	4b03      	ldr	r3, [pc, #12]	@ (8001fb0 <HAL_RCC_OscConfig+0x4d0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0x4b0>
 8001fae:	e03d      	b.n	800202c <HAL_RCC_OscConfig+0x54c>
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001fb8:	4b1f      	ldr	r3, [pc, #124]	@ (8002038 <HAL_RCC_OscConfig+0x558>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d030      	beq.n	8002028 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d129      	bne.n	8002028 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d122      	bne.n	8002028 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001fe8:	4013      	ands	r3, r2
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001fee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d119      	bne.n	8002028 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ffe:	085b      	lsrs	r3, r3, #1
 8002000:	3b01      	subs	r3, #1
 8002002:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002004:	429a      	cmp	r2, r3
 8002006:	d10f      	bne.n	8002028 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002012:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002014:	429a      	cmp	r2, r3
 8002016:	d107      	bne.n	8002028 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002022:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002024:	429a      	cmp	r2, r3
 8002026:	d001      	beq.n	800202c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e000      	b.n	800202e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40023800 	.word	0x40023800

0800203c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0d0      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002054:	4b6a      	ldr	r3, [pc, #424]	@ (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 030f 	and.w	r3, r3, #15
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	d910      	bls.n	8002084 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002062:	4b67      	ldr	r3, [pc, #412]	@ (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f023 020f 	bic.w	r2, r3, #15
 800206a:	4965      	ldr	r1, [pc, #404]	@ (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	4313      	orrs	r3, r2
 8002070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002072:	4b63      	ldr	r3, [pc, #396]	@ (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	429a      	cmp	r2, r3
 800207e:	d001      	beq.n	8002084 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e0b8      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d020      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800209c:	4b59      	ldr	r3, [pc, #356]	@ (8002204 <HAL_RCC_ClockConfig+0x1c8>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	4a58      	ldr	r2, [pc, #352]	@ (8002204 <HAL_RCC_ClockConfig+0x1c8>)
 80020a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80020a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020b4:	4b53      	ldr	r3, [pc, #332]	@ (8002204 <HAL_RCC_ClockConfig+0x1c8>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	4a52      	ldr	r2, [pc, #328]	@ (8002204 <HAL_RCC_ClockConfig+0x1c8>)
 80020ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c0:	4b50      	ldr	r3, [pc, #320]	@ (8002204 <HAL_RCC_ClockConfig+0x1c8>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	494d      	ldr	r1, [pc, #308]	@ (8002204 <HAL_RCC_ClockConfig+0x1c8>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d040      	beq.n	8002160 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d107      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e6:	4b47      	ldr	r3, [pc, #284]	@ (8002204 <HAL_RCC_ClockConfig+0x1c8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d115      	bne.n	800211e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e07f      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d107      	bne.n	800210e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fe:	4b41      	ldr	r3, [pc, #260]	@ (8002204 <HAL_RCC_ClockConfig+0x1c8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d109      	bne.n	800211e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e073      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210e:	4b3d      	ldr	r3, [pc, #244]	@ (8002204 <HAL_RCC_ClockConfig+0x1c8>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e06b      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800211e:	4b39      	ldr	r3, [pc, #228]	@ (8002204 <HAL_RCC_ClockConfig+0x1c8>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f023 0203 	bic.w	r2, r3, #3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	4936      	ldr	r1, [pc, #216]	@ (8002204 <HAL_RCC_ClockConfig+0x1c8>)
 800212c:	4313      	orrs	r3, r2
 800212e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002130:	f7ff f9b6 	bl	80014a0 <HAL_GetTick>
 8002134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002136:	e00a      	b.n	800214e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002138:	f7ff f9b2 	bl	80014a0 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002146:	4293      	cmp	r3, r2
 8002148:	d901      	bls.n	800214e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e053      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214e:	4b2d      	ldr	r3, [pc, #180]	@ (8002204 <HAL_RCC_ClockConfig+0x1c8>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 020c 	and.w	r2, r3, #12
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	429a      	cmp	r2, r3
 800215e:	d1eb      	bne.n	8002138 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002160:	4b27      	ldr	r3, [pc, #156]	@ (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 030f 	and.w	r3, r3, #15
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d210      	bcs.n	8002190 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216e:	4b24      	ldr	r3, [pc, #144]	@ (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f023 020f 	bic.w	r2, r3, #15
 8002176:	4922      	ldr	r1, [pc, #136]	@ (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	4313      	orrs	r3, r2
 800217c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800217e:	4b20      	ldr	r3, [pc, #128]	@ (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	429a      	cmp	r2, r3
 800218a:	d001      	beq.n	8002190 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e032      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d008      	beq.n	80021ae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800219c:	4b19      	ldr	r3, [pc, #100]	@ (8002204 <HAL_RCC_ClockConfig+0x1c8>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	4916      	ldr	r1, [pc, #88]	@ (8002204 <HAL_RCC_ClockConfig+0x1c8>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d009      	beq.n	80021ce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021ba:	4b12      	ldr	r3, [pc, #72]	@ (8002204 <HAL_RCC_ClockConfig+0x1c8>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	490e      	ldr	r1, [pc, #56]	@ (8002204 <HAL_RCC_ClockConfig+0x1c8>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021ce:	f000 f821 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 80021d2:	4602      	mov	r2, r0
 80021d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002204 <HAL_RCC_ClockConfig+0x1c8>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	490a      	ldr	r1, [pc, #40]	@ (8002208 <HAL_RCC_ClockConfig+0x1cc>)
 80021e0:	5ccb      	ldrb	r3, [r1, r3]
 80021e2:	fa22 f303 	lsr.w	r3, r2, r3
 80021e6:	4a09      	ldr	r2, [pc, #36]	@ (800220c <HAL_RCC_ClockConfig+0x1d0>)
 80021e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021ea:	4b09      	ldr	r3, [pc, #36]	@ (8002210 <HAL_RCC_ClockConfig+0x1d4>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff f912 	bl	8001418 <HAL_InitTick>

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40023c00 	.word	0x40023c00
 8002204:	40023800 	.word	0x40023800
 8002208:	08006cfc 	.word	0x08006cfc
 800220c:	20000000 	.word	0x20000000
 8002210:	20000004 	.word	0x20000004

08002214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002218:	b094      	sub	sp, #80	@ 0x50
 800221a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002220:	2300      	movs	r3, #0
 8002222:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002224:	2300      	movs	r3, #0
 8002226:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002228:	2300      	movs	r3, #0
 800222a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800222c:	4b79      	ldr	r3, [pc, #484]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x200>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 030c 	and.w	r3, r3, #12
 8002234:	2b08      	cmp	r3, #8
 8002236:	d00d      	beq.n	8002254 <HAL_RCC_GetSysClockFreq+0x40>
 8002238:	2b08      	cmp	r3, #8
 800223a:	f200 80e1 	bhi.w	8002400 <HAL_RCC_GetSysClockFreq+0x1ec>
 800223e:	2b00      	cmp	r3, #0
 8002240:	d002      	beq.n	8002248 <HAL_RCC_GetSysClockFreq+0x34>
 8002242:	2b04      	cmp	r3, #4
 8002244:	d003      	beq.n	800224e <HAL_RCC_GetSysClockFreq+0x3a>
 8002246:	e0db      	b.n	8002400 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002248:	4b73      	ldr	r3, [pc, #460]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x204>)
 800224a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800224c:	e0db      	b.n	8002406 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800224e:	4b72      	ldr	r3, [pc, #456]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x204>)
 8002250:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002252:	e0d8      	b.n	8002406 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002254:	4b6f      	ldr	r3, [pc, #444]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x200>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800225c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800225e:	4b6d      	ldr	r3, [pc, #436]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x200>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d063      	beq.n	8002332 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800226a:	4b6a      	ldr	r3, [pc, #424]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x200>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	099b      	lsrs	r3, r3, #6
 8002270:	2200      	movs	r2, #0
 8002272:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002274:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800227c:	633b      	str	r3, [r7, #48]	@ 0x30
 800227e:	2300      	movs	r3, #0
 8002280:	637b      	str	r3, [r7, #52]	@ 0x34
 8002282:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002286:	4622      	mov	r2, r4
 8002288:	462b      	mov	r3, r5
 800228a:	f04f 0000 	mov.w	r0, #0
 800228e:	f04f 0100 	mov.w	r1, #0
 8002292:	0159      	lsls	r1, r3, #5
 8002294:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002298:	0150      	lsls	r0, r2, #5
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	4621      	mov	r1, r4
 80022a0:	1a51      	subs	r1, r2, r1
 80022a2:	6139      	str	r1, [r7, #16]
 80022a4:	4629      	mov	r1, r5
 80022a6:	eb63 0301 	sbc.w	r3, r3, r1
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	f04f 0300 	mov.w	r3, #0
 80022b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022b8:	4659      	mov	r1, fp
 80022ba:	018b      	lsls	r3, r1, #6
 80022bc:	4651      	mov	r1, sl
 80022be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022c2:	4651      	mov	r1, sl
 80022c4:	018a      	lsls	r2, r1, #6
 80022c6:	4651      	mov	r1, sl
 80022c8:	ebb2 0801 	subs.w	r8, r2, r1
 80022cc:	4659      	mov	r1, fp
 80022ce:	eb63 0901 	sbc.w	r9, r3, r1
 80022d2:	f04f 0200 	mov.w	r2, #0
 80022d6:	f04f 0300 	mov.w	r3, #0
 80022da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022e6:	4690      	mov	r8, r2
 80022e8:	4699      	mov	r9, r3
 80022ea:	4623      	mov	r3, r4
 80022ec:	eb18 0303 	adds.w	r3, r8, r3
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	462b      	mov	r3, r5
 80022f4:	eb49 0303 	adc.w	r3, r9, r3
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	f04f 0300 	mov.w	r3, #0
 8002302:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002306:	4629      	mov	r1, r5
 8002308:	028b      	lsls	r3, r1, #10
 800230a:	4621      	mov	r1, r4
 800230c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002310:	4621      	mov	r1, r4
 8002312:	028a      	lsls	r2, r1, #10
 8002314:	4610      	mov	r0, r2
 8002316:	4619      	mov	r1, r3
 8002318:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800231a:	2200      	movs	r2, #0
 800231c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800231e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002320:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002324:	f7fd ffe4 	bl	80002f0 <__aeabi_uldivmod>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	4613      	mov	r3, r2
 800232e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002330:	e058      	b.n	80023e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002332:	4b38      	ldr	r3, [pc, #224]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x200>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	099b      	lsrs	r3, r3, #6
 8002338:	2200      	movs	r2, #0
 800233a:	4618      	mov	r0, r3
 800233c:	4611      	mov	r1, r2
 800233e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002342:	623b      	str	r3, [r7, #32]
 8002344:	2300      	movs	r3, #0
 8002346:	627b      	str	r3, [r7, #36]	@ 0x24
 8002348:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800234c:	4642      	mov	r2, r8
 800234e:	464b      	mov	r3, r9
 8002350:	f04f 0000 	mov.w	r0, #0
 8002354:	f04f 0100 	mov.w	r1, #0
 8002358:	0159      	lsls	r1, r3, #5
 800235a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800235e:	0150      	lsls	r0, r2, #5
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	4641      	mov	r1, r8
 8002366:	ebb2 0a01 	subs.w	sl, r2, r1
 800236a:	4649      	mov	r1, r9
 800236c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002370:	f04f 0200 	mov.w	r2, #0
 8002374:	f04f 0300 	mov.w	r3, #0
 8002378:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800237c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002380:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002384:	ebb2 040a 	subs.w	r4, r2, sl
 8002388:	eb63 050b 	sbc.w	r5, r3, fp
 800238c:	f04f 0200 	mov.w	r2, #0
 8002390:	f04f 0300 	mov.w	r3, #0
 8002394:	00eb      	lsls	r3, r5, #3
 8002396:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800239a:	00e2      	lsls	r2, r4, #3
 800239c:	4614      	mov	r4, r2
 800239e:	461d      	mov	r5, r3
 80023a0:	4643      	mov	r3, r8
 80023a2:	18e3      	adds	r3, r4, r3
 80023a4:	603b      	str	r3, [r7, #0]
 80023a6:	464b      	mov	r3, r9
 80023a8:	eb45 0303 	adc.w	r3, r5, r3
 80023ac:	607b      	str	r3, [r7, #4]
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	f04f 0300 	mov.w	r3, #0
 80023b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023ba:	4629      	mov	r1, r5
 80023bc:	028b      	lsls	r3, r1, #10
 80023be:	4621      	mov	r1, r4
 80023c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023c4:	4621      	mov	r1, r4
 80023c6:	028a      	lsls	r2, r1, #10
 80023c8:	4610      	mov	r0, r2
 80023ca:	4619      	mov	r1, r3
 80023cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023ce:	2200      	movs	r2, #0
 80023d0:	61bb      	str	r3, [r7, #24]
 80023d2:	61fa      	str	r2, [r7, #28]
 80023d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023d8:	f7fd ff8a 	bl	80002f0 <__aeabi_uldivmod>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4613      	mov	r3, r2
 80023e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80023e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x200>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	0c1b      	lsrs	r3, r3, #16
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	3301      	adds	r3, #1
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80023f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80023f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023fe:	e002      	b.n	8002406 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002400:	4b05      	ldr	r3, [pc, #20]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x204>)
 8002402:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002404:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002406:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002408:	4618      	mov	r0, r3
 800240a:	3750      	adds	r7, #80	@ 0x50
 800240c:	46bd      	mov	sp, r7
 800240e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002412:	bf00      	nop
 8002414:	40023800 	.word	0x40023800
 8002418:	00f42400 	.word	0x00f42400

0800241c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002420:	4b03      	ldr	r3, [pc, #12]	@ (8002430 <HAL_RCC_GetHCLKFreq+0x14>)
 8002422:	681b      	ldr	r3, [r3, #0]
}
 8002424:	4618      	mov	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	20000000 	.word	0x20000000

08002434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002438:	f7ff fff0 	bl	800241c <HAL_RCC_GetHCLKFreq>
 800243c:	4602      	mov	r2, r0
 800243e:	4b05      	ldr	r3, [pc, #20]	@ (8002454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	0a9b      	lsrs	r3, r3, #10
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	4903      	ldr	r1, [pc, #12]	@ (8002458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800244a:	5ccb      	ldrb	r3, [r1, r3]
 800244c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002450:	4618      	mov	r0, r3
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40023800 	.word	0x40023800
 8002458:	08006d0c 	.word	0x08006d0c

0800245c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002460:	f7ff ffdc 	bl	800241c <HAL_RCC_GetHCLKFreq>
 8002464:	4602      	mov	r2, r0
 8002466:	4b05      	ldr	r3, [pc, #20]	@ (800247c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	0b5b      	lsrs	r3, r3, #13
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	4903      	ldr	r1, [pc, #12]	@ (8002480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002472:	5ccb      	ldrb	r3, [r1, r3]
 8002474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002478:	4618      	mov	r0, r3
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40023800 	.word	0x40023800
 8002480:	08006d0c 	.word	0x08006d0c

08002484 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002498:	2300      	movs	r3, #0
 800249a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d012      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024ac:	4b69      	ldr	r3, [pc, #420]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	4a68      	ldr	r2, [pc, #416]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024b2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80024b6:	6093      	str	r3, [r2, #8]
 80024b8:	4b66      	ldr	r3, [pc, #408]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024c0:	4964      	ldr	r1, [pc, #400]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80024ce:	2301      	movs	r3, #1
 80024d0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d017      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024de:	4b5d      	ldr	r3, [pc, #372]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024e4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ec:	4959      	ldr	r1, [pc, #356]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80024fc:	d101      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80024fe:	2301      	movs	r3, #1
 8002500:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800250a:	2301      	movs	r3, #1
 800250c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d017      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800251a:	4b4e      	ldr	r3, [pc, #312]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800251c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002520:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002528:	494a      	ldr	r1, [pc, #296]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002534:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002538:	d101      	bne.n	800253e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800253a:	2301      	movs	r3, #1
 800253c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002546:	2301      	movs	r3, #1
 8002548:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002556:	2301      	movs	r3, #1
 8002558:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0320 	and.w	r3, r3, #32
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 808b 	beq.w	800267e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002568:	4b3a      	ldr	r3, [pc, #232]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800256a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256c:	4a39      	ldr	r2, [pc, #228]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800256e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002572:	6413      	str	r3, [r2, #64]	@ 0x40
 8002574:	4b37      	ldr	r3, [pc, #220]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002578:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002580:	4b35      	ldr	r3, [pc, #212]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a34      	ldr	r2, [pc, #208]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002586:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800258a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800258c:	f7fe ff88 	bl	80014a0 <HAL_GetTick>
 8002590:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002594:	f7fe ff84 	bl	80014a0 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b64      	cmp	r3, #100	@ 0x64
 80025a0:	d901      	bls.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e38f      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80025a6:	4b2c      	ldr	r3, [pc, #176]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025b2:	4b28      	ldr	r3, [pc, #160]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025ba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d035      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d02e      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025d0:	4b20      	ldr	r3, [pc, #128]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025d8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025da:	4b1e      	ldr	r3, [pc, #120]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025de:	4a1d      	ldr	r2, [pc, #116]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025e4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ea:	4a1a      	ldr	r2, [pc, #104]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025f0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80025f2:	4a18      	ldr	r2, [pc, #96]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80025f8:	4b16      	ldr	r3, [pc, #88]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b01      	cmp	r3, #1
 8002602:	d114      	bne.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002604:	f7fe ff4c 	bl	80014a0 <HAL_GetTick>
 8002608:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800260a:	e00a      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800260c:	f7fe ff48 	bl	80014a0 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	f241 3288 	movw	r2, #5000	@ 0x1388
 800261a:	4293      	cmp	r3, r2
 800261c:	d901      	bls.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e351      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002622:	4b0c      	ldr	r3, [pc, #48]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0ee      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002632:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002636:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800263a:	d111      	bne.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800263c:	4b05      	ldr	r3, [pc, #20]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002648:	4b04      	ldr	r3, [pc, #16]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800264a:	400b      	ands	r3, r1
 800264c:	4901      	ldr	r1, [pc, #4]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800264e:	4313      	orrs	r3, r2
 8002650:	608b      	str	r3, [r1, #8]
 8002652:	e00b      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002654:	40023800 	.word	0x40023800
 8002658:	40007000 	.word	0x40007000
 800265c:	0ffffcff 	.word	0x0ffffcff
 8002660:	4bac      	ldr	r3, [pc, #688]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	4aab      	ldr	r2, [pc, #684]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002666:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800266a:	6093      	str	r3, [r2, #8]
 800266c:	4ba9      	ldr	r3, [pc, #676]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800266e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002678:	49a6      	ldr	r1, [pc, #664]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800267a:	4313      	orrs	r3, r2
 800267c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0310 	and.w	r3, r3, #16
 8002686:	2b00      	cmp	r3, #0
 8002688:	d010      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800268a:	4ba2      	ldr	r3, [pc, #648]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800268c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002690:	4aa0      	ldr	r2, [pc, #640]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002692:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002696:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800269a:	4b9e      	ldr	r3, [pc, #632]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800269c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026a4:	499b      	ldr	r1, [pc, #620]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00a      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026b8:	4b96      	ldr	r3, [pc, #600]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026be:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80026c6:	4993      	ldr	r1, [pc, #588]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00a      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026da:	4b8e      	ldr	r3, [pc, #568]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026e8:	498a      	ldr	r1, [pc, #552]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00a      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026fc:	4b85      	ldr	r3, [pc, #532]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002702:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800270a:	4982      	ldr	r1, [pc, #520]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800270c:	4313      	orrs	r3, r2
 800270e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00a      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800271e:	4b7d      	ldr	r3, [pc, #500]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002724:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800272c:	4979      	ldr	r1, [pc, #484]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800272e:	4313      	orrs	r3, r2
 8002730:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00a      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002740:	4b74      	ldr	r3, [pc, #464]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002746:	f023 0203 	bic.w	r2, r3, #3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800274e:	4971      	ldr	r1, [pc, #452]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002750:	4313      	orrs	r3, r2
 8002752:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00a      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002762:	4b6c      	ldr	r3, [pc, #432]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002768:	f023 020c 	bic.w	r2, r3, #12
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002770:	4968      	ldr	r1, [pc, #416]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002772:	4313      	orrs	r3, r2
 8002774:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00a      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002784:	4b63      	ldr	r3, [pc, #396]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800278a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002792:	4960      	ldr	r1, [pc, #384]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002794:	4313      	orrs	r3, r2
 8002796:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00a      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ac:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027b4:	4957      	ldr	r1, [pc, #348]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00a      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027c8:	4b52      	ldr	r3, [pc, #328]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d6:	494f      	ldr	r1, [pc, #316]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00a      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80027ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027f0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f8:	4946      	ldr	r1, [pc, #280]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00a      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800280c:	4b41      	ldr	r3, [pc, #260]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800280e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002812:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800281a:	493e      	ldr	r1, [pc, #248]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00a      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800282e:	4b39      	ldr	r3, [pc, #228]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002834:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800283c:	4935      	ldr	r1, [pc, #212]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800283e:	4313      	orrs	r3, r2
 8002840:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00a      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002850:	4b30      	ldr	r3, [pc, #192]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002856:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800285e:	492d      	ldr	r1, [pc, #180]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002860:	4313      	orrs	r3, r2
 8002862:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d011      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002872:	4b28      	ldr	r3, [pc, #160]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002878:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002880:	4924      	ldr	r1, [pc, #144]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002882:	4313      	orrs	r3, r2
 8002884:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800288c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002890:	d101      	bne.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002892:	2301      	movs	r3, #1
 8002894:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80028a2:	2301      	movs	r3, #1
 80028a4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00a      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028b2:	4b18      	ldr	r3, [pc, #96]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028b8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028c0:	4914      	ldr	r1, [pc, #80]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00b      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028da:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028e4:	490b      	ldr	r1, [pc, #44]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00f      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80028f8:	4b06      	ldr	r3, [pc, #24]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028fe:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002908:	4902      	ldr	r1, [pc, #8]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800290a:	4313      	orrs	r3, r2
 800290c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002910:	e002      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002912:	bf00      	nop
 8002914:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00b      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002924:	4b8a      	ldr	r3, [pc, #552]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002926:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800292a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002934:	4986      	ldr	r1, [pc, #536]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002936:	4313      	orrs	r3, r2
 8002938:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00b      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002948:	4b81      	ldr	r3, [pc, #516]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800294a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800294e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002958:	497d      	ldr	r1, [pc, #500]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800295a:	4313      	orrs	r3, r2
 800295c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d006      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 80d6 	beq.w	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002974:	4b76      	ldr	r3, [pc, #472]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a75      	ldr	r2, [pc, #468]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800297a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800297e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002980:	f7fe fd8e 	bl	80014a0 <HAL_GetTick>
 8002984:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002986:	e008      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002988:	f7fe fd8a 	bl	80014a0 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b64      	cmp	r3, #100	@ 0x64
 8002994:	d901      	bls.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e195      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800299a:	4b6d      	ldr	r3, [pc, #436]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d021      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d11d      	bne.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80029ba:	4b65      	ldr	r3, [pc, #404]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029c0:	0c1b      	lsrs	r3, r3, #16
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80029c8:	4b61      	ldr	r3, [pc, #388]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029ce:	0e1b      	lsrs	r3, r3, #24
 80029d0:	f003 030f 	and.w	r3, r3, #15
 80029d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	019a      	lsls	r2, r3, #6
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	041b      	lsls	r3, r3, #16
 80029e0:	431a      	orrs	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	061b      	lsls	r3, r3, #24
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	071b      	lsls	r3, r3, #28
 80029ee:	4958      	ldr	r1, [pc, #352]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d004      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a0a:	d00a      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d02e      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a20:	d129      	bne.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a22:	4b4b      	ldr	r3, [pc, #300]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a28:	0c1b      	lsrs	r3, r3, #16
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a30:	4b47      	ldr	r3, [pc, #284]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a36:	0f1b      	lsrs	r3, r3, #28
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	019a      	lsls	r2, r3, #6
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	041b      	lsls	r3, r3, #16
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	061b      	lsls	r3, r3, #24
 8002a50:	431a      	orrs	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	071b      	lsls	r3, r3, #28
 8002a56:	493e      	ldr	r1, [pc, #248]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002a5e:	4b3c      	ldr	r3, [pc, #240]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a64:	f023 021f 	bic.w	r2, r3, #31
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	4938      	ldr	r1, [pc, #224]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d01d      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a82:	4b33      	ldr	r3, [pc, #204]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a88:	0e1b      	lsrs	r3, r3, #24
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a90:	4b2f      	ldr	r3, [pc, #188]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a96:	0f1b      	lsrs	r3, r3, #28
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	019a      	lsls	r2, r3, #6
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	041b      	lsls	r3, r3, #16
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	061b      	lsls	r3, r3, #24
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	071b      	lsls	r3, r3, #28
 8002ab6:	4926      	ldr	r1, [pc, #152]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d011      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	019a      	lsls	r2, r3, #6
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	041b      	lsls	r3, r3, #16
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	061b      	lsls	r3, r3, #24
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	071b      	lsls	r3, r3, #28
 8002ae6:	491a      	ldr	r1, [pc, #104]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002aee:	4b18      	ldr	r3, [pc, #96]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a17      	ldr	r2, [pc, #92]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002af4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002af8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002afa:	f7fe fcd1 	bl	80014a0 <HAL_GetTick>
 8002afe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b00:	e008      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b02:	f7fe fccd 	bl	80014a0 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b64      	cmp	r3, #100	@ 0x64
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e0d8      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b14:	4b0e      	ldr	r3, [pc, #56]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0f0      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	f040 80ce 	bne.w	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b28:	4b09      	ldr	r3, [pc, #36]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a08      	ldr	r2, [pc, #32]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b34:	f7fe fcb4 	bl	80014a0 <HAL_GetTick>
 8002b38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b3a:	e00b      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b3c:	f7fe fcb0 	bl	80014a0 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b64      	cmp	r3, #100	@ 0x64
 8002b48:	d904      	bls.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e0bb      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002b4e:	bf00      	nop
 8002b50:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b54:	4b5e      	ldr	r3, [pc, #376]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b60:	d0ec      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d009      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d02e      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d12a      	bne.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b8a:	4b51      	ldr	r3, [pc, #324]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b90:	0c1b      	lsrs	r3, r3, #16
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b98:	4b4d      	ldr	r3, [pc, #308]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b9e:	0f1b      	lsrs	r3, r3, #28
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	019a      	lsls	r2, r3, #6
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	041b      	lsls	r3, r3, #16
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	061b      	lsls	r3, r3, #24
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	071b      	lsls	r3, r3, #28
 8002bbe:	4944      	ldr	r1, [pc, #272]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002bc6:	4b42      	ldr	r3, [pc, #264]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bcc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	021b      	lsls	r3, r3, #8
 8002bd8:	493d      	ldr	r1, [pc, #244]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d022      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002bf0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bf4:	d11d      	bne.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002bf6:	4b36      	ldr	r3, [pc, #216]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bfc:	0e1b      	lsrs	r3, r3, #24
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c04:	4b32      	ldr	r3, [pc, #200]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c0a:	0f1b      	lsrs	r3, r3, #28
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	019a      	lsls	r2, r3, #6
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	041b      	lsls	r3, r3, #16
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	061b      	lsls	r3, r3, #24
 8002c24:	431a      	orrs	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	071b      	lsls	r3, r3, #28
 8002c2a:	4929      	ldr	r1, [pc, #164]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d028      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c3e:	4b24      	ldr	r3, [pc, #144]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c44:	0e1b      	lsrs	r3, r3, #24
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c4c:	4b20      	ldr	r3, [pc, #128]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c52:	0c1b      	lsrs	r3, r3, #16
 8002c54:	f003 0303 	and.w	r3, r3, #3
 8002c58:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	019a      	lsls	r2, r3, #6
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	041b      	lsls	r3, r3, #16
 8002c64:	431a      	orrs	r2, r3
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	061b      	lsls	r3, r3, #24
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	071b      	lsls	r3, r3, #28
 8002c72:	4917      	ldr	r1, [pc, #92]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002c7a:	4b15      	ldr	r3, [pc, #84]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c80:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c88:	4911      	ldr	r1, [pc, #68]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002c90:	4b0f      	ldr	r3, [pc, #60]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a0e      	ldr	r2, [pc, #56]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c9c:	f7fe fc00 	bl	80014a0 <HAL_GetTick>
 8002ca0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ca4:	f7fe fbfc 	bl	80014a0 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b64      	cmp	r3, #100	@ 0x64
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e007      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002cb6:	4b06      	ldr	r3, [pc, #24]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002cbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002cc2:	d1ef      	bne.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3720      	adds	r7, #32
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40023800 	.word	0x40023800

08002cd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e049      	b.n	8002d7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d106      	bne.n	8002d00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7fe f9be 	bl	800107c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3304      	adds	r3, #4
 8002d10:	4619      	mov	r1, r3
 8002d12:	4610      	mov	r0, r2
 8002d14:	f000 faaa 	bl	800326c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
	...

08002d84 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d001      	beq.n	8002d9c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e04c      	b.n	8002e36 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a26      	ldr	r2, [pc, #152]	@ (8002e44 <HAL_TIM_Base_Start+0xc0>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d022      	beq.n	8002df4 <HAL_TIM_Base_Start+0x70>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002db6:	d01d      	beq.n	8002df4 <HAL_TIM_Base_Start+0x70>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a22      	ldr	r2, [pc, #136]	@ (8002e48 <HAL_TIM_Base_Start+0xc4>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d018      	beq.n	8002df4 <HAL_TIM_Base_Start+0x70>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a21      	ldr	r2, [pc, #132]	@ (8002e4c <HAL_TIM_Base_Start+0xc8>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d013      	beq.n	8002df4 <HAL_TIM_Base_Start+0x70>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a1f      	ldr	r2, [pc, #124]	@ (8002e50 <HAL_TIM_Base_Start+0xcc>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d00e      	beq.n	8002df4 <HAL_TIM_Base_Start+0x70>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a1e      	ldr	r2, [pc, #120]	@ (8002e54 <HAL_TIM_Base_Start+0xd0>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d009      	beq.n	8002df4 <HAL_TIM_Base_Start+0x70>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a1c      	ldr	r2, [pc, #112]	@ (8002e58 <HAL_TIM_Base_Start+0xd4>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d004      	beq.n	8002df4 <HAL_TIM_Base_Start+0x70>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a1b      	ldr	r2, [pc, #108]	@ (8002e5c <HAL_TIM_Base_Start+0xd8>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d115      	bne.n	8002e20 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	4b19      	ldr	r3, [pc, #100]	@ (8002e60 <HAL_TIM_Base_Start+0xdc>)
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2b06      	cmp	r3, #6
 8002e04:	d015      	beq.n	8002e32 <HAL_TIM_Base_Start+0xae>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e0c:	d011      	beq.n	8002e32 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f042 0201 	orr.w	r2, r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e1e:	e008      	b.n	8002e32 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0201 	orr.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	e000      	b.n	8002e34 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3714      	adds	r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	40010000 	.word	0x40010000
 8002e48:	40000400 	.word	0x40000400
 8002e4c:	40000800 	.word	0x40000800
 8002e50:	40000c00 	.word	0x40000c00
 8002e54:	40010400 	.word	0x40010400
 8002e58:	40014000 	.word	0x40014000
 8002e5c:	40001800 	.word	0x40001800
 8002e60:	00010007 	.word	0x00010007

08002e64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d020      	beq.n	8002ec8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d01b      	beq.n	8002ec8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f06f 0202 	mvn.w	r2, #2
 8002e98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f9be 	bl	8003230 <HAL_TIM_IC_CaptureCallback>
 8002eb4:	e005      	b.n	8002ec2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f9b0 	bl	800321c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 f9c1 	bl	8003244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f003 0304 	and.w	r3, r3, #4
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d020      	beq.n	8002f14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d01b      	beq.n	8002f14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f06f 0204 	mvn.w	r2, #4
 8002ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2202      	movs	r2, #2
 8002eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f998 	bl	8003230 <HAL_TIM_IC_CaptureCallback>
 8002f00:	e005      	b.n	8002f0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f98a 	bl	800321c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f99b 	bl	8003244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d020      	beq.n	8002f60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f003 0308 	and.w	r3, r3, #8
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d01b      	beq.n	8002f60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f06f 0208 	mvn.w	r2, #8
 8002f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2204      	movs	r2, #4
 8002f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f972 	bl	8003230 <HAL_TIM_IC_CaptureCallback>
 8002f4c:	e005      	b.n	8002f5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f964 	bl	800321c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 f975 	bl	8003244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	f003 0310 	and.w	r3, r3, #16
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d020      	beq.n	8002fac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f003 0310 	and.w	r3, r3, #16
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d01b      	beq.n	8002fac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f06f 0210 	mvn.w	r2, #16
 8002f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2208      	movs	r2, #8
 8002f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f94c 	bl	8003230 <HAL_TIM_IC_CaptureCallback>
 8002f98:	e005      	b.n	8002fa6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f93e 	bl	800321c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 f94f 	bl	8003244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00c      	beq.n	8002fd0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d007      	beq.n	8002fd0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f06f 0201 	mvn.w	r2, #1
 8002fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f91c 	bl	8003208 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d104      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00c      	beq.n	8002ffe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d007      	beq.n	8002ffe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 fb15 	bl	8003628 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00c      	beq.n	8003022 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800300e:	2b00      	cmp	r3, #0
 8003010:	d007      	beq.n	8003022 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800301a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 fb0d 	bl	800363c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00c      	beq.n	8003046 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003032:	2b00      	cmp	r3, #0
 8003034:	d007      	beq.n	8003046 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800303e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 f909 	bl	8003258 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f003 0320 	and.w	r3, r3, #32
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00c      	beq.n	800306a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f003 0320 	and.w	r3, r3, #32
 8003056:	2b00      	cmp	r3, #0
 8003058:	d007      	beq.n	800306a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f06f 0220 	mvn.w	r2, #32
 8003062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 fad5 	bl	8003614 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800306a:	bf00      	nop
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800307e:	2300      	movs	r3, #0
 8003080:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003088:	2b01      	cmp	r3, #1
 800308a:	d101      	bne.n	8003090 <HAL_TIM_ConfigClockSource+0x1c>
 800308c:	2302      	movs	r3, #2
 800308e:	e0b4      	b.n	80031fa <HAL_TIM_ConfigClockSource+0x186>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	4b56      	ldr	r3, [pc, #344]	@ (8003204 <HAL_TIM_ConfigClockSource+0x190>)
 80030ac:	4013      	ands	r3, r2
 80030ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80030b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030c8:	d03e      	beq.n	8003148 <HAL_TIM_ConfigClockSource+0xd4>
 80030ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030ce:	f200 8087 	bhi.w	80031e0 <HAL_TIM_ConfigClockSource+0x16c>
 80030d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030d6:	f000 8086 	beq.w	80031e6 <HAL_TIM_ConfigClockSource+0x172>
 80030da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030de:	d87f      	bhi.n	80031e0 <HAL_TIM_ConfigClockSource+0x16c>
 80030e0:	2b70      	cmp	r3, #112	@ 0x70
 80030e2:	d01a      	beq.n	800311a <HAL_TIM_ConfigClockSource+0xa6>
 80030e4:	2b70      	cmp	r3, #112	@ 0x70
 80030e6:	d87b      	bhi.n	80031e0 <HAL_TIM_ConfigClockSource+0x16c>
 80030e8:	2b60      	cmp	r3, #96	@ 0x60
 80030ea:	d050      	beq.n	800318e <HAL_TIM_ConfigClockSource+0x11a>
 80030ec:	2b60      	cmp	r3, #96	@ 0x60
 80030ee:	d877      	bhi.n	80031e0 <HAL_TIM_ConfigClockSource+0x16c>
 80030f0:	2b50      	cmp	r3, #80	@ 0x50
 80030f2:	d03c      	beq.n	800316e <HAL_TIM_ConfigClockSource+0xfa>
 80030f4:	2b50      	cmp	r3, #80	@ 0x50
 80030f6:	d873      	bhi.n	80031e0 <HAL_TIM_ConfigClockSource+0x16c>
 80030f8:	2b40      	cmp	r3, #64	@ 0x40
 80030fa:	d058      	beq.n	80031ae <HAL_TIM_ConfigClockSource+0x13a>
 80030fc:	2b40      	cmp	r3, #64	@ 0x40
 80030fe:	d86f      	bhi.n	80031e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003100:	2b30      	cmp	r3, #48	@ 0x30
 8003102:	d064      	beq.n	80031ce <HAL_TIM_ConfigClockSource+0x15a>
 8003104:	2b30      	cmp	r3, #48	@ 0x30
 8003106:	d86b      	bhi.n	80031e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003108:	2b20      	cmp	r3, #32
 800310a:	d060      	beq.n	80031ce <HAL_TIM_ConfigClockSource+0x15a>
 800310c:	2b20      	cmp	r3, #32
 800310e:	d867      	bhi.n	80031e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003110:	2b00      	cmp	r3, #0
 8003112:	d05c      	beq.n	80031ce <HAL_TIM_ConfigClockSource+0x15a>
 8003114:	2b10      	cmp	r3, #16
 8003116:	d05a      	beq.n	80031ce <HAL_TIM_ConfigClockSource+0x15a>
 8003118:	e062      	b.n	80031e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800312a:	f000 f9c5 	bl	80034b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800313c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	609a      	str	r2, [r3, #8]
      break;
 8003146:	e04f      	b.n	80031e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003158:	f000 f9ae 	bl	80034b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689a      	ldr	r2, [r3, #8]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800316a:	609a      	str	r2, [r3, #8]
      break;
 800316c:	e03c      	b.n	80031e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800317a:	461a      	mov	r2, r3
 800317c:	f000 f922 	bl	80033c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2150      	movs	r1, #80	@ 0x50
 8003186:	4618      	mov	r0, r3
 8003188:	f000 f97b 	bl	8003482 <TIM_ITRx_SetConfig>
      break;
 800318c:	e02c      	b.n	80031e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800319a:	461a      	mov	r2, r3
 800319c:	f000 f941 	bl	8003422 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2160      	movs	r1, #96	@ 0x60
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 f96b 	bl	8003482 <TIM_ITRx_SetConfig>
      break;
 80031ac:	e01c      	b.n	80031e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ba:	461a      	mov	r2, r3
 80031bc:	f000 f902 	bl	80033c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2140      	movs	r1, #64	@ 0x40
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 f95b 	bl	8003482 <TIM_ITRx_SetConfig>
      break;
 80031cc:	e00c      	b.n	80031e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4619      	mov	r1, r3
 80031d8:	4610      	mov	r0, r2
 80031da:	f000 f952 	bl	8003482 <TIM_ITRx_SetConfig>
      break;
 80031de:	e003      	b.n	80031e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	73fb      	strb	r3, [r7, #15]
      break;
 80031e4:	e000      	b.n	80031e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80031f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	fffeff88 	.word	0xfffeff88

08003208 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a46      	ldr	r2, [pc, #280]	@ (8003398 <TIM_Base_SetConfig+0x12c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d013      	beq.n	80032ac <TIM_Base_SetConfig+0x40>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800328a:	d00f      	beq.n	80032ac <TIM_Base_SetConfig+0x40>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a43      	ldr	r2, [pc, #268]	@ (800339c <TIM_Base_SetConfig+0x130>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d00b      	beq.n	80032ac <TIM_Base_SetConfig+0x40>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a42      	ldr	r2, [pc, #264]	@ (80033a0 <TIM_Base_SetConfig+0x134>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d007      	beq.n	80032ac <TIM_Base_SetConfig+0x40>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a41      	ldr	r2, [pc, #260]	@ (80033a4 <TIM_Base_SetConfig+0x138>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d003      	beq.n	80032ac <TIM_Base_SetConfig+0x40>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a40      	ldr	r2, [pc, #256]	@ (80033a8 <TIM_Base_SetConfig+0x13c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d108      	bne.n	80032be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a35      	ldr	r2, [pc, #212]	@ (8003398 <TIM_Base_SetConfig+0x12c>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d02b      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032cc:	d027      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a32      	ldr	r2, [pc, #200]	@ (800339c <TIM_Base_SetConfig+0x130>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d023      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a31      	ldr	r2, [pc, #196]	@ (80033a0 <TIM_Base_SetConfig+0x134>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d01f      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a30      	ldr	r2, [pc, #192]	@ (80033a4 <TIM_Base_SetConfig+0x138>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d01b      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a2f      	ldr	r2, [pc, #188]	@ (80033a8 <TIM_Base_SetConfig+0x13c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d017      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a2e      	ldr	r2, [pc, #184]	@ (80033ac <TIM_Base_SetConfig+0x140>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d013      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a2d      	ldr	r2, [pc, #180]	@ (80033b0 <TIM_Base_SetConfig+0x144>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d00f      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a2c      	ldr	r2, [pc, #176]	@ (80033b4 <TIM_Base_SetConfig+0x148>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d00b      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a2b      	ldr	r2, [pc, #172]	@ (80033b8 <TIM_Base_SetConfig+0x14c>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d007      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a2a      	ldr	r2, [pc, #168]	@ (80033bc <TIM_Base_SetConfig+0x150>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d003      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a29      	ldr	r2, [pc, #164]	@ (80033c0 <TIM_Base_SetConfig+0x154>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d108      	bne.n	8003330 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003324:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4313      	orrs	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	4313      	orrs	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a10      	ldr	r2, [pc, #64]	@ (8003398 <TIM_Base_SetConfig+0x12c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d003      	beq.n	8003364 <TIM_Base_SetConfig+0xf8>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a12      	ldr	r2, [pc, #72]	@ (80033a8 <TIM_Base_SetConfig+0x13c>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d103      	bne.n	800336c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	691a      	ldr	r2, [r3, #16]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b01      	cmp	r3, #1
 800337c:	d105      	bne.n	800338a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	f023 0201 	bic.w	r2, r3, #1
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	611a      	str	r2, [r3, #16]
  }
}
 800338a:	bf00      	nop
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40010000 	.word	0x40010000
 800339c:	40000400 	.word	0x40000400
 80033a0:	40000800 	.word	0x40000800
 80033a4:	40000c00 	.word	0x40000c00
 80033a8:	40010400 	.word	0x40010400
 80033ac:	40014000 	.word	0x40014000
 80033b0:	40014400 	.word	0x40014400
 80033b4:	40014800 	.word	0x40014800
 80033b8:	40001800 	.word	0x40001800
 80033bc:	40001c00 	.word	0x40001c00
 80033c0:	40002000 	.word	0x40002000

080033c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b087      	sub	sp, #28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	f023 0201 	bic.w	r2, r3, #1
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	011b      	lsls	r3, r3, #4
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f023 030a 	bic.w	r3, r3, #10
 8003400:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	4313      	orrs	r3, r2
 8003408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	621a      	str	r2, [r3, #32]
}
 8003416:	bf00      	nop
 8003418:	371c      	adds	r7, #28
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003422:	b480      	push	{r7}
 8003424:	b087      	sub	sp, #28
 8003426:	af00      	add	r7, sp, #0
 8003428:	60f8      	str	r0, [r7, #12]
 800342a:	60b9      	str	r1, [r7, #8]
 800342c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	f023 0210 	bic.w	r2, r3, #16
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800344c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	031b      	lsls	r3, r3, #12
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800345e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	4313      	orrs	r3, r2
 8003468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	621a      	str	r2, [r3, #32]
}
 8003476:	bf00      	nop
 8003478:	371c      	adds	r7, #28
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003482:	b480      	push	{r7}
 8003484:	b085      	sub	sp, #20
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
 800348a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003498:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4313      	orrs	r3, r2
 80034a0:	f043 0307 	orr.w	r3, r3, #7
 80034a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	609a      	str	r2, [r3, #8]
}
 80034ac:	bf00      	nop
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b087      	sub	sp, #28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
 80034c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	021a      	lsls	r2, r3, #8
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	431a      	orrs	r2, r3
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	4313      	orrs	r3, r2
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	609a      	str	r2, [r3, #8]
}
 80034ec:	bf00      	nop
 80034ee:	371c      	adds	r7, #28
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003508:	2b01      	cmp	r3, #1
 800350a:	d101      	bne.n	8003510 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800350c:	2302      	movs	r3, #2
 800350e:	e06d      	b.n	80035ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a30      	ldr	r2, [pc, #192]	@ (80035f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d004      	beq.n	8003544 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a2f      	ldr	r2, [pc, #188]	@ (80035fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d108      	bne.n	8003556 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800354a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	4313      	orrs	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800355c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	4313      	orrs	r3, r2
 8003566:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a20      	ldr	r2, [pc, #128]	@ (80035f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d022      	beq.n	80035c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003582:	d01d      	beq.n	80035c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a1d      	ldr	r2, [pc, #116]	@ (8003600 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d018      	beq.n	80035c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a1c      	ldr	r2, [pc, #112]	@ (8003604 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d013      	beq.n	80035c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a1a      	ldr	r2, [pc, #104]	@ (8003608 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d00e      	beq.n	80035c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a15      	ldr	r2, [pc, #84]	@ (80035fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d009      	beq.n	80035c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a16      	ldr	r2, [pc, #88]	@ (800360c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d004      	beq.n	80035c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a15      	ldr	r2, [pc, #84]	@ (8003610 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d10c      	bne.n	80035da <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3714      	adds	r7, #20
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	40010000 	.word	0x40010000
 80035fc:	40010400 	.word	0x40010400
 8003600:	40000400 	.word	0x40000400
 8003604:	40000800 	.word	0x40000800
 8003608:	40000c00 	.word	0x40000c00
 800360c:	40014000 	.word	0x40014000
 8003610:	40001800 	.word	0x40001800

08003614 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e040      	b.n	80036e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003666:	2b00      	cmp	r3, #0
 8003668:	d106      	bne.n	8003678 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7fd fd28 	bl	80010c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2224      	movs	r2, #36	@ 0x24
 800367c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0201 	bic.w	r2, r2, #1
 800368c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 fb16 	bl	8003cc8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f8af 	bl	8003800 <UART_SetConfig>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e01b      	b.n	80036e4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689a      	ldr	r2, [r3, #8]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0201 	orr.w	r2, r2, #1
 80036da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 fb95 	bl	8003e0c <UART_CheckIdleState>
 80036e2:	4603      	mov	r3, r0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b08a      	sub	sp, #40	@ 0x28
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	603b      	str	r3, [r7, #0]
 80036f8:	4613      	mov	r3, r2
 80036fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003700:	2b20      	cmp	r3, #32
 8003702:	d177      	bne.n	80037f4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d002      	beq.n	8003710 <HAL_UART_Transmit+0x24>
 800370a:	88fb      	ldrh	r3, [r7, #6]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d101      	bne.n	8003714 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e070      	b.n	80037f6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2221      	movs	r2, #33	@ 0x21
 8003720:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003722:	f7fd febd 	bl	80014a0 <HAL_GetTick>
 8003726:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	88fa      	ldrh	r2, [r7, #6]
 800372c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	88fa      	ldrh	r2, [r7, #6]
 8003734:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003740:	d108      	bne.n	8003754 <HAL_UART_Transmit+0x68>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d104      	bne.n	8003754 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800374a:	2300      	movs	r3, #0
 800374c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	61bb      	str	r3, [r7, #24]
 8003752:	e003      	b.n	800375c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003758:	2300      	movs	r3, #0
 800375a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800375c:	e02f      	b.n	80037be <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	2200      	movs	r2, #0
 8003766:	2180      	movs	r1, #128	@ 0x80
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 fbf7 	bl	8003f5c <UART_WaitOnFlagUntilTimeout>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d004      	beq.n	800377e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2220      	movs	r2, #32
 8003778:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e03b      	b.n	80037f6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10b      	bne.n	800379c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	881b      	ldrh	r3, [r3, #0]
 8003788:	461a      	mov	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003792:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	3302      	adds	r3, #2
 8003798:	61bb      	str	r3, [r7, #24]
 800379a:	e007      	b.n	80037ac <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	781a      	ldrb	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	3301      	adds	r3, #1
 80037aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1c9      	bne.n	800375e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2200      	movs	r2, #0
 80037d2:	2140      	movs	r1, #64	@ 0x40
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 fbc1 	bl	8003f5c <UART_WaitOnFlagUntilTimeout>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d004      	beq.n	80037ea <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2220      	movs	r2, #32
 80037e4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e005      	b.n	80037f6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2220      	movs	r2, #32
 80037ee:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80037f0:	2300      	movs	r3, #0
 80037f2:	e000      	b.n	80037f6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80037f4:	2302      	movs	r3, #2
  }
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3720      	adds	r7, #32
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b088      	sub	sp, #32
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003808:	2300      	movs	r3, #0
 800380a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	4313      	orrs	r3, r2
 8003822:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	4ba6      	ldr	r3, [pc, #664]	@ (8003ac4 <UART_SetConfig+0x2c4>)
 800382c:	4013      	ands	r3, r2
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6812      	ldr	r2, [r2, #0]
 8003832:	6979      	ldr	r1, [r7, #20]
 8003834:	430b      	orrs	r3, r1
 8003836:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	4313      	orrs	r3, r2
 800385c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	430a      	orrs	r2, r1
 8003870:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a94      	ldr	r2, [pc, #592]	@ (8003ac8 <UART_SetConfig+0x2c8>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d120      	bne.n	80038be <UART_SetConfig+0xbe>
 800387c:	4b93      	ldr	r3, [pc, #588]	@ (8003acc <UART_SetConfig+0x2cc>)
 800387e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003882:	f003 0303 	and.w	r3, r3, #3
 8003886:	2b03      	cmp	r3, #3
 8003888:	d816      	bhi.n	80038b8 <UART_SetConfig+0xb8>
 800388a:	a201      	add	r2, pc, #4	@ (adr r2, 8003890 <UART_SetConfig+0x90>)
 800388c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003890:	080038a1 	.word	0x080038a1
 8003894:	080038ad 	.word	0x080038ad
 8003898:	080038a7 	.word	0x080038a7
 800389c:	080038b3 	.word	0x080038b3
 80038a0:	2301      	movs	r3, #1
 80038a2:	77fb      	strb	r3, [r7, #31]
 80038a4:	e150      	b.n	8003b48 <UART_SetConfig+0x348>
 80038a6:	2302      	movs	r3, #2
 80038a8:	77fb      	strb	r3, [r7, #31]
 80038aa:	e14d      	b.n	8003b48 <UART_SetConfig+0x348>
 80038ac:	2304      	movs	r3, #4
 80038ae:	77fb      	strb	r3, [r7, #31]
 80038b0:	e14a      	b.n	8003b48 <UART_SetConfig+0x348>
 80038b2:	2308      	movs	r3, #8
 80038b4:	77fb      	strb	r3, [r7, #31]
 80038b6:	e147      	b.n	8003b48 <UART_SetConfig+0x348>
 80038b8:	2310      	movs	r3, #16
 80038ba:	77fb      	strb	r3, [r7, #31]
 80038bc:	e144      	b.n	8003b48 <UART_SetConfig+0x348>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a83      	ldr	r2, [pc, #524]	@ (8003ad0 <UART_SetConfig+0x2d0>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d132      	bne.n	800392e <UART_SetConfig+0x12e>
 80038c8:	4b80      	ldr	r3, [pc, #512]	@ (8003acc <UART_SetConfig+0x2cc>)
 80038ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ce:	f003 030c 	and.w	r3, r3, #12
 80038d2:	2b0c      	cmp	r3, #12
 80038d4:	d828      	bhi.n	8003928 <UART_SetConfig+0x128>
 80038d6:	a201      	add	r2, pc, #4	@ (adr r2, 80038dc <UART_SetConfig+0xdc>)
 80038d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038dc:	08003911 	.word	0x08003911
 80038e0:	08003929 	.word	0x08003929
 80038e4:	08003929 	.word	0x08003929
 80038e8:	08003929 	.word	0x08003929
 80038ec:	0800391d 	.word	0x0800391d
 80038f0:	08003929 	.word	0x08003929
 80038f4:	08003929 	.word	0x08003929
 80038f8:	08003929 	.word	0x08003929
 80038fc:	08003917 	.word	0x08003917
 8003900:	08003929 	.word	0x08003929
 8003904:	08003929 	.word	0x08003929
 8003908:	08003929 	.word	0x08003929
 800390c:	08003923 	.word	0x08003923
 8003910:	2300      	movs	r3, #0
 8003912:	77fb      	strb	r3, [r7, #31]
 8003914:	e118      	b.n	8003b48 <UART_SetConfig+0x348>
 8003916:	2302      	movs	r3, #2
 8003918:	77fb      	strb	r3, [r7, #31]
 800391a:	e115      	b.n	8003b48 <UART_SetConfig+0x348>
 800391c:	2304      	movs	r3, #4
 800391e:	77fb      	strb	r3, [r7, #31]
 8003920:	e112      	b.n	8003b48 <UART_SetConfig+0x348>
 8003922:	2308      	movs	r3, #8
 8003924:	77fb      	strb	r3, [r7, #31]
 8003926:	e10f      	b.n	8003b48 <UART_SetConfig+0x348>
 8003928:	2310      	movs	r3, #16
 800392a:	77fb      	strb	r3, [r7, #31]
 800392c:	e10c      	b.n	8003b48 <UART_SetConfig+0x348>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a68      	ldr	r2, [pc, #416]	@ (8003ad4 <UART_SetConfig+0x2d4>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d120      	bne.n	800397a <UART_SetConfig+0x17a>
 8003938:	4b64      	ldr	r3, [pc, #400]	@ (8003acc <UART_SetConfig+0x2cc>)
 800393a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800393e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003942:	2b30      	cmp	r3, #48	@ 0x30
 8003944:	d013      	beq.n	800396e <UART_SetConfig+0x16e>
 8003946:	2b30      	cmp	r3, #48	@ 0x30
 8003948:	d814      	bhi.n	8003974 <UART_SetConfig+0x174>
 800394a:	2b20      	cmp	r3, #32
 800394c:	d009      	beq.n	8003962 <UART_SetConfig+0x162>
 800394e:	2b20      	cmp	r3, #32
 8003950:	d810      	bhi.n	8003974 <UART_SetConfig+0x174>
 8003952:	2b00      	cmp	r3, #0
 8003954:	d002      	beq.n	800395c <UART_SetConfig+0x15c>
 8003956:	2b10      	cmp	r3, #16
 8003958:	d006      	beq.n	8003968 <UART_SetConfig+0x168>
 800395a:	e00b      	b.n	8003974 <UART_SetConfig+0x174>
 800395c:	2300      	movs	r3, #0
 800395e:	77fb      	strb	r3, [r7, #31]
 8003960:	e0f2      	b.n	8003b48 <UART_SetConfig+0x348>
 8003962:	2302      	movs	r3, #2
 8003964:	77fb      	strb	r3, [r7, #31]
 8003966:	e0ef      	b.n	8003b48 <UART_SetConfig+0x348>
 8003968:	2304      	movs	r3, #4
 800396a:	77fb      	strb	r3, [r7, #31]
 800396c:	e0ec      	b.n	8003b48 <UART_SetConfig+0x348>
 800396e:	2308      	movs	r3, #8
 8003970:	77fb      	strb	r3, [r7, #31]
 8003972:	e0e9      	b.n	8003b48 <UART_SetConfig+0x348>
 8003974:	2310      	movs	r3, #16
 8003976:	77fb      	strb	r3, [r7, #31]
 8003978:	e0e6      	b.n	8003b48 <UART_SetConfig+0x348>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a56      	ldr	r2, [pc, #344]	@ (8003ad8 <UART_SetConfig+0x2d8>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d120      	bne.n	80039c6 <UART_SetConfig+0x1c6>
 8003984:	4b51      	ldr	r3, [pc, #324]	@ (8003acc <UART_SetConfig+0x2cc>)
 8003986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800398a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800398e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003990:	d013      	beq.n	80039ba <UART_SetConfig+0x1ba>
 8003992:	2bc0      	cmp	r3, #192	@ 0xc0
 8003994:	d814      	bhi.n	80039c0 <UART_SetConfig+0x1c0>
 8003996:	2b80      	cmp	r3, #128	@ 0x80
 8003998:	d009      	beq.n	80039ae <UART_SetConfig+0x1ae>
 800399a:	2b80      	cmp	r3, #128	@ 0x80
 800399c:	d810      	bhi.n	80039c0 <UART_SetConfig+0x1c0>
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d002      	beq.n	80039a8 <UART_SetConfig+0x1a8>
 80039a2:	2b40      	cmp	r3, #64	@ 0x40
 80039a4:	d006      	beq.n	80039b4 <UART_SetConfig+0x1b4>
 80039a6:	e00b      	b.n	80039c0 <UART_SetConfig+0x1c0>
 80039a8:	2300      	movs	r3, #0
 80039aa:	77fb      	strb	r3, [r7, #31]
 80039ac:	e0cc      	b.n	8003b48 <UART_SetConfig+0x348>
 80039ae:	2302      	movs	r3, #2
 80039b0:	77fb      	strb	r3, [r7, #31]
 80039b2:	e0c9      	b.n	8003b48 <UART_SetConfig+0x348>
 80039b4:	2304      	movs	r3, #4
 80039b6:	77fb      	strb	r3, [r7, #31]
 80039b8:	e0c6      	b.n	8003b48 <UART_SetConfig+0x348>
 80039ba:	2308      	movs	r3, #8
 80039bc:	77fb      	strb	r3, [r7, #31]
 80039be:	e0c3      	b.n	8003b48 <UART_SetConfig+0x348>
 80039c0:	2310      	movs	r3, #16
 80039c2:	77fb      	strb	r3, [r7, #31]
 80039c4:	e0c0      	b.n	8003b48 <UART_SetConfig+0x348>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a44      	ldr	r2, [pc, #272]	@ (8003adc <UART_SetConfig+0x2dc>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d125      	bne.n	8003a1c <UART_SetConfig+0x21c>
 80039d0:	4b3e      	ldr	r3, [pc, #248]	@ (8003acc <UART_SetConfig+0x2cc>)
 80039d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039de:	d017      	beq.n	8003a10 <UART_SetConfig+0x210>
 80039e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039e4:	d817      	bhi.n	8003a16 <UART_SetConfig+0x216>
 80039e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039ea:	d00b      	beq.n	8003a04 <UART_SetConfig+0x204>
 80039ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039f0:	d811      	bhi.n	8003a16 <UART_SetConfig+0x216>
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <UART_SetConfig+0x1fe>
 80039f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039fa:	d006      	beq.n	8003a0a <UART_SetConfig+0x20a>
 80039fc:	e00b      	b.n	8003a16 <UART_SetConfig+0x216>
 80039fe:	2300      	movs	r3, #0
 8003a00:	77fb      	strb	r3, [r7, #31]
 8003a02:	e0a1      	b.n	8003b48 <UART_SetConfig+0x348>
 8003a04:	2302      	movs	r3, #2
 8003a06:	77fb      	strb	r3, [r7, #31]
 8003a08:	e09e      	b.n	8003b48 <UART_SetConfig+0x348>
 8003a0a:	2304      	movs	r3, #4
 8003a0c:	77fb      	strb	r3, [r7, #31]
 8003a0e:	e09b      	b.n	8003b48 <UART_SetConfig+0x348>
 8003a10:	2308      	movs	r3, #8
 8003a12:	77fb      	strb	r3, [r7, #31]
 8003a14:	e098      	b.n	8003b48 <UART_SetConfig+0x348>
 8003a16:	2310      	movs	r3, #16
 8003a18:	77fb      	strb	r3, [r7, #31]
 8003a1a:	e095      	b.n	8003b48 <UART_SetConfig+0x348>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a2f      	ldr	r2, [pc, #188]	@ (8003ae0 <UART_SetConfig+0x2e0>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d125      	bne.n	8003a72 <UART_SetConfig+0x272>
 8003a26:	4b29      	ldr	r3, [pc, #164]	@ (8003acc <UART_SetConfig+0x2cc>)
 8003a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a2c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003a30:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a34:	d017      	beq.n	8003a66 <UART_SetConfig+0x266>
 8003a36:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a3a:	d817      	bhi.n	8003a6c <UART_SetConfig+0x26c>
 8003a3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a40:	d00b      	beq.n	8003a5a <UART_SetConfig+0x25a>
 8003a42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a46:	d811      	bhi.n	8003a6c <UART_SetConfig+0x26c>
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d003      	beq.n	8003a54 <UART_SetConfig+0x254>
 8003a4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a50:	d006      	beq.n	8003a60 <UART_SetConfig+0x260>
 8003a52:	e00b      	b.n	8003a6c <UART_SetConfig+0x26c>
 8003a54:	2301      	movs	r3, #1
 8003a56:	77fb      	strb	r3, [r7, #31]
 8003a58:	e076      	b.n	8003b48 <UART_SetConfig+0x348>
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	77fb      	strb	r3, [r7, #31]
 8003a5e:	e073      	b.n	8003b48 <UART_SetConfig+0x348>
 8003a60:	2304      	movs	r3, #4
 8003a62:	77fb      	strb	r3, [r7, #31]
 8003a64:	e070      	b.n	8003b48 <UART_SetConfig+0x348>
 8003a66:	2308      	movs	r3, #8
 8003a68:	77fb      	strb	r3, [r7, #31]
 8003a6a:	e06d      	b.n	8003b48 <UART_SetConfig+0x348>
 8003a6c:	2310      	movs	r3, #16
 8003a6e:	77fb      	strb	r3, [r7, #31]
 8003a70:	e06a      	b.n	8003b48 <UART_SetConfig+0x348>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a1b      	ldr	r2, [pc, #108]	@ (8003ae4 <UART_SetConfig+0x2e4>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d138      	bne.n	8003aee <UART_SetConfig+0x2ee>
 8003a7c:	4b13      	ldr	r3, [pc, #76]	@ (8003acc <UART_SetConfig+0x2cc>)
 8003a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a82:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003a86:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a8a:	d017      	beq.n	8003abc <UART_SetConfig+0x2bc>
 8003a8c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a90:	d82a      	bhi.n	8003ae8 <UART_SetConfig+0x2e8>
 8003a92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a96:	d00b      	beq.n	8003ab0 <UART_SetConfig+0x2b0>
 8003a98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a9c:	d824      	bhi.n	8003ae8 <UART_SetConfig+0x2e8>
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <UART_SetConfig+0x2aa>
 8003aa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aa6:	d006      	beq.n	8003ab6 <UART_SetConfig+0x2b6>
 8003aa8:	e01e      	b.n	8003ae8 <UART_SetConfig+0x2e8>
 8003aaa:	2300      	movs	r3, #0
 8003aac:	77fb      	strb	r3, [r7, #31]
 8003aae:	e04b      	b.n	8003b48 <UART_SetConfig+0x348>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	77fb      	strb	r3, [r7, #31]
 8003ab4:	e048      	b.n	8003b48 <UART_SetConfig+0x348>
 8003ab6:	2304      	movs	r3, #4
 8003ab8:	77fb      	strb	r3, [r7, #31]
 8003aba:	e045      	b.n	8003b48 <UART_SetConfig+0x348>
 8003abc:	2308      	movs	r3, #8
 8003abe:	77fb      	strb	r3, [r7, #31]
 8003ac0:	e042      	b.n	8003b48 <UART_SetConfig+0x348>
 8003ac2:	bf00      	nop
 8003ac4:	efff69f3 	.word	0xefff69f3
 8003ac8:	40011000 	.word	0x40011000
 8003acc:	40023800 	.word	0x40023800
 8003ad0:	40004400 	.word	0x40004400
 8003ad4:	40004800 	.word	0x40004800
 8003ad8:	40004c00 	.word	0x40004c00
 8003adc:	40005000 	.word	0x40005000
 8003ae0:	40011400 	.word	0x40011400
 8003ae4:	40007800 	.word	0x40007800
 8003ae8:	2310      	movs	r3, #16
 8003aea:	77fb      	strb	r3, [r7, #31]
 8003aec:	e02c      	b.n	8003b48 <UART_SetConfig+0x348>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a72      	ldr	r2, [pc, #456]	@ (8003cbc <UART_SetConfig+0x4bc>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d125      	bne.n	8003b44 <UART_SetConfig+0x344>
 8003af8:	4b71      	ldr	r3, [pc, #452]	@ (8003cc0 <UART_SetConfig+0x4c0>)
 8003afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003afe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003b02:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003b06:	d017      	beq.n	8003b38 <UART_SetConfig+0x338>
 8003b08:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003b0c:	d817      	bhi.n	8003b3e <UART_SetConfig+0x33e>
 8003b0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b12:	d00b      	beq.n	8003b2c <UART_SetConfig+0x32c>
 8003b14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b18:	d811      	bhi.n	8003b3e <UART_SetConfig+0x33e>
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <UART_SetConfig+0x326>
 8003b1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b22:	d006      	beq.n	8003b32 <UART_SetConfig+0x332>
 8003b24:	e00b      	b.n	8003b3e <UART_SetConfig+0x33e>
 8003b26:	2300      	movs	r3, #0
 8003b28:	77fb      	strb	r3, [r7, #31]
 8003b2a:	e00d      	b.n	8003b48 <UART_SetConfig+0x348>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	77fb      	strb	r3, [r7, #31]
 8003b30:	e00a      	b.n	8003b48 <UART_SetConfig+0x348>
 8003b32:	2304      	movs	r3, #4
 8003b34:	77fb      	strb	r3, [r7, #31]
 8003b36:	e007      	b.n	8003b48 <UART_SetConfig+0x348>
 8003b38:	2308      	movs	r3, #8
 8003b3a:	77fb      	strb	r3, [r7, #31]
 8003b3c:	e004      	b.n	8003b48 <UART_SetConfig+0x348>
 8003b3e:	2310      	movs	r3, #16
 8003b40:	77fb      	strb	r3, [r7, #31]
 8003b42:	e001      	b.n	8003b48 <UART_SetConfig+0x348>
 8003b44:	2310      	movs	r3, #16
 8003b46:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b50:	d15b      	bne.n	8003c0a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003b52:	7ffb      	ldrb	r3, [r7, #31]
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d828      	bhi.n	8003baa <UART_SetConfig+0x3aa>
 8003b58:	a201      	add	r2, pc, #4	@ (adr r2, 8003b60 <UART_SetConfig+0x360>)
 8003b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5e:	bf00      	nop
 8003b60:	08003b85 	.word	0x08003b85
 8003b64:	08003b8d 	.word	0x08003b8d
 8003b68:	08003b95 	.word	0x08003b95
 8003b6c:	08003bab 	.word	0x08003bab
 8003b70:	08003b9b 	.word	0x08003b9b
 8003b74:	08003bab 	.word	0x08003bab
 8003b78:	08003bab 	.word	0x08003bab
 8003b7c:	08003bab 	.word	0x08003bab
 8003b80:	08003ba3 	.word	0x08003ba3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b84:	f7fe fc56 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
 8003b88:	61b8      	str	r0, [r7, #24]
        break;
 8003b8a:	e013      	b.n	8003bb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b8c:	f7fe fc66 	bl	800245c <HAL_RCC_GetPCLK2Freq>
 8003b90:	61b8      	str	r0, [r7, #24]
        break;
 8003b92:	e00f      	b.n	8003bb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b94:	4b4b      	ldr	r3, [pc, #300]	@ (8003cc4 <UART_SetConfig+0x4c4>)
 8003b96:	61bb      	str	r3, [r7, #24]
        break;
 8003b98:	e00c      	b.n	8003bb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b9a:	f7fe fb3b 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 8003b9e:	61b8      	str	r0, [r7, #24]
        break;
 8003ba0:	e008      	b.n	8003bb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ba2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ba6:	61bb      	str	r3, [r7, #24]
        break;
 8003ba8:	e004      	b.n	8003bb4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	77bb      	strb	r3, [r7, #30]
        break;
 8003bb2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d074      	beq.n	8003ca4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	005a      	lsls	r2, r3, #1
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	085b      	lsrs	r3, r3, #1
 8003bc4:	441a      	add	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	2b0f      	cmp	r3, #15
 8003bd4:	d916      	bls.n	8003c04 <UART_SetConfig+0x404>
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bdc:	d212      	bcs.n	8003c04 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	f023 030f 	bic.w	r3, r3, #15
 8003be6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	085b      	lsrs	r3, r3, #1
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	f003 0307 	and.w	r3, r3, #7
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	89fb      	ldrh	r3, [r7, #14]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	89fa      	ldrh	r2, [r7, #14]
 8003c00:	60da      	str	r2, [r3, #12]
 8003c02:	e04f      	b.n	8003ca4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	77bb      	strb	r3, [r7, #30]
 8003c08:	e04c      	b.n	8003ca4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c0a:	7ffb      	ldrb	r3, [r7, #31]
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	d828      	bhi.n	8003c62 <UART_SetConfig+0x462>
 8003c10:	a201      	add	r2, pc, #4	@ (adr r2, 8003c18 <UART_SetConfig+0x418>)
 8003c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c16:	bf00      	nop
 8003c18:	08003c3d 	.word	0x08003c3d
 8003c1c:	08003c45 	.word	0x08003c45
 8003c20:	08003c4d 	.word	0x08003c4d
 8003c24:	08003c63 	.word	0x08003c63
 8003c28:	08003c53 	.word	0x08003c53
 8003c2c:	08003c63 	.word	0x08003c63
 8003c30:	08003c63 	.word	0x08003c63
 8003c34:	08003c63 	.word	0x08003c63
 8003c38:	08003c5b 	.word	0x08003c5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c3c:	f7fe fbfa 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
 8003c40:	61b8      	str	r0, [r7, #24]
        break;
 8003c42:	e013      	b.n	8003c6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c44:	f7fe fc0a 	bl	800245c <HAL_RCC_GetPCLK2Freq>
 8003c48:	61b8      	str	r0, [r7, #24]
        break;
 8003c4a:	e00f      	b.n	8003c6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8003cc4 <UART_SetConfig+0x4c4>)
 8003c4e:	61bb      	str	r3, [r7, #24]
        break;
 8003c50:	e00c      	b.n	8003c6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c52:	f7fe fadf 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 8003c56:	61b8      	str	r0, [r7, #24]
        break;
 8003c58:	e008      	b.n	8003c6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c5e:	61bb      	str	r3, [r7, #24]
        break;
 8003c60:	e004      	b.n	8003c6c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	77bb      	strb	r3, [r7, #30]
        break;
 8003c6a:	bf00      	nop
    }

    if (pclk != 0U)
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d018      	beq.n	8003ca4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	085a      	lsrs	r2, r3, #1
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	441a      	add	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c84:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	2b0f      	cmp	r3, #15
 8003c8a:	d909      	bls.n	8003ca0 <UART_SetConfig+0x4a0>
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c92:	d205      	bcs.n	8003ca0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	60da      	str	r2, [r3, #12]
 8003c9e:	e001      	b.n	8003ca4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003cb0:	7fbb      	ldrb	r3, [r7, #30]
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3720      	adds	r7, #32
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	40007c00 	.word	0x40007c00
 8003cc0:	40023800 	.word	0x40023800
 8003cc4:	00f42400 	.word	0x00f42400

08003cc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd4:	f003 0308 	and.w	r3, r3, #8
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00a      	beq.n	8003cf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00a      	beq.n	8003d36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3a:	f003 0304 	and.w	r3, r3, #4
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5c:	f003 0310 	and.w	r3, r3, #16
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00a      	beq.n	8003d7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7e:	f003 0320 	and.w	r3, r3, #32
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00a      	beq.n	8003d9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d01a      	beq.n	8003dde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dc6:	d10a      	bne.n	8003dde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00a      	beq.n	8003e00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	605a      	str	r2, [r3, #4]
  }
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b098      	sub	sp, #96	@ 0x60
 8003e10:	af02      	add	r7, sp, #8
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e1c:	f7fd fb40 	bl	80014a0 <HAL_GetTick>
 8003e20:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0308 	and.w	r3, r3, #8
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d12e      	bne.n	8003e8e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f88c 	bl	8003f5c <UART_WaitOnFlagUntilTimeout>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d021      	beq.n	8003e8e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e52:	e853 3f00 	ldrex	r3, [r3]
 8003e56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	461a      	mov	r2, r3
 8003e66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e68:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e6a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e70:	e841 2300 	strex	r3, r2, [r1]
 8003e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1e6      	bne.n	8003e4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e062      	b.n	8003f54 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	2b04      	cmp	r3, #4
 8003e9a:	d149      	bne.n	8003f30 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f856 	bl	8003f5c <UART_WaitOnFlagUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d03c      	beq.n	8003f30 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ebe:	e853 3f00 	ldrex	r3, [r3]
 8003ec2:	623b      	str	r3, [r7, #32]
   return(result);
 8003ec4:	6a3b      	ldr	r3, [r7, #32]
 8003ec6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003eca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ed4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ed6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003eda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003edc:	e841 2300 	strex	r3, r2, [r1]
 8003ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1e6      	bne.n	8003eb6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	3308      	adds	r3, #8
 8003eee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	e853 3f00 	ldrex	r3, [r3]
 8003ef6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 0301 	bic.w	r3, r3, #1
 8003efe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3308      	adds	r3, #8
 8003f06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f08:	61fa      	str	r2, [r7, #28]
 8003f0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0c:	69b9      	ldr	r1, [r7, #24]
 8003f0e:	69fa      	ldr	r2, [r7, #28]
 8003f10:	e841 2300 	strex	r3, r2, [r1]
 8003f14:	617b      	str	r3, [r7, #20]
   return(result);
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1e5      	bne.n	8003ee8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e011      	b.n	8003f54 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2220      	movs	r2, #32
 8003f34:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2220      	movs	r2, #32
 8003f3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3758      	adds	r7, #88	@ 0x58
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	603b      	str	r3, [r7, #0]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f6c:	e04f      	b.n	800400e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f74:	d04b      	beq.n	800400e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f76:	f7fd fa93 	bl	80014a0 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d302      	bcc.n	8003f8c <UART_WaitOnFlagUntilTimeout+0x30>
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e04e      	b.n	800402e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0304 	and.w	r3, r3, #4
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d037      	beq.n	800400e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2b80      	cmp	r3, #128	@ 0x80
 8003fa2:	d034      	beq.n	800400e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	2b40      	cmp	r3, #64	@ 0x40
 8003fa8:	d031      	beq.n	800400e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	f003 0308 	and.w	r3, r3, #8
 8003fb4:	2b08      	cmp	r3, #8
 8003fb6:	d110      	bne.n	8003fda <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2208      	movs	r2, #8
 8003fbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f000 f838 	bl	8004036 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2208      	movs	r2, #8
 8003fca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e029      	b.n	800402e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fe4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fe8:	d111      	bne.n	800400e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ff2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 f81e 	bl	8004036 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e00f      	b.n	800402e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	69da      	ldr	r2, [r3, #28]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	4013      	ands	r3, r2
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	429a      	cmp	r2, r3
 800401c:	bf0c      	ite	eq
 800401e:	2301      	moveq	r3, #1
 8004020:	2300      	movne	r3, #0
 8004022:	b2db      	uxtb	r3, r3
 8004024:	461a      	mov	r2, r3
 8004026:	79fb      	ldrb	r3, [r7, #7]
 8004028:	429a      	cmp	r2, r3
 800402a:	d0a0      	beq.n	8003f6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004036:	b480      	push	{r7}
 8004038:	b095      	sub	sp, #84	@ 0x54
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004046:	e853 3f00 	ldrex	r3, [r3]
 800404a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800404c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800404e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004052:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	461a      	mov	r2, r3
 800405a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800405c:	643b      	str	r3, [r7, #64]	@ 0x40
 800405e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004060:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004062:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004064:	e841 2300 	strex	r3, r2, [r1]
 8004068:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800406a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1e6      	bne.n	800403e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	3308      	adds	r3, #8
 8004076:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	e853 3f00 	ldrex	r3, [r3]
 800407e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	f023 0301 	bic.w	r3, r3, #1
 8004086:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	3308      	adds	r3, #8
 800408e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004090:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004092:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004094:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004096:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004098:	e841 2300 	strex	r3, r2, [r1]
 800409c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800409e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1e5      	bne.n	8004070 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d118      	bne.n	80040de <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	e853 3f00 	ldrex	r3, [r3]
 80040b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	f023 0310 	bic.w	r3, r3, #16
 80040c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	461a      	mov	r2, r3
 80040c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040ca:	61bb      	str	r3, [r7, #24]
 80040cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ce:	6979      	ldr	r1, [r7, #20]
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	e841 2300 	strex	r3, r2, [r1]
 80040d6:	613b      	str	r3, [r7, #16]
   return(result);
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1e6      	bne.n	80040ac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2220      	movs	r2, #32
 80040e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80040f2:	bf00      	nop
 80040f4:	3754      	adds	r7, #84	@ 0x54
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <__cvt>:
 80040fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004100:	ed2d 8b02 	vpush	{d8}
 8004104:	eeb0 8b40 	vmov.f64	d8, d0
 8004108:	b085      	sub	sp, #20
 800410a:	4617      	mov	r7, r2
 800410c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800410e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004110:	ee18 2a90 	vmov	r2, s17
 8004114:	f025 0520 	bic.w	r5, r5, #32
 8004118:	2a00      	cmp	r2, #0
 800411a:	bfb6      	itet	lt
 800411c:	222d      	movlt	r2, #45	@ 0x2d
 800411e:	2200      	movge	r2, #0
 8004120:	eeb1 8b40 	vneglt.f64	d8, d0
 8004124:	2d46      	cmp	r5, #70	@ 0x46
 8004126:	460c      	mov	r4, r1
 8004128:	701a      	strb	r2, [r3, #0]
 800412a:	d004      	beq.n	8004136 <__cvt+0x38>
 800412c:	2d45      	cmp	r5, #69	@ 0x45
 800412e:	d100      	bne.n	8004132 <__cvt+0x34>
 8004130:	3401      	adds	r4, #1
 8004132:	2102      	movs	r1, #2
 8004134:	e000      	b.n	8004138 <__cvt+0x3a>
 8004136:	2103      	movs	r1, #3
 8004138:	ab03      	add	r3, sp, #12
 800413a:	9301      	str	r3, [sp, #4]
 800413c:	ab02      	add	r3, sp, #8
 800413e:	9300      	str	r3, [sp, #0]
 8004140:	4622      	mov	r2, r4
 8004142:	4633      	mov	r3, r6
 8004144:	eeb0 0b48 	vmov.f64	d0, d8
 8004148:	f000 fe42 	bl	8004dd0 <_dtoa_r>
 800414c:	2d47      	cmp	r5, #71	@ 0x47
 800414e:	d114      	bne.n	800417a <__cvt+0x7c>
 8004150:	07fb      	lsls	r3, r7, #31
 8004152:	d50a      	bpl.n	800416a <__cvt+0x6c>
 8004154:	1902      	adds	r2, r0, r4
 8004156:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800415a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800415e:	bf08      	it	eq
 8004160:	9203      	streq	r2, [sp, #12]
 8004162:	2130      	movs	r1, #48	@ 0x30
 8004164:	9b03      	ldr	r3, [sp, #12]
 8004166:	4293      	cmp	r3, r2
 8004168:	d319      	bcc.n	800419e <__cvt+0xa0>
 800416a:	9b03      	ldr	r3, [sp, #12]
 800416c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800416e:	1a1b      	subs	r3, r3, r0
 8004170:	6013      	str	r3, [r2, #0]
 8004172:	b005      	add	sp, #20
 8004174:	ecbd 8b02 	vpop	{d8}
 8004178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800417a:	2d46      	cmp	r5, #70	@ 0x46
 800417c:	eb00 0204 	add.w	r2, r0, r4
 8004180:	d1e9      	bne.n	8004156 <__cvt+0x58>
 8004182:	7803      	ldrb	r3, [r0, #0]
 8004184:	2b30      	cmp	r3, #48	@ 0x30
 8004186:	d107      	bne.n	8004198 <__cvt+0x9a>
 8004188:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800418c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004190:	bf1c      	itt	ne
 8004192:	f1c4 0401 	rsbne	r4, r4, #1
 8004196:	6034      	strne	r4, [r6, #0]
 8004198:	6833      	ldr	r3, [r6, #0]
 800419a:	441a      	add	r2, r3
 800419c:	e7db      	b.n	8004156 <__cvt+0x58>
 800419e:	1c5c      	adds	r4, r3, #1
 80041a0:	9403      	str	r4, [sp, #12]
 80041a2:	7019      	strb	r1, [r3, #0]
 80041a4:	e7de      	b.n	8004164 <__cvt+0x66>

080041a6 <__exponent>:
 80041a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041a8:	2900      	cmp	r1, #0
 80041aa:	bfba      	itte	lt
 80041ac:	4249      	neglt	r1, r1
 80041ae:	232d      	movlt	r3, #45	@ 0x2d
 80041b0:	232b      	movge	r3, #43	@ 0x2b
 80041b2:	2909      	cmp	r1, #9
 80041b4:	7002      	strb	r2, [r0, #0]
 80041b6:	7043      	strb	r3, [r0, #1]
 80041b8:	dd29      	ble.n	800420e <__exponent+0x68>
 80041ba:	f10d 0307 	add.w	r3, sp, #7
 80041be:	461d      	mov	r5, r3
 80041c0:	270a      	movs	r7, #10
 80041c2:	461a      	mov	r2, r3
 80041c4:	fbb1 f6f7 	udiv	r6, r1, r7
 80041c8:	fb07 1416 	mls	r4, r7, r6, r1
 80041cc:	3430      	adds	r4, #48	@ 0x30
 80041ce:	f802 4c01 	strb.w	r4, [r2, #-1]
 80041d2:	460c      	mov	r4, r1
 80041d4:	2c63      	cmp	r4, #99	@ 0x63
 80041d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80041da:	4631      	mov	r1, r6
 80041dc:	dcf1      	bgt.n	80041c2 <__exponent+0x1c>
 80041de:	3130      	adds	r1, #48	@ 0x30
 80041e0:	1e94      	subs	r4, r2, #2
 80041e2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80041e6:	1c41      	adds	r1, r0, #1
 80041e8:	4623      	mov	r3, r4
 80041ea:	42ab      	cmp	r3, r5
 80041ec:	d30a      	bcc.n	8004204 <__exponent+0x5e>
 80041ee:	f10d 0309 	add.w	r3, sp, #9
 80041f2:	1a9b      	subs	r3, r3, r2
 80041f4:	42ac      	cmp	r4, r5
 80041f6:	bf88      	it	hi
 80041f8:	2300      	movhi	r3, #0
 80041fa:	3302      	adds	r3, #2
 80041fc:	4403      	add	r3, r0
 80041fe:	1a18      	subs	r0, r3, r0
 8004200:	b003      	add	sp, #12
 8004202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004204:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004208:	f801 6f01 	strb.w	r6, [r1, #1]!
 800420c:	e7ed      	b.n	80041ea <__exponent+0x44>
 800420e:	2330      	movs	r3, #48	@ 0x30
 8004210:	3130      	adds	r1, #48	@ 0x30
 8004212:	7083      	strb	r3, [r0, #2]
 8004214:	70c1      	strb	r1, [r0, #3]
 8004216:	1d03      	adds	r3, r0, #4
 8004218:	e7f1      	b.n	80041fe <__exponent+0x58>
 800421a:	0000      	movs	r0, r0
 800421c:	0000      	movs	r0, r0
	...

08004220 <_printf_float>:
 8004220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004224:	b08d      	sub	sp, #52	@ 0x34
 8004226:	460c      	mov	r4, r1
 8004228:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800422c:	4616      	mov	r6, r2
 800422e:	461f      	mov	r7, r3
 8004230:	4605      	mov	r5, r0
 8004232:	f000 fccb 	bl	8004bcc <_localeconv_r>
 8004236:	f8d0 b000 	ldr.w	fp, [r0]
 800423a:	4658      	mov	r0, fp
 800423c:	f7fc f850 	bl	80002e0 <strlen>
 8004240:	2300      	movs	r3, #0
 8004242:	930a      	str	r3, [sp, #40]	@ 0x28
 8004244:	f8d8 3000 	ldr.w	r3, [r8]
 8004248:	f894 9018 	ldrb.w	r9, [r4, #24]
 800424c:	6822      	ldr	r2, [r4, #0]
 800424e:	9005      	str	r0, [sp, #20]
 8004250:	3307      	adds	r3, #7
 8004252:	f023 0307 	bic.w	r3, r3, #7
 8004256:	f103 0108 	add.w	r1, r3, #8
 800425a:	f8c8 1000 	str.w	r1, [r8]
 800425e:	ed93 0b00 	vldr	d0, [r3]
 8004262:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80044c0 <_printf_float+0x2a0>
 8004266:	eeb0 7bc0 	vabs.f64	d7, d0
 800426a:	eeb4 7b46 	vcmp.f64	d7, d6
 800426e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004272:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8004276:	dd24      	ble.n	80042c2 <_printf_float+0xa2>
 8004278:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800427c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004280:	d502      	bpl.n	8004288 <_printf_float+0x68>
 8004282:	232d      	movs	r3, #45	@ 0x2d
 8004284:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004288:	498f      	ldr	r1, [pc, #572]	@ (80044c8 <_printf_float+0x2a8>)
 800428a:	4b90      	ldr	r3, [pc, #576]	@ (80044cc <_printf_float+0x2ac>)
 800428c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8004290:	bf94      	ite	ls
 8004292:	4688      	movls	r8, r1
 8004294:	4698      	movhi	r8, r3
 8004296:	f022 0204 	bic.w	r2, r2, #4
 800429a:	2303      	movs	r3, #3
 800429c:	6123      	str	r3, [r4, #16]
 800429e:	6022      	str	r2, [r4, #0]
 80042a0:	f04f 0a00 	mov.w	sl, #0
 80042a4:	9700      	str	r7, [sp, #0]
 80042a6:	4633      	mov	r3, r6
 80042a8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80042aa:	4621      	mov	r1, r4
 80042ac:	4628      	mov	r0, r5
 80042ae:	f000 f9d1 	bl	8004654 <_printf_common>
 80042b2:	3001      	adds	r0, #1
 80042b4:	f040 8089 	bne.w	80043ca <_printf_float+0x1aa>
 80042b8:	f04f 30ff 	mov.w	r0, #4294967295
 80042bc:	b00d      	add	sp, #52	@ 0x34
 80042be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042c2:	eeb4 0b40 	vcmp.f64	d0, d0
 80042c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ca:	d709      	bvc.n	80042e0 <_printf_float+0xc0>
 80042cc:	ee10 3a90 	vmov	r3, s1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	bfbc      	itt	lt
 80042d4:	232d      	movlt	r3, #45	@ 0x2d
 80042d6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80042da:	497d      	ldr	r1, [pc, #500]	@ (80044d0 <_printf_float+0x2b0>)
 80042dc:	4b7d      	ldr	r3, [pc, #500]	@ (80044d4 <_printf_float+0x2b4>)
 80042de:	e7d5      	b.n	800428c <_printf_float+0x6c>
 80042e0:	6863      	ldr	r3, [r4, #4]
 80042e2:	1c59      	adds	r1, r3, #1
 80042e4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80042e8:	d139      	bne.n	800435e <_printf_float+0x13e>
 80042ea:	2306      	movs	r3, #6
 80042ec:	6063      	str	r3, [r4, #4]
 80042ee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80042f2:	2300      	movs	r3, #0
 80042f4:	6022      	str	r2, [r4, #0]
 80042f6:	9303      	str	r3, [sp, #12]
 80042f8:	ab0a      	add	r3, sp, #40	@ 0x28
 80042fa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80042fe:	ab09      	add	r3, sp, #36	@ 0x24
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	6861      	ldr	r1, [r4, #4]
 8004304:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004308:	4628      	mov	r0, r5
 800430a:	f7ff fef8 	bl	80040fe <__cvt>
 800430e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004312:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004314:	4680      	mov	r8, r0
 8004316:	d129      	bne.n	800436c <_printf_float+0x14c>
 8004318:	1cc8      	adds	r0, r1, #3
 800431a:	db02      	blt.n	8004322 <_printf_float+0x102>
 800431c:	6863      	ldr	r3, [r4, #4]
 800431e:	4299      	cmp	r1, r3
 8004320:	dd41      	ble.n	80043a6 <_printf_float+0x186>
 8004322:	f1a9 0902 	sub.w	r9, r9, #2
 8004326:	fa5f f989 	uxtb.w	r9, r9
 800432a:	3901      	subs	r1, #1
 800432c:	464a      	mov	r2, r9
 800432e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004332:	9109      	str	r1, [sp, #36]	@ 0x24
 8004334:	f7ff ff37 	bl	80041a6 <__exponent>
 8004338:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800433a:	1813      	adds	r3, r2, r0
 800433c:	2a01      	cmp	r2, #1
 800433e:	4682      	mov	sl, r0
 8004340:	6123      	str	r3, [r4, #16]
 8004342:	dc02      	bgt.n	800434a <_printf_float+0x12a>
 8004344:	6822      	ldr	r2, [r4, #0]
 8004346:	07d2      	lsls	r2, r2, #31
 8004348:	d501      	bpl.n	800434e <_printf_float+0x12e>
 800434a:	3301      	adds	r3, #1
 800434c:	6123      	str	r3, [r4, #16]
 800434e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0a6      	beq.n	80042a4 <_printf_float+0x84>
 8004356:	232d      	movs	r3, #45	@ 0x2d
 8004358:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800435c:	e7a2      	b.n	80042a4 <_printf_float+0x84>
 800435e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004362:	d1c4      	bne.n	80042ee <_printf_float+0xce>
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1c2      	bne.n	80042ee <_printf_float+0xce>
 8004368:	2301      	movs	r3, #1
 800436a:	e7bf      	b.n	80042ec <_printf_float+0xcc>
 800436c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8004370:	d9db      	bls.n	800432a <_printf_float+0x10a>
 8004372:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8004376:	d118      	bne.n	80043aa <_printf_float+0x18a>
 8004378:	2900      	cmp	r1, #0
 800437a:	6863      	ldr	r3, [r4, #4]
 800437c:	dd0b      	ble.n	8004396 <_printf_float+0x176>
 800437e:	6121      	str	r1, [r4, #16]
 8004380:	b913      	cbnz	r3, 8004388 <_printf_float+0x168>
 8004382:	6822      	ldr	r2, [r4, #0]
 8004384:	07d0      	lsls	r0, r2, #31
 8004386:	d502      	bpl.n	800438e <_printf_float+0x16e>
 8004388:	3301      	adds	r3, #1
 800438a:	440b      	add	r3, r1
 800438c:	6123      	str	r3, [r4, #16]
 800438e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004390:	f04f 0a00 	mov.w	sl, #0
 8004394:	e7db      	b.n	800434e <_printf_float+0x12e>
 8004396:	b913      	cbnz	r3, 800439e <_printf_float+0x17e>
 8004398:	6822      	ldr	r2, [r4, #0]
 800439a:	07d2      	lsls	r2, r2, #31
 800439c:	d501      	bpl.n	80043a2 <_printf_float+0x182>
 800439e:	3302      	adds	r3, #2
 80043a0:	e7f4      	b.n	800438c <_printf_float+0x16c>
 80043a2:	2301      	movs	r3, #1
 80043a4:	e7f2      	b.n	800438c <_printf_float+0x16c>
 80043a6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80043aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80043ac:	4299      	cmp	r1, r3
 80043ae:	db05      	blt.n	80043bc <_printf_float+0x19c>
 80043b0:	6823      	ldr	r3, [r4, #0]
 80043b2:	6121      	str	r1, [r4, #16]
 80043b4:	07d8      	lsls	r0, r3, #31
 80043b6:	d5ea      	bpl.n	800438e <_printf_float+0x16e>
 80043b8:	1c4b      	adds	r3, r1, #1
 80043ba:	e7e7      	b.n	800438c <_printf_float+0x16c>
 80043bc:	2900      	cmp	r1, #0
 80043be:	bfd4      	ite	le
 80043c0:	f1c1 0202 	rsble	r2, r1, #2
 80043c4:	2201      	movgt	r2, #1
 80043c6:	4413      	add	r3, r2
 80043c8:	e7e0      	b.n	800438c <_printf_float+0x16c>
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	055a      	lsls	r2, r3, #21
 80043ce:	d407      	bmi.n	80043e0 <_printf_float+0x1c0>
 80043d0:	6923      	ldr	r3, [r4, #16]
 80043d2:	4642      	mov	r2, r8
 80043d4:	4631      	mov	r1, r6
 80043d6:	4628      	mov	r0, r5
 80043d8:	47b8      	blx	r7
 80043da:	3001      	adds	r0, #1
 80043dc:	d12a      	bne.n	8004434 <_printf_float+0x214>
 80043de:	e76b      	b.n	80042b8 <_printf_float+0x98>
 80043e0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80043e4:	f240 80e0 	bls.w	80045a8 <_printf_float+0x388>
 80043e8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80043ec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80043f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043f4:	d133      	bne.n	800445e <_printf_float+0x23e>
 80043f6:	4a38      	ldr	r2, [pc, #224]	@ (80044d8 <_printf_float+0x2b8>)
 80043f8:	2301      	movs	r3, #1
 80043fa:	4631      	mov	r1, r6
 80043fc:	4628      	mov	r0, r5
 80043fe:	47b8      	blx	r7
 8004400:	3001      	adds	r0, #1
 8004402:	f43f af59 	beq.w	80042b8 <_printf_float+0x98>
 8004406:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800440a:	4543      	cmp	r3, r8
 800440c:	db02      	blt.n	8004414 <_printf_float+0x1f4>
 800440e:	6823      	ldr	r3, [r4, #0]
 8004410:	07d8      	lsls	r0, r3, #31
 8004412:	d50f      	bpl.n	8004434 <_printf_float+0x214>
 8004414:	9b05      	ldr	r3, [sp, #20]
 8004416:	465a      	mov	r2, fp
 8004418:	4631      	mov	r1, r6
 800441a:	4628      	mov	r0, r5
 800441c:	47b8      	blx	r7
 800441e:	3001      	adds	r0, #1
 8004420:	f43f af4a 	beq.w	80042b8 <_printf_float+0x98>
 8004424:	f04f 0900 	mov.w	r9, #0
 8004428:	f108 38ff 	add.w	r8, r8, #4294967295
 800442c:	f104 0a1a 	add.w	sl, r4, #26
 8004430:	45c8      	cmp	r8, r9
 8004432:	dc09      	bgt.n	8004448 <_printf_float+0x228>
 8004434:	6823      	ldr	r3, [r4, #0]
 8004436:	079b      	lsls	r3, r3, #30
 8004438:	f100 8107 	bmi.w	800464a <_printf_float+0x42a>
 800443c:	68e0      	ldr	r0, [r4, #12]
 800443e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004440:	4298      	cmp	r0, r3
 8004442:	bfb8      	it	lt
 8004444:	4618      	movlt	r0, r3
 8004446:	e739      	b.n	80042bc <_printf_float+0x9c>
 8004448:	2301      	movs	r3, #1
 800444a:	4652      	mov	r2, sl
 800444c:	4631      	mov	r1, r6
 800444e:	4628      	mov	r0, r5
 8004450:	47b8      	blx	r7
 8004452:	3001      	adds	r0, #1
 8004454:	f43f af30 	beq.w	80042b8 <_printf_float+0x98>
 8004458:	f109 0901 	add.w	r9, r9, #1
 800445c:	e7e8      	b.n	8004430 <_printf_float+0x210>
 800445e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004460:	2b00      	cmp	r3, #0
 8004462:	dc3b      	bgt.n	80044dc <_printf_float+0x2bc>
 8004464:	4a1c      	ldr	r2, [pc, #112]	@ (80044d8 <_printf_float+0x2b8>)
 8004466:	2301      	movs	r3, #1
 8004468:	4631      	mov	r1, r6
 800446a:	4628      	mov	r0, r5
 800446c:	47b8      	blx	r7
 800446e:	3001      	adds	r0, #1
 8004470:	f43f af22 	beq.w	80042b8 <_printf_float+0x98>
 8004474:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004478:	ea59 0303 	orrs.w	r3, r9, r3
 800447c:	d102      	bne.n	8004484 <_printf_float+0x264>
 800447e:	6823      	ldr	r3, [r4, #0]
 8004480:	07d9      	lsls	r1, r3, #31
 8004482:	d5d7      	bpl.n	8004434 <_printf_float+0x214>
 8004484:	9b05      	ldr	r3, [sp, #20]
 8004486:	465a      	mov	r2, fp
 8004488:	4631      	mov	r1, r6
 800448a:	4628      	mov	r0, r5
 800448c:	47b8      	blx	r7
 800448e:	3001      	adds	r0, #1
 8004490:	f43f af12 	beq.w	80042b8 <_printf_float+0x98>
 8004494:	f04f 0a00 	mov.w	sl, #0
 8004498:	f104 0b1a 	add.w	fp, r4, #26
 800449c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800449e:	425b      	negs	r3, r3
 80044a0:	4553      	cmp	r3, sl
 80044a2:	dc01      	bgt.n	80044a8 <_printf_float+0x288>
 80044a4:	464b      	mov	r3, r9
 80044a6:	e794      	b.n	80043d2 <_printf_float+0x1b2>
 80044a8:	2301      	movs	r3, #1
 80044aa:	465a      	mov	r2, fp
 80044ac:	4631      	mov	r1, r6
 80044ae:	4628      	mov	r0, r5
 80044b0:	47b8      	blx	r7
 80044b2:	3001      	adds	r0, #1
 80044b4:	f43f af00 	beq.w	80042b8 <_printf_float+0x98>
 80044b8:	f10a 0a01 	add.w	sl, sl, #1
 80044bc:	e7ee      	b.n	800449c <_printf_float+0x27c>
 80044be:	bf00      	nop
 80044c0:	ffffffff 	.word	0xffffffff
 80044c4:	7fefffff 	.word	0x7fefffff
 80044c8:	08006d14 	.word	0x08006d14
 80044cc:	08006d18 	.word	0x08006d18
 80044d0:	08006d1c 	.word	0x08006d1c
 80044d4:	08006d20 	.word	0x08006d20
 80044d8:	08006d24 	.word	0x08006d24
 80044dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80044de:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80044e2:	4553      	cmp	r3, sl
 80044e4:	bfa8      	it	ge
 80044e6:	4653      	movge	r3, sl
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	4699      	mov	r9, r3
 80044ec:	dc37      	bgt.n	800455e <_printf_float+0x33e>
 80044ee:	2300      	movs	r3, #0
 80044f0:	9307      	str	r3, [sp, #28]
 80044f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044f6:	f104 021a 	add.w	r2, r4, #26
 80044fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80044fc:	9907      	ldr	r1, [sp, #28]
 80044fe:	9306      	str	r3, [sp, #24]
 8004500:	eba3 0309 	sub.w	r3, r3, r9
 8004504:	428b      	cmp	r3, r1
 8004506:	dc31      	bgt.n	800456c <_printf_float+0x34c>
 8004508:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800450a:	459a      	cmp	sl, r3
 800450c:	dc3b      	bgt.n	8004586 <_printf_float+0x366>
 800450e:	6823      	ldr	r3, [r4, #0]
 8004510:	07da      	lsls	r2, r3, #31
 8004512:	d438      	bmi.n	8004586 <_printf_float+0x366>
 8004514:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004516:	ebaa 0903 	sub.w	r9, sl, r3
 800451a:	9b06      	ldr	r3, [sp, #24]
 800451c:	ebaa 0303 	sub.w	r3, sl, r3
 8004520:	4599      	cmp	r9, r3
 8004522:	bfa8      	it	ge
 8004524:	4699      	movge	r9, r3
 8004526:	f1b9 0f00 	cmp.w	r9, #0
 800452a:	dc34      	bgt.n	8004596 <_printf_float+0x376>
 800452c:	f04f 0800 	mov.w	r8, #0
 8004530:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004534:	f104 0b1a 	add.w	fp, r4, #26
 8004538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800453a:	ebaa 0303 	sub.w	r3, sl, r3
 800453e:	eba3 0309 	sub.w	r3, r3, r9
 8004542:	4543      	cmp	r3, r8
 8004544:	f77f af76 	ble.w	8004434 <_printf_float+0x214>
 8004548:	2301      	movs	r3, #1
 800454a:	465a      	mov	r2, fp
 800454c:	4631      	mov	r1, r6
 800454e:	4628      	mov	r0, r5
 8004550:	47b8      	blx	r7
 8004552:	3001      	adds	r0, #1
 8004554:	f43f aeb0 	beq.w	80042b8 <_printf_float+0x98>
 8004558:	f108 0801 	add.w	r8, r8, #1
 800455c:	e7ec      	b.n	8004538 <_printf_float+0x318>
 800455e:	4642      	mov	r2, r8
 8004560:	4631      	mov	r1, r6
 8004562:	4628      	mov	r0, r5
 8004564:	47b8      	blx	r7
 8004566:	3001      	adds	r0, #1
 8004568:	d1c1      	bne.n	80044ee <_printf_float+0x2ce>
 800456a:	e6a5      	b.n	80042b8 <_printf_float+0x98>
 800456c:	2301      	movs	r3, #1
 800456e:	4631      	mov	r1, r6
 8004570:	4628      	mov	r0, r5
 8004572:	9206      	str	r2, [sp, #24]
 8004574:	47b8      	blx	r7
 8004576:	3001      	adds	r0, #1
 8004578:	f43f ae9e 	beq.w	80042b8 <_printf_float+0x98>
 800457c:	9b07      	ldr	r3, [sp, #28]
 800457e:	9a06      	ldr	r2, [sp, #24]
 8004580:	3301      	adds	r3, #1
 8004582:	9307      	str	r3, [sp, #28]
 8004584:	e7b9      	b.n	80044fa <_printf_float+0x2da>
 8004586:	9b05      	ldr	r3, [sp, #20]
 8004588:	465a      	mov	r2, fp
 800458a:	4631      	mov	r1, r6
 800458c:	4628      	mov	r0, r5
 800458e:	47b8      	blx	r7
 8004590:	3001      	adds	r0, #1
 8004592:	d1bf      	bne.n	8004514 <_printf_float+0x2f4>
 8004594:	e690      	b.n	80042b8 <_printf_float+0x98>
 8004596:	9a06      	ldr	r2, [sp, #24]
 8004598:	464b      	mov	r3, r9
 800459a:	4442      	add	r2, r8
 800459c:	4631      	mov	r1, r6
 800459e:	4628      	mov	r0, r5
 80045a0:	47b8      	blx	r7
 80045a2:	3001      	adds	r0, #1
 80045a4:	d1c2      	bne.n	800452c <_printf_float+0x30c>
 80045a6:	e687      	b.n	80042b8 <_printf_float+0x98>
 80045a8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80045ac:	f1b9 0f01 	cmp.w	r9, #1
 80045b0:	dc01      	bgt.n	80045b6 <_printf_float+0x396>
 80045b2:	07db      	lsls	r3, r3, #31
 80045b4:	d536      	bpl.n	8004624 <_printf_float+0x404>
 80045b6:	2301      	movs	r3, #1
 80045b8:	4642      	mov	r2, r8
 80045ba:	4631      	mov	r1, r6
 80045bc:	4628      	mov	r0, r5
 80045be:	47b8      	blx	r7
 80045c0:	3001      	adds	r0, #1
 80045c2:	f43f ae79 	beq.w	80042b8 <_printf_float+0x98>
 80045c6:	9b05      	ldr	r3, [sp, #20]
 80045c8:	465a      	mov	r2, fp
 80045ca:	4631      	mov	r1, r6
 80045cc:	4628      	mov	r0, r5
 80045ce:	47b8      	blx	r7
 80045d0:	3001      	adds	r0, #1
 80045d2:	f43f ae71 	beq.w	80042b8 <_printf_float+0x98>
 80045d6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80045da:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80045de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045e2:	f109 39ff 	add.w	r9, r9, #4294967295
 80045e6:	d018      	beq.n	800461a <_printf_float+0x3fa>
 80045e8:	464b      	mov	r3, r9
 80045ea:	f108 0201 	add.w	r2, r8, #1
 80045ee:	4631      	mov	r1, r6
 80045f0:	4628      	mov	r0, r5
 80045f2:	47b8      	blx	r7
 80045f4:	3001      	adds	r0, #1
 80045f6:	d10c      	bne.n	8004612 <_printf_float+0x3f2>
 80045f8:	e65e      	b.n	80042b8 <_printf_float+0x98>
 80045fa:	2301      	movs	r3, #1
 80045fc:	465a      	mov	r2, fp
 80045fe:	4631      	mov	r1, r6
 8004600:	4628      	mov	r0, r5
 8004602:	47b8      	blx	r7
 8004604:	3001      	adds	r0, #1
 8004606:	f43f ae57 	beq.w	80042b8 <_printf_float+0x98>
 800460a:	f108 0801 	add.w	r8, r8, #1
 800460e:	45c8      	cmp	r8, r9
 8004610:	dbf3      	blt.n	80045fa <_printf_float+0x3da>
 8004612:	4653      	mov	r3, sl
 8004614:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004618:	e6dc      	b.n	80043d4 <_printf_float+0x1b4>
 800461a:	f04f 0800 	mov.w	r8, #0
 800461e:	f104 0b1a 	add.w	fp, r4, #26
 8004622:	e7f4      	b.n	800460e <_printf_float+0x3ee>
 8004624:	2301      	movs	r3, #1
 8004626:	4642      	mov	r2, r8
 8004628:	e7e1      	b.n	80045ee <_printf_float+0x3ce>
 800462a:	2301      	movs	r3, #1
 800462c:	464a      	mov	r2, r9
 800462e:	4631      	mov	r1, r6
 8004630:	4628      	mov	r0, r5
 8004632:	47b8      	blx	r7
 8004634:	3001      	adds	r0, #1
 8004636:	f43f ae3f 	beq.w	80042b8 <_printf_float+0x98>
 800463a:	f108 0801 	add.w	r8, r8, #1
 800463e:	68e3      	ldr	r3, [r4, #12]
 8004640:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004642:	1a5b      	subs	r3, r3, r1
 8004644:	4543      	cmp	r3, r8
 8004646:	dcf0      	bgt.n	800462a <_printf_float+0x40a>
 8004648:	e6f8      	b.n	800443c <_printf_float+0x21c>
 800464a:	f04f 0800 	mov.w	r8, #0
 800464e:	f104 0919 	add.w	r9, r4, #25
 8004652:	e7f4      	b.n	800463e <_printf_float+0x41e>

08004654 <_printf_common>:
 8004654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004658:	4616      	mov	r6, r2
 800465a:	4698      	mov	r8, r3
 800465c:	688a      	ldr	r2, [r1, #8]
 800465e:	690b      	ldr	r3, [r1, #16]
 8004660:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004664:	4293      	cmp	r3, r2
 8004666:	bfb8      	it	lt
 8004668:	4613      	movlt	r3, r2
 800466a:	6033      	str	r3, [r6, #0]
 800466c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004670:	4607      	mov	r7, r0
 8004672:	460c      	mov	r4, r1
 8004674:	b10a      	cbz	r2, 800467a <_printf_common+0x26>
 8004676:	3301      	adds	r3, #1
 8004678:	6033      	str	r3, [r6, #0]
 800467a:	6823      	ldr	r3, [r4, #0]
 800467c:	0699      	lsls	r1, r3, #26
 800467e:	bf42      	ittt	mi
 8004680:	6833      	ldrmi	r3, [r6, #0]
 8004682:	3302      	addmi	r3, #2
 8004684:	6033      	strmi	r3, [r6, #0]
 8004686:	6825      	ldr	r5, [r4, #0]
 8004688:	f015 0506 	ands.w	r5, r5, #6
 800468c:	d106      	bne.n	800469c <_printf_common+0x48>
 800468e:	f104 0a19 	add.w	sl, r4, #25
 8004692:	68e3      	ldr	r3, [r4, #12]
 8004694:	6832      	ldr	r2, [r6, #0]
 8004696:	1a9b      	subs	r3, r3, r2
 8004698:	42ab      	cmp	r3, r5
 800469a:	dc26      	bgt.n	80046ea <_printf_common+0x96>
 800469c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80046a0:	6822      	ldr	r2, [r4, #0]
 80046a2:	3b00      	subs	r3, #0
 80046a4:	bf18      	it	ne
 80046a6:	2301      	movne	r3, #1
 80046a8:	0692      	lsls	r2, r2, #26
 80046aa:	d42b      	bmi.n	8004704 <_printf_common+0xb0>
 80046ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80046b0:	4641      	mov	r1, r8
 80046b2:	4638      	mov	r0, r7
 80046b4:	47c8      	blx	r9
 80046b6:	3001      	adds	r0, #1
 80046b8:	d01e      	beq.n	80046f8 <_printf_common+0xa4>
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	6922      	ldr	r2, [r4, #16]
 80046be:	f003 0306 	and.w	r3, r3, #6
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	bf02      	ittt	eq
 80046c6:	68e5      	ldreq	r5, [r4, #12]
 80046c8:	6833      	ldreq	r3, [r6, #0]
 80046ca:	1aed      	subeq	r5, r5, r3
 80046cc:	68a3      	ldr	r3, [r4, #8]
 80046ce:	bf0c      	ite	eq
 80046d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046d4:	2500      	movne	r5, #0
 80046d6:	4293      	cmp	r3, r2
 80046d8:	bfc4      	itt	gt
 80046da:	1a9b      	subgt	r3, r3, r2
 80046dc:	18ed      	addgt	r5, r5, r3
 80046de:	2600      	movs	r6, #0
 80046e0:	341a      	adds	r4, #26
 80046e2:	42b5      	cmp	r5, r6
 80046e4:	d11a      	bne.n	800471c <_printf_common+0xc8>
 80046e6:	2000      	movs	r0, #0
 80046e8:	e008      	b.n	80046fc <_printf_common+0xa8>
 80046ea:	2301      	movs	r3, #1
 80046ec:	4652      	mov	r2, sl
 80046ee:	4641      	mov	r1, r8
 80046f0:	4638      	mov	r0, r7
 80046f2:	47c8      	blx	r9
 80046f4:	3001      	adds	r0, #1
 80046f6:	d103      	bne.n	8004700 <_printf_common+0xac>
 80046f8:	f04f 30ff 	mov.w	r0, #4294967295
 80046fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004700:	3501      	adds	r5, #1
 8004702:	e7c6      	b.n	8004692 <_printf_common+0x3e>
 8004704:	18e1      	adds	r1, r4, r3
 8004706:	1c5a      	adds	r2, r3, #1
 8004708:	2030      	movs	r0, #48	@ 0x30
 800470a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800470e:	4422      	add	r2, r4
 8004710:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004714:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004718:	3302      	adds	r3, #2
 800471a:	e7c7      	b.n	80046ac <_printf_common+0x58>
 800471c:	2301      	movs	r3, #1
 800471e:	4622      	mov	r2, r4
 8004720:	4641      	mov	r1, r8
 8004722:	4638      	mov	r0, r7
 8004724:	47c8      	blx	r9
 8004726:	3001      	adds	r0, #1
 8004728:	d0e6      	beq.n	80046f8 <_printf_common+0xa4>
 800472a:	3601      	adds	r6, #1
 800472c:	e7d9      	b.n	80046e2 <_printf_common+0x8e>
	...

08004730 <_printf_i>:
 8004730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004734:	7e0f      	ldrb	r7, [r1, #24]
 8004736:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004738:	2f78      	cmp	r7, #120	@ 0x78
 800473a:	4691      	mov	r9, r2
 800473c:	4680      	mov	r8, r0
 800473e:	460c      	mov	r4, r1
 8004740:	469a      	mov	sl, r3
 8004742:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004746:	d807      	bhi.n	8004758 <_printf_i+0x28>
 8004748:	2f62      	cmp	r7, #98	@ 0x62
 800474a:	d80a      	bhi.n	8004762 <_printf_i+0x32>
 800474c:	2f00      	cmp	r7, #0
 800474e:	f000 80d2 	beq.w	80048f6 <_printf_i+0x1c6>
 8004752:	2f58      	cmp	r7, #88	@ 0x58
 8004754:	f000 80b9 	beq.w	80048ca <_printf_i+0x19a>
 8004758:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800475c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004760:	e03a      	b.n	80047d8 <_printf_i+0xa8>
 8004762:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004766:	2b15      	cmp	r3, #21
 8004768:	d8f6      	bhi.n	8004758 <_printf_i+0x28>
 800476a:	a101      	add	r1, pc, #4	@ (adr r1, 8004770 <_printf_i+0x40>)
 800476c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004770:	080047c9 	.word	0x080047c9
 8004774:	080047dd 	.word	0x080047dd
 8004778:	08004759 	.word	0x08004759
 800477c:	08004759 	.word	0x08004759
 8004780:	08004759 	.word	0x08004759
 8004784:	08004759 	.word	0x08004759
 8004788:	080047dd 	.word	0x080047dd
 800478c:	08004759 	.word	0x08004759
 8004790:	08004759 	.word	0x08004759
 8004794:	08004759 	.word	0x08004759
 8004798:	08004759 	.word	0x08004759
 800479c:	080048dd 	.word	0x080048dd
 80047a0:	08004807 	.word	0x08004807
 80047a4:	08004897 	.word	0x08004897
 80047a8:	08004759 	.word	0x08004759
 80047ac:	08004759 	.word	0x08004759
 80047b0:	080048ff 	.word	0x080048ff
 80047b4:	08004759 	.word	0x08004759
 80047b8:	08004807 	.word	0x08004807
 80047bc:	08004759 	.word	0x08004759
 80047c0:	08004759 	.word	0x08004759
 80047c4:	0800489f 	.word	0x0800489f
 80047c8:	6833      	ldr	r3, [r6, #0]
 80047ca:	1d1a      	adds	r2, r3, #4
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	6032      	str	r2, [r6, #0]
 80047d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80047d8:	2301      	movs	r3, #1
 80047da:	e09d      	b.n	8004918 <_printf_i+0x1e8>
 80047dc:	6833      	ldr	r3, [r6, #0]
 80047de:	6820      	ldr	r0, [r4, #0]
 80047e0:	1d19      	adds	r1, r3, #4
 80047e2:	6031      	str	r1, [r6, #0]
 80047e4:	0606      	lsls	r6, r0, #24
 80047e6:	d501      	bpl.n	80047ec <_printf_i+0xbc>
 80047e8:	681d      	ldr	r5, [r3, #0]
 80047ea:	e003      	b.n	80047f4 <_printf_i+0xc4>
 80047ec:	0645      	lsls	r5, r0, #25
 80047ee:	d5fb      	bpl.n	80047e8 <_printf_i+0xb8>
 80047f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80047f4:	2d00      	cmp	r5, #0
 80047f6:	da03      	bge.n	8004800 <_printf_i+0xd0>
 80047f8:	232d      	movs	r3, #45	@ 0x2d
 80047fa:	426d      	negs	r5, r5
 80047fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004800:	4859      	ldr	r0, [pc, #356]	@ (8004968 <_printf_i+0x238>)
 8004802:	230a      	movs	r3, #10
 8004804:	e011      	b.n	800482a <_printf_i+0xfa>
 8004806:	6821      	ldr	r1, [r4, #0]
 8004808:	6833      	ldr	r3, [r6, #0]
 800480a:	0608      	lsls	r0, r1, #24
 800480c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004810:	d402      	bmi.n	8004818 <_printf_i+0xe8>
 8004812:	0649      	lsls	r1, r1, #25
 8004814:	bf48      	it	mi
 8004816:	b2ad      	uxthmi	r5, r5
 8004818:	2f6f      	cmp	r7, #111	@ 0x6f
 800481a:	4853      	ldr	r0, [pc, #332]	@ (8004968 <_printf_i+0x238>)
 800481c:	6033      	str	r3, [r6, #0]
 800481e:	bf14      	ite	ne
 8004820:	230a      	movne	r3, #10
 8004822:	2308      	moveq	r3, #8
 8004824:	2100      	movs	r1, #0
 8004826:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800482a:	6866      	ldr	r6, [r4, #4]
 800482c:	60a6      	str	r6, [r4, #8]
 800482e:	2e00      	cmp	r6, #0
 8004830:	bfa2      	ittt	ge
 8004832:	6821      	ldrge	r1, [r4, #0]
 8004834:	f021 0104 	bicge.w	r1, r1, #4
 8004838:	6021      	strge	r1, [r4, #0]
 800483a:	b90d      	cbnz	r5, 8004840 <_printf_i+0x110>
 800483c:	2e00      	cmp	r6, #0
 800483e:	d04b      	beq.n	80048d8 <_printf_i+0x1a8>
 8004840:	4616      	mov	r6, r2
 8004842:	fbb5 f1f3 	udiv	r1, r5, r3
 8004846:	fb03 5711 	mls	r7, r3, r1, r5
 800484a:	5dc7      	ldrb	r7, [r0, r7]
 800484c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004850:	462f      	mov	r7, r5
 8004852:	42bb      	cmp	r3, r7
 8004854:	460d      	mov	r5, r1
 8004856:	d9f4      	bls.n	8004842 <_printf_i+0x112>
 8004858:	2b08      	cmp	r3, #8
 800485a:	d10b      	bne.n	8004874 <_printf_i+0x144>
 800485c:	6823      	ldr	r3, [r4, #0]
 800485e:	07df      	lsls	r7, r3, #31
 8004860:	d508      	bpl.n	8004874 <_printf_i+0x144>
 8004862:	6923      	ldr	r3, [r4, #16]
 8004864:	6861      	ldr	r1, [r4, #4]
 8004866:	4299      	cmp	r1, r3
 8004868:	bfde      	ittt	le
 800486a:	2330      	movle	r3, #48	@ 0x30
 800486c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004870:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004874:	1b92      	subs	r2, r2, r6
 8004876:	6122      	str	r2, [r4, #16]
 8004878:	f8cd a000 	str.w	sl, [sp]
 800487c:	464b      	mov	r3, r9
 800487e:	aa03      	add	r2, sp, #12
 8004880:	4621      	mov	r1, r4
 8004882:	4640      	mov	r0, r8
 8004884:	f7ff fee6 	bl	8004654 <_printf_common>
 8004888:	3001      	adds	r0, #1
 800488a:	d14a      	bne.n	8004922 <_printf_i+0x1f2>
 800488c:	f04f 30ff 	mov.w	r0, #4294967295
 8004890:	b004      	add	sp, #16
 8004892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004896:	6823      	ldr	r3, [r4, #0]
 8004898:	f043 0320 	orr.w	r3, r3, #32
 800489c:	6023      	str	r3, [r4, #0]
 800489e:	4833      	ldr	r0, [pc, #204]	@ (800496c <_printf_i+0x23c>)
 80048a0:	2778      	movs	r7, #120	@ 0x78
 80048a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80048a6:	6823      	ldr	r3, [r4, #0]
 80048a8:	6831      	ldr	r1, [r6, #0]
 80048aa:	061f      	lsls	r7, r3, #24
 80048ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80048b0:	d402      	bmi.n	80048b8 <_printf_i+0x188>
 80048b2:	065f      	lsls	r7, r3, #25
 80048b4:	bf48      	it	mi
 80048b6:	b2ad      	uxthmi	r5, r5
 80048b8:	6031      	str	r1, [r6, #0]
 80048ba:	07d9      	lsls	r1, r3, #31
 80048bc:	bf44      	itt	mi
 80048be:	f043 0320 	orrmi.w	r3, r3, #32
 80048c2:	6023      	strmi	r3, [r4, #0]
 80048c4:	b11d      	cbz	r5, 80048ce <_printf_i+0x19e>
 80048c6:	2310      	movs	r3, #16
 80048c8:	e7ac      	b.n	8004824 <_printf_i+0xf4>
 80048ca:	4827      	ldr	r0, [pc, #156]	@ (8004968 <_printf_i+0x238>)
 80048cc:	e7e9      	b.n	80048a2 <_printf_i+0x172>
 80048ce:	6823      	ldr	r3, [r4, #0]
 80048d0:	f023 0320 	bic.w	r3, r3, #32
 80048d4:	6023      	str	r3, [r4, #0]
 80048d6:	e7f6      	b.n	80048c6 <_printf_i+0x196>
 80048d8:	4616      	mov	r6, r2
 80048da:	e7bd      	b.n	8004858 <_printf_i+0x128>
 80048dc:	6833      	ldr	r3, [r6, #0]
 80048de:	6825      	ldr	r5, [r4, #0]
 80048e0:	6961      	ldr	r1, [r4, #20]
 80048e2:	1d18      	adds	r0, r3, #4
 80048e4:	6030      	str	r0, [r6, #0]
 80048e6:	062e      	lsls	r6, r5, #24
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	d501      	bpl.n	80048f0 <_printf_i+0x1c0>
 80048ec:	6019      	str	r1, [r3, #0]
 80048ee:	e002      	b.n	80048f6 <_printf_i+0x1c6>
 80048f0:	0668      	lsls	r0, r5, #25
 80048f2:	d5fb      	bpl.n	80048ec <_printf_i+0x1bc>
 80048f4:	8019      	strh	r1, [r3, #0]
 80048f6:	2300      	movs	r3, #0
 80048f8:	6123      	str	r3, [r4, #16]
 80048fa:	4616      	mov	r6, r2
 80048fc:	e7bc      	b.n	8004878 <_printf_i+0x148>
 80048fe:	6833      	ldr	r3, [r6, #0]
 8004900:	1d1a      	adds	r2, r3, #4
 8004902:	6032      	str	r2, [r6, #0]
 8004904:	681e      	ldr	r6, [r3, #0]
 8004906:	6862      	ldr	r2, [r4, #4]
 8004908:	2100      	movs	r1, #0
 800490a:	4630      	mov	r0, r6
 800490c:	f7fb fc98 	bl	8000240 <memchr>
 8004910:	b108      	cbz	r0, 8004916 <_printf_i+0x1e6>
 8004912:	1b80      	subs	r0, r0, r6
 8004914:	6060      	str	r0, [r4, #4]
 8004916:	6863      	ldr	r3, [r4, #4]
 8004918:	6123      	str	r3, [r4, #16]
 800491a:	2300      	movs	r3, #0
 800491c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004920:	e7aa      	b.n	8004878 <_printf_i+0x148>
 8004922:	6923      	ldr	r3, [r4, #16]
 8004924:	4632      	mov	r2, r6
 8004926:	4649      	mov	r1, r9
 8004928:	4640      	mov	r0, r8
 800492a:	47d0      	blx	sl
 800492c:	3001      	adds	r0, #1
 800492e:	d0ad      	beq.n	800488c <_printf_i+0x15c>
 8004930:	6823      	ldr	r3, [r4, #0]
 8004932:	079b      	lsls	r3, r3, #30
 8004934:	d413      	bmi.n	800495e <_printf_i+0x22e>
 8004936:	68e0      	ldr	r0, [r4, #12]
 8004938:	9b03      	ldr	r3, [sp, #12]
 800493a:	4298      	cmp	r0, r3
 800493c:	bfb8      	it	lt
 800493e:	4618      	movlt	r0, r3
 8004940:	e7a6      	b.n	8004890 <_printf_i+0x160>
 8004942:	2301      	movs	r3, #1
 8004944:	4632      	mov	r2, r6
 8004946:	4649      	mov	r1, r9
 8004948:	4640      	mov	r0, r8
 800494a:	47d0      	blx	sl
 800494c:	3001      	adds	r0, #1
 800494e:	d09d      	beq.n	800488c <_printf_i+0x15c>
 8004950:	3501      	adds	r5, #1
 8004952:	68e3      	ldr	r3, [r4, #12]
 8004954:	9903      	ldr	r1, [sp, #12]
 8004956:	1a5b      	subs	r3, r3, r1
 8004958:	42ab      	cmp	r3, r5
 800495a:	dcf2      	bgt.n	8004942 <_printf_i+0x212>
 800495c:	e7eb      	b.n	8004936 <_printf_i+0x206>
 800495e:	2500      	movs	r5, #0
 8004960:	f104 0619 	add.w	r6, r4, #25
 8004964:	e7f5      	b.n	8004952 <_printf_i+0x222>
 8004966:	bf00      	nop
 8004968:	08006d26 	.word	0x08006d26
 800496c:	08006d37 	.word	0x08006d37

08004970 <std>:
 8004970:	2300      	movs	r3, #0
 8004972:	b510      	push	{r4, lr}
 8004974:	4604      	mov	r4, r0
 8004976:	e9c0 3300 	strd	r3, r3, [r0]
 800497a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800497e:	6083      	str	r3, [r0, #8]
 8004980:	8181      	strh	r1, [r0, #12]
 8004982:	6643      	str	r3, [r0, #100]	@ 0x64
 8004984:	81c2      	strh	r2, [r0, #14]
 8004986:	6183      	str	r3, [r0, #24]
 8004988:	4619      	mov	r1, r3
 800498a:	2208      	movs	r2, #8
 800498c:	305c      	adds	r0, #92	@ 0x5c
 800498e:	f000 f914 	bl	8004bba <memset>
 8004992:	4b0d      	ldr	r3, [pc, #52]	@ (80049c8 <std+0x58>)
 8004994:	6263      	str	r3, [r4, #36]	@ 0x24
 8004996:	4b0d      	ldr	r3, [pc, #52]	@ (80049cc <std+0x5c>)
 8004998:	62a3      	str	r3, [r4, #40]	@ 0x28
 800499a:	4b0d      	ldr	r3, [pc, #52]	@ (80049d0 <std+0x60>)
 800499c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800499e:	4b0d      	ldr	r3, [pc, #52]	@ (80049d4 <std+0x64>)
 80049a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80049a2:	4b0d      	ldr	r3, [pc, #52]	@ (80049d8 <std+0x68>)
 80049a4:	6224      	str	r4, [r4, #32]
 80049a6:	429c      	cmp	r4, r3
 80049a8:	d006      	beq.n	80049b8 <std+0x48>
 80049aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80049ae:	4294      	cmp	r4, r2
 80049b0:	d002      	beq.n	80049b8 <std+0x48>
 80049b2:	33d0      	adds	r3, #208	@ 0xd0
 80049b4:	429c      	cmp	r4, r3
 80049b6:	d105      	bne.n	80049c4 <std+0x54>
 80049b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80049bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049c0:	f000 b978 	b.w	8004cb4 <__retarget_lock_init_recursive>
 80049c4:	bd10      	pop	{r4, pc}
 80049c6:	bf00      	nop
 80049c8:	08004b35 	.word	0x08004b35
 80049cc:	08004b57 	.word	0x08004b57
 80049d0:	08004b8f 	.word	0x08004b8f
 80049d4:	08004bb3 	.word	0x08004bb3
 80049d8:	2000038c 	.word	0x2000038c

080049dc <stdio_exit_handler>:
 80049dc:	4a02      	ldr	r2, [pc, #8]	@ (80049e8 <stdio_exit_handler+0xc>)
 80049de:	4903      	ldr	r1, [pc, #12]	@ (80049ec <stdio_exit_handler+0x10>)
 80049e0:	4803      	ldr	r0, [pc, #12]	@ (80049f0 <stdio_exit_handler+0x14>)
 80049e2:	f000 b869 	b.w	8004ab8 <_fwalk_sglue>
 80049e6:	bf00      	nop
 80049e8:	2000000c 	.word	0x2000000c
 80049ec:	08006539 	.word	0x08006539
 80049f0:	2000001c 	.word	0x2000001c

080049f4 <cleanup_stdio>:
 80049f4:	6841      	ldr	r1, [r0, #4]
 80049f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004a28 <cleanup_stdio+0x34>)
 80049f8:	4299      	cmp	r1, r3
 80049fa:	b510      	push	{r4, lr}
 80049fc:	4604      	mov	r4, r0
 80049fe:	d001      	beq.n	8004a04 <cleanup_stdio+0x10>
 8004a00:	f001 fd9a 	bl	8006538 <_fflush_r>
 8004a04:	68a1      	ldr	r1, [r4, #8]
 8004a06:	4b09      	ldr	r3, [pc, #36]	@ (8004a2c <cleanup_stdio+0x38>)
 8004a08:	4299      	cmp	r1, r3
 8004a0a:	d002      	beq.n	8004a12 <cleanup_stdio+0x1e>
 8004a0c:	4620      	mov	r0, r4
 8004a0e:	f001 fd93 	bl	8006538 <_fflush_r>
 8004a12:	68e1      	ldr	r1, [r4, #12]
 8004a14:	4b06      	ldr	r3, [pc, #24]	@ (8004a30 <cleanup_stdio+0x3c>)
 8004a16:	4299      	cmp	r1, r3
 8004a18:	d004      	beq.n	8004a24 <cleanup_stdio+0x30>
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a20:	f001 bd8a 	b.w	8006538 <_fflush_r>
 8004a24:	bd10      	pop	{r4, pc}
 8004a26:	bf00      	nop
 8004a28:	2000038c 	.word	0x2000038c
 8004a2c:	200003f4 	.word	0x200003f4
 8004a30:	2000045c 	.word	0x2000045c

08004a34 <global_stdio_init.part.0>:
 8004a34:	b510      	push	{r4, lr}
 8004a36:	4b0b      	ldr	r3, [pc, #44]	@ (8004a64 <global_stdio_init.part.0+0x30>)
 8004a38:	4c0b      	ldr	r4, [pc, #44]	@ (8004a68 <global_stdio_init.part.0+0x34>)
 8004a3a:	4a0c      	ldr	r2, [pc, #48]	@ (8004a6c <global_stdio_init.part.0+0x38>)
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	4620      	mov	r0, r4
 8004a40:	2200      	movs	r2, #0
 8004a42:	2104      	movs	r1, #4
 8004a44:	f7ff ff94 	bl	8004970 <std>
 8004a48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	2109      	movs	r1, #9
 8004a50:	f7ff ff8e 	bl	8004970 <std>
 8004a54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004a58:	2202      	movs	r2, #2
 8004a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a5e:	2112      	movs	r1, #18
 8004a60:	f7ff bf86 	b.w	8004970 <std>
 8004a64:	200004c4 	.word	0x200004c4
 8004a68:	2000038c 	.word	0x2000038c
 8004a6c:	080049dd 	.word	0x080049dd

08004a70 <__sfp_lock_acquire>:
 8004a70:	4801      	ldr	r0, [pc, #4]	@ (8004a78 <__sfp_lock_acquire+0x8>)
 8004a72:	f000 b920 	b.w	8004cb6 <__retarget_lock_acquire_recursive>
 8004a76:	bf00      	nop
 8004a78:	200004cd 	.word	0x200004cd

08004a7c <__sfp_lock_release>:
 8004a7c:	4801      	ldr	r0, [pc, #4]	@ (8004a84 <__sfp_lock_release+0x8>)
 8004a7e:	f000 b91b 	b.w	8004cb8 <__retarget_lock_release_recursive>
 8004a82:	bf00      	nop
 8004a84:	200004cd 	.word	0x200004cd

08004a88 <__sinit>:
 8004a88:	b510      	push	{r4, lr}
 8004a8a:	4604      	mov	r4, r0
 8004a8c:	f7ff fff0 	bl	8004a70 <__sfp_lock_acquire>
 8004a90:	6a23      	ldr	r3, [r4, #32]
 8004a92:	b11b      	cbz	r3, 8004a9c <__sinit+0x14>
 8004a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a98:	f7ff bff0 	b.w	8004a7c <__sfp_lock_release>
 8004a9c:	4b04      	ldr	r3, [pc, #16]	@ (8004ab0 <__sinit+0x28>)
 8004a9e:	6223      	str	r3, [r4, #32]
 8004aa0:	4b04      	ldr	r3, [pc, #16]	@ (8004ab4 <__sinit+0x2c>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1f5      	bne.n	8004a94 <__sinit+0xc>
 8004aa8:	f7ff ffc4 	bl	8004a34 <global_stdio_init.part.0>
 8004aac:	e7f2      	b.n	8004a94 <__sinit+0xc>
 8004aae:	bf00      	nop
 8004ab0:	080049f5 	.word	0x080049f5
 8004ab4:	200004c4 	.word	0x200004c4

08004ab8 <_fwalk_sglue>:
 8004ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004abc:	4607      	mov	r7, r0
 8004abe:	4688      	mov	r8, r1
 8004ac0:	4614      	mov	r4, r2
 8004ac2:	2600      	movs	r6, #0
 8004ac4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ac8:	f1b9 0901 	subs.w	r9, r9, #1
 8004acc:	d505      	bpl.n	8004ada <_fwalk_sglue+0x22>
 8004ace:	6824      	ldr	r4, [r4, #0]
 8004ad0:	2c00      	cmp	r4, #0
 8004ad2:	d1f7      	bne.n	8004ac4 <_fwalk_sglue+0xc>
 8004ad4:	4630      	mov	r0, r6
 8004ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ada:	89ab      	ldrh	r3, [r5, #12]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d907      	bls.n	8004af0 <_fwalk_sglue+0x38>
 8004ae0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	d003      	beq.n	8004af0 <_fwalk_sglue+0x38>
 8004ae8:	4629      	mov	r1, r5
 8004aea:	4638      	mov	r0, r7
 8004aec:	47c0      	blx	r8
 8004aee:	4306      	orrs	r6, r0
 8004af0:	3568      	adds	r5, #104	@ 0x68
 8004af2:	e7e9      	b.n	8004ac8 <_fwalk_sglue+0x10>

08004af4 <siprintf>:
 8004af4:	b40e      	push	{r1, r2, r3}
 8004af6:	b500      	push	{lr}
 8004af8:	b09c      	sub	sp, #112	@ 0x70
 8004afa:	ab1d      	add	r3, sp, #116	@ 0x74
 8004afc:	9002      	str	r0, [sp, #8]
 8004afe:	9006      	str	r0, [sp, #24]
 8004b00:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004b04:	4809      	ldr	r0, [pc, #36]	@ (8004b2c <siprintf+0x38>)
 8004b06:	9107      	str	r1, [sp, #28]
 8004b08:	9104      	str	r1, [sp, #16]
 8004b0a:	4909      	ldr	r1, [pc, #36]	@ (8004b30 <siprintf+0x3c>)
 8004b0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b10:	9105      	str	r1, [sp, #20]
 8004b12:	6800      	ldr	r0, [r0, #0]
 8004b14:	9301      	str	r3, [sp, #4]
 8004b16:	a902      	add	r1, sp, #8
 8004b18:	f001 fb8e 	bl	8006238 <_svfiprintf_r>
 8004b1c:	9b02      	ldr	r3, [sp, #8]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	701a      	strb	r2, [r3, #0]
 8004b22:	b01c      	add	sp, #112	@ 0x70
 8004b24:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b28:	b003      	add	sp, #12
 8004b2a:	4770      	bx	lr
 8004b2c:	20000018 	.word	0x20000018
 8004b30:	ffff0208 	.word	0xffff0208

08004b34 <__sread>:
 8004b34:	b510      	push	{r4, lr}
 8004b36:	460c      	mov	r4, r1
 8004b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b3c:	f000 f86c 	bl	8004c18 <_read_r>
 8004b40:	2800      	cmp	r0, #0
 8004b42:	bfab      	itete	ge
 8004b44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004b46:	89a3      	ldrhlt	r3, [r4, #12]
 8004b48:	181b      	addge	r3, r3, r0
 8004b4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004b4e:	bfac      	ite	ge
 8004b50:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004b52:	81a3      	strhlt	r3, [r4, #12]
 8004b54:	bd10      	pop	{r4, pc}

08004b56 <__swrite>:
 8004b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b5a:	461f      	mov	r7, r3
 8004b5c:	898b      	ldrh	r3, [r1, #12]
 8004b5e:	05db      	lsls	r3, r3, #23
 8004b60:	4605      	mov	r5, r0
 8004b62:	460c      	mov	r4, r1
 8004b64:	4616      	mov	r6, r2
 8004b66:	d505      	bpl.n	8004b74 <__swrite+0x1e>
 8004b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f000 f840 	bl	8004bf4 <_lseek_r>
 8004b74:	89a3      	ldrh	r3, [r4, #12]
 8004b76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b7e:	81a3      	strh	r3, [r4, #12]
 8004b80:	4632      	mov	r2, r6
 8004b82:	463b      	mov	r3, r7
 8004b84:	4628      	mov	r0, r5
 8004b86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b8a:	f000 b857 	b.w	8004c3c <_write_r>

08004b8e <__sseek>:
 8004b8e:	b510      	push	{r4, lr}
 8004b90:	460c      	mov	r4, r1
 8004b92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b96:	f000 f82d 	bl	8004bf4 <_lseek_r>
 8004b9a:	1c43      	adds	r3, r0, #1
 8004b9c:	89a3      	ldrh	r3, [r4, #12]
 8004b9e:	bf15      	itete	ne
 8004ba0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004ba2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004ba6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004baa:	81a3      	strheq	r3, [r4, #12]
 8004bac:	bf18      	it	ne
 8004bae:	81a3      	strhne	r3, [r4, #12]
 8004bb0:	bd10      	pop	{r4, pc}

08004bb2 <__sclose>:
 8004bb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bb6:	f000 b80d 	b.w	8004bd4 <_close_r>

08004bba <memset>:
 8004bba:	4402      	add	r2, r0
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d100      	bne.n	8004bc4 <memset+0xa>
 8004bc2:	4770      	bx	lr
 8004bc4:	f803 1b01 	strb.w	r1, [r3], #1
 8004bc8:	e7f9      	b.n	8004bbe <memset+0x4>
	...

08004bcc <_localeconv_r>:
 8004bcc:	4800      	ldr	r0, [pc, #0]	@ (8004bd0 <_localeconv_r+0x4>)
 8004bce:	4770      	bx	lr
 8004bd0:	20000158 	.word	0x20000158

08004bd4 <_close_r>:
 8004bd4:	b538      	push	{r3, r4, r5, lr}
 8004bd6:	4d06      	ldr	r5, [pc, #24]	@ (8004bf0 <_close_r+0x1c>)
 8004bd8:	2300      	movs	r3, #0
 8004bda:	4604      	mov	r4, r0
 8004bdc:	4608      	mov	r0, r1
 8004bde:	602b      	str	r3, [r5, #0]
 8004be0:	f7fc fb68 	bl	80012b4 <_close>
 8004be4:	1c43      	adds	r3, r0, #1
 8004be6:	d102      	bne.n	8004bee <_close_r+0x1a>
 8004be8:	682b      	ldr	r3, [r5, #0]
 8004bea:	b103      	cbz	r3, 8004bee <_close_r+0x1a>
 8004bec:	6023      	str	r3, [r4, #0]
 8004bee:	bd38      	pop	{r3, r4, r5, pc}
 8004bf0:	200004c8 	.word	0x200004c8

08004bf4 <_lseek_r>:
 8004bf4:	b538      	push	{r3, r4, r5, lr}
 8004bf6:	4d07      	ldr	r5, [pc, #28]	@ (8004c14 <_lseek_r+0x20>)
 8004bf8:	4604      	mov	r4, r0
 8004bfa:	4608      	mov	r0, r1
 8004bfc:	4611      	mov	r1, r2
 8004bfe:	2200      	movs	r2, #0
 8004c00:	602a      	str	r2, [r5, #0]
 8004c02:	461a      	mov	r2, r3
 8004c04:	f7fc fb7d 	bl	8001302 <_lseek>
 8004c08:	1c43      	adds	r3, r0, #1
 8004c0a:	d102      	bne.n	8004c12 <_lseek_r+0x1e>
 8004c0c:	682b      	ldr	r3, [r5, #0]
 8004c0e:	b103      	cbz	r3, 8004c12 <_lseek_r+0x1e>
 8004c10:	6023      	str	r3, [r4, #0]
 8004c12:	bd38      	pop	{r3, r4, r5, pc}
 8004c14:	200004c8 	.word	0x200004c8

08004c18 <_read_r>:
 8004c18:	b538      	push	{r3, r4, r5, lr}
 8004c1a:	4d07      	ldr	r5, [pc, #28]	@ (8004c38 <_read_r+0x20>)
 8004c1c:	4604      	mov	r4, r0
 8004c1e:	4608      	mov	r0, r1
 8004c20:	4611      	mov	r1, r2
 8004c22:	2200      	movs	r2, #0
 8004c24:	602a      	str	r2, [r5, #0]
 8004c26:	461a      	mov	r2, r3
 8004c28:	f7fc fb0b 	bl	8001242 <_read>
 8004c2c:	1c43      	adds	r3, r0, #1
 8004c2e:	d102      	bne.n	8004c36 <_read_r+0x1e>
 8004c30:	682b      	ldr	r3, [r5, #0]
 8004c32:	b103      	cbz	r3, 8004c36 <_read_r+0x1e>
 8004c34:	6023      	str	r3, [r4, #0]
 8004c36:	bd38      	pop	{r3, r4, r5, pc}
 8004c38:	200004c8 	.word	0x200004c8

08004c3c <_write_r>:
 8004c3c:	b538      	push	{r3, r4, r5, lr}
 8004c3e:	4d07      	ldr	r5, [pc, #28]	@ (8004c5c <_write_r+0x20>)
 8004c40:	4604      	mov	r4, r0
 8004c42:	4608      	mov	r0, r1
 8004c44:	4611      	mov	r1, r2
 8004c46:	2200      	movs	r2, #0
 8004c48:	602a      	str	r2, [r5, #0]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	f7fc fb16 	bl	800127c <_write>
 8004c50:	1c43      	adds	r3, r0, #1
 8004c52:	d102      	bne.n	8004c5a <_write_r+0x1e>
 8004c54:	682b      	ldr	r3, [r5, #0]
 8004c56:	b103      	cbz	r3, 8004c5a <_write_r+0x1e>
 8004c58:	6023      	str	r3, [r4, #0]
 8004c5a:	bd38      	pop	{r3, r4, r5, pc}
 8004c5c:	200004c8 	.word	0x200004c8

08004c60 <__errno>:
 8004c60:	4b01      	ldr	r3, [pc, #4]	@ (8004c68 <__errno+0x8>)
 8004c62:	6818      	ldr	r0, [r3, #0]
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	20000018 	.word	0x20000018

08004c6c <__libc_init_array>:
 8004c6c:	b570      	push	{r4, r5, r6, lr}
 8004c6e:	4d0d      	ldr	r5, [pc, #52]	@ (8004ca4 <__libc_init_array+0x38>)
 8004c70:	4c0d      	ldr	r4, [pc, #52]	@ (8004ca8 <__libc_init_array+0x3c>)
 8004c72:	1b64      	subs	r4, r4, r5
 8004c74:	10a4      	asrs	r4, r4, #2
 8004c76:	2600      	movs	r6, #0
 8004c78:	42a6      	cmp	r6, r4
 8004c7a:	d109      	bne.n	8004c90 <__libc_init_array+0x24>
 8004c7c:	4d0b      	ldr	r5, [pc, #44]	@ (8004cac <__libc_init_array+0x40>)
 8004c7e:	4c0c      	ldr	r4, [pc, #48]	@ (8004cb0 <__libc_init_array+0x44>)
 8004c80:	f001 fff8 	bl	8006c74 <_init>
 8004c84:	1b64      	subs	r4, r4, r5
 8004c86:	10a4      	asrs	r4, r4, #2
 8004c88:	2600      	movs	r6, #0
 8004c8a:	42a6      	cmp	r6, r4
 8004c8c:	d105      	bne.n	8004c9a <__libc_init_array+0x2e>
 8004c8e:	bd70      	pop	{r4, r5, r6, pc}
 8004c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c94:	4798      	blx	r3
 8004c96:	3601      	adds	r6, #1
 8004c98:	e7ee      	b.n	8004c78 <__libc_init_array+0xc>
 8004c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c9e:	4798      	blx	r3
 8004ca0:	3601      	adds	r6, #1
 8004ca2:	e7f2      	b.n	8004c8a <__libc_init_array+0x1e>
 8004ca4:	08007090 	.word	0x08007090
 8004ca8:	08007090 	.word	0x08007090
 8004cac:	08007090 	.word	0x08007090
 8004cb0:	08007098 	.word	0x08007098

08004cb4 <__retarget_lock_init_recursive>:
 8004cb4:	4770      	bx	lr

08004cb6 <__retarget_lock_acquire_recursive>:
 8004cb6:	4770      	bx	lr

08004cb8 <__retarget_lock_release_recursive>:
 8004cb8:	4770      	bx	lr

08004cba <quorem>:
 8004cba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cbe:	6903      	ldr	r3, [r0, #16]
 8004cc0:	690c      	ldr	r4, [r1, #16]
 8004cc2:	42a3      	cmp	r3, r4
 8004cc4:	4607      	mov	r7, r0
 8004cc6:	db7e      	blt.n	8004dc6 <quorem+0x10c>
 8004cc8:	3c01      	subs	r4, #1
 8004cca:	f101 0814 	add.w	r8, r1, #20
 8004cce:	00a3      	lsls	r3, r4, #2
 8004cd0:	f100 0514 	add.w	r5, r0, #20
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004cda:	9301      	str	r3, [sp, #4]
 8004cdc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004ce0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004cec:	fbb2 f6f3 	udiv	r6, r2, r3
 8004cf0:	d32e      	bcc.n	8004d50 <quorem+0x96>
 8004cf2:	f04f 0a00 	mov.w	sl, #0
 8004cf6:	46c4      	mov	ip, r8
 8004cf8:	46ae      	mov	lr, r5
 8004cfa:	46d3      	mov	fp, sl
 8004cfc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004d00:	b298      	uxth	r0, r3
 8004d02:	fb06 a000 	mla	r0, r6, r0, sl
 8004d06:	0c02      	lsrs	r2, r0, #16
 8004d08:	0c1b      	lsrs	r3, r3, #16
 8004d0a:	fb06 2303 	mla	r3, r6, r3, r2
 8004d0e:	f8de 2000 	ldr.w	r2, [lr]
 8004d12:	b280      	uxth	r0, r0
 8004d14:	b292      	uxth	r2, r2
 8004d16:	1a12      	subs	r2, r2, r0
 8004d18:	445a      	add	r2, fp
 8004d1a:	f8de 0000 	ldr.w	r0, [lr]
 8004d1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004d28:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004d2c:	b292      	uxth	r2, r2
 8004d2e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004d32:	45e1      	cmp	r9, ip
 8004d34:	f84e 2b04 	str.w	r2, [lr], #4
 8004d38:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004d3c:	d2de      	bcs.n	8004cfc <quorem+0x42>
 8004d3e:	9b00      	ldr	r3, [sp, #0]
 8004d40:	58eb      	ldr	r3, [r5, r3]
 8004d42:	b92b      	cbnz	r3, 8004d50 <quorem+0x96>
 8004d44:	9b01      	ldr	r3, [sp, #4]
 8004d46:	3b04      	subs	r3, #4
 8004d48:	429d      	cmp	r5, r3
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	d32f      	bcc.n	8004dae <quorem+0xf4>
 8004d4e:	613c      	str	r4, [r7, #16]
 8004d50:	4638      	mov	r0, r7
 8004d52:	f001 f90d 	bl	8005f70 <__mcmp>
 8004d56:	2800      	cmp	r0, #0
 8004d58:	db25      	blt.n	8004da6 <quorem+0xec>
 8004d5a:	4629      	mov	r1, r5
 8004d5c:	2000      	movs	r0, #0
 8004d5e:	f858 2b04 	ldr.w	r2, [r8], #4
 8004d62:	f8d1 c000 	ldr.w	ip, [r1]
 8004d66:	fa1f fe82 	uxth.w	lr, r2
 8004d6a:	fa1f f38c 	uxth.w	r3, ip
 8004d6e:	eba3 030e 	sub.w	r3, r3, lr
 8004d72:	4403      	add	r3, r0
 8004d74:	0c12      	lsrs	r2, r2, #16
 8004d76:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004d7a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d84:	45c1      	cmp	r9, r8
 8004d86:	f841 3b04 	str.w	r3, [r1], #4
 8004d8a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004d8e:	d2e6      	bcs.n	8004d5e <quorem+0xa4>
 8004d90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d94:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d98:	b922      	cbnz	r2, 8004da4 <quorem+0xea>
 8004d9a:	3b04      	subs	r3, #4
 8004d9c:	429d      	cmp	r5, r3
 8004d9e:	461a      	mov	r2, r3
 8004da0:	d30b      	bcc.n	8004dba <quorem+0x100>
 8004da2:	613c      	str	r4, [r7, #16]
 8004da4:	3601      	adds	r6, #1
 8004da6:	4630      	mov	r0, r6
 8004da8:	b003      	add	sp, #12
 8004daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dae:	6812      	ldr	r2, [r2, #0]
 8004db0:	3b04      	subs	r3, #4
 8004db2:	2a00      	cmp	r2, #0
 8004db4:	d1cb      	bne.n	8004d4e <quorem+0x94>
 8004db6:	3c01      	subs	r4, #1
 8004db8:	e7c6      	b.n	8004d48 <quorem+0x8e>
 8004dba:	6812      	ldr	r2, [r2, #0]
 8004dbc:	3b04      	subs	r3, #4
 8004dbe:	2a00      	cmp	r2, #0
 8004dc0:	d1ef      	bne.n	8004da2 <quorem+0xe8>
 8004dc2:	3c01      	subs	r4, #1
 8004dc4:	e7ea      	b.n	8004d9c <quorem+0xe2>
 8004dc6:	2000      	movs	r0, #0
 8004dc8:	e7ee      	b.n	8004da8 <quorem+0xee>
 8004dca:	0000      	movs	r0, r0
 8004dcc:	0000      	movs	r0, r0
	...

08004dd0 <_dtoa_r>:
 8004dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dd4:	ed2d 8b02 	vpush	{d8}
 8004dd8:	69c7      	ldr	r7, [r0, #28]
 8004dda:	b091      	sub	sp, #68	@ 0x44
 8004ddc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004de0:	ec55 4b10 	vmov	r4, r5, d0
 8004de4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8004de6:	9107      	str	r1, [sp, #28]
 8004de8:	4681      	mov	r9, r0
 8004dea:	9209      	str	r2, [sp, #36]	@ 0x24
 8004dec:	930d      	str	r3, [sp, #52]	@ 0x34
 8004dee:	b97f      	cbnz	r7, 8004e10 <_dtoa_r+0x40>
 8004df0:	2010      	movs	r0, #16
 8004df2:	f000 fd8d 	bl	8005910 <malloc>
 8004df6:	4602      	mov	r2, r0
 8004df8:	f8c9 001c 	str.w	r0, [r9, #28]
 8004dfc:	b920      	cbnz	r0, 8004e08 <_dtoa_r+0x38>
 8004dfe:	4ba0      	ldr	r3, [pc, #640]	@ (8005080 <_dtoa_r+0x2b0>)
 8004e00:	21ef      	movs	r1, #239	@ 0xef
 8004e02:	48a0      	ldr	r0, [pc, #640]	@ (8005084 <_dtoa_r+0x2b4>)
 8004e04:	f001 fbf8 	bl	80065f8 <__assert_func>
 8004e08:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004e0c:	6007      	str	r7, [r0, #0]
 8004e0e:	60c7      	str	r7, [r0, #12]
 8004e10:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004e14:	6819      	ldr	r1, [r3, #0]
 8004e16:	b159      	cbz	r1, 8004e30 <_dtoa_r+0x60>
 8004e18:	685a      	ldr	r2, [r3, #4]
 8004e1a:	604a      	str	r2, [r1, #4]
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	4093      	lsls	r3, r2
 8004e20:	608b      	str	r3, [r1, #8]
 8004e22:	4648      	mov	r0, r9
 8004e24:	f000 fe6a 	bl	8005afc <_Bfree>
 8004e28:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	601a      	str	r2, [r3, #0]
 8004e30:	1e2b      	subs	r3, r5, #0
 8004e32:	bfbb      	ittet	lt
 8004e34:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004e38:	9303      	strlt	r3, [sp, #12]
 8004e3a:	2300      	movge	r3, #0
 8004e3c:	2201      	movlt	r2, #1
 8004e3e:	bfac      	ite	ge
 8004e40:	6033      	strge	r3, [r6, #0]
 8004e42:	6032      	strlt	r2, [r6, #0]
 8004e44:	4b90      	ldr	r3, [pc, #576]	@ (8005088 <_dtoa_r+0x2b8>)
 8004e46:	9e03      	ldr	r6, [sp, #12]
 8004e48:	43b3      	bics	r3, r6
 8004e4a:	d110      	bne.n	8004e6e <_dtoa_r+0x9e>
 8004e4c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004e4e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004e52:	6013      	str	r3, [r2, #0]
 8004e54:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8004e58:	4323      	orrs	r3, r4
 8004e5a:	f000 84de 	beq.w	800581a <_dtoa_r+0xa4a>
 8004e5e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004e60:	4f8a      	ldr	r7, [pc, #552]	@ (800508c <_dtoa_r+0x2bc>)
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f000 84e0 	beq.w	8005828 <_dtoa_r+0xa58>
 8004e68:	1cfb      	adds	r3, r7, #3
 8004e6a:	f000 bcdb 	b.w	8005824 <_dtoa_r+0xa54>
 8004e6e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8004e72:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e7a:	d10a      	bne.n	8004e92 <_dtoa_r+0xc2>
 8004e7c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004e7e:	2301      	movs	r3, #1
 8004e80:	6013      	str	r3, [r2, #0]
 8004e82:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004e84:	b113      	cbz	r3, 8004e8c <_dtoa_r+0xbc>
 8004e86:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8004e88:	4b81      	ldr	r3, [pc, #516]	@ (8005090 <_dtoa_r+0x2c0>)
 8004e8a:	6013      	str	r3, [r2, #0]
 8004e8c:	4f81      	ldr	r7, [pc, #516]	@ (8005094 <_dtoa_r+0x2c4>)
 8004e8e:	f000 bccb 	b.w	8005828 <_dtoa_r+0xa58>
 8004e92:	aa0e      	add	r2, sp, #56	@ 0x38
 8004e94:	a90f      	add	r1, sp, #60	@ 0x3c
 8004e96:	4648      	mov	r0, r9
 8004e98:	eeb0 0b48 	vmov.f64	d0, d8
 8004e9c:	f001 f918 	bl	80060d0 <__d2b>
 8004ea0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8004ea4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004ea6:	9001      	str	r0, [sp, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d045      	beq.n	8004f38 <_dtoa_r+0x168>
 8004eac:	eeb0 7b48 	vmov.f64	d7, d8
 8004eb0:	ee18 1a90 	vmov	r1, s17
 8004eb4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8004eb8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8004ebc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8004ec0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8004ec4:	2500      	movs	r5, #0
 8004ec6:	ee07 1a90 	vmov	s15, r1
 8004eca:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8004ece:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8005068 <_dtoa_r+0x298>
 8004ed2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004ed6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8005070 <_dtoa_r+0x2a0>
 8004eda:	eea7 6b05 	vfma.f64	d6, d7, d5
 8004ede:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8005078 <_dtoa_r+0x2a8>
 8004ee2:	ee07 3a90 	vmov	s15, r3
 8004ee6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8004eea:	eeb0 7b46 	vmov.f64	d7, d6
 8004eee:	eea4 7b05 	vfma.f64	d7, d4, d5
 8004ef2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8004ef6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004efe:	ee16 8a90 	vmov	r8, s13
 8004f02:	d508      	bpl.n	8004f16 <_dtoa_r+0x146>
 8004f04:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8004f08:	eeb4 6b47 	vcmp.f64	d6, d7
 8004f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f10:	bf18      	it	ne
 8004f12:	f108 38ff 	addne.w	r8, r8, #4294967295
 8004f16:	f1b8 0f16 	cmp.w	r8, #22
 8004f1a:	d82b      	bhi.n	8004f74 <_dtoa_r+0x1a4>
 8004f1c:	495e      	ldr	r1, [pc, #376]	@ (8005098 <_dtoa_r+0x2c8>)
 8004f1e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8004f22:	ed91 7b00 	vldr	d7, [r1]
 8004f26:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8004f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f2e:	d501      	bpl.n	8004f34 <_dtoa_r+0x164>
 8004f30:	f108 38ff 	add.w	r8, r8, #4294967295
 8004f34:	2100      	movs	r1, #0
 8004f36:	e01e      	b.n	8004f76 <_dtoa_r+0x1a6>
 8004f38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8004f40:	2920      	cmp	r1, #32
 8004f42:	bfc1      	itttt	gt
 8004f44:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8004f48:	408e      	lslgt	r6, r1
 8004f4a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8004f4e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8004f52:	bfd6      	itet	le
 8004f54:	f1c1 0120 	rsble	r1, r1, #32
 8004f58:	4331      	orrgt	r1, r6
 8004f5a:	fa04 f101 	lslle.w	r1, r4, r1
 8004f5e:	ee07 1a90 	vmov	s15, r1
 8004f62:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004f66:	3b01      	subs	r3, #1
 8004f68:	ee17 1a90 	vmov	r1, s15
 8004f6c:	2501      	movs	r5, #1
 8004f6e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8004f72:	e7a8      	b.n	8004ec6 <_dtoa_r+0xf6>
 8004f74:	2101      	movs	r1, #1
 8004f76:	1ad2      	subs	r2, r2, r3
 8004f78:	1e53      	subs	r3, r2, #1
 8004f7a:	9306      	str	r3, [sp, #24]
 8004f7c:	bf45      	ittet	mi
 8004f7e:	f1c2 0301 	rsbmi	r3, r2, #1
 8004f82:	9305      	strmi	r3, [sp, #20]
 8004f84:	2300      	movpl	r3, #0
 8004f86:	2300      	movmi	r3, #0
 8004f88:	bf4c      	ite	mi
 8004f8a:	9306      	strmi	r3, [sp, #24]
 8004f8c:	9305      	strpl	r3, [sp, #20]
 8004f8e:	f1b8 0f00 	cmp.w	r8, #0
 8004f92:	910c      	str	r1, [sp, #48]	@ 0x30
 8004f94:	db18      	blt.n	8004fc8 <_dtoa_r+0x1f8>
 8004f96:	9b06      	ldr	r3, [sp, #24]
 8004f98:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004f9c:	4443      	add	r3, r8
 8004f9e:	9306      	str	r3, [sp, #24]
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	9a07      	ldr	r2, [sp, #28]
 8004fa4:	2a09      	cmp	r2, #9
 8004fa6:	d849      	bhi.n	800503c <_dtoa_r+0x26c>
 8004fa8:	2a05      	cmp	r2, #5
 8004faa:	bfc4      	itt	gt
 8004fac:	3a04      	subgt	r2, #4
 8004fae:	9207      	strgt	r2, [sp, #28]
 8004fb0:	9a07      	ldr	r2, [sp, #28]
 8004fb2:	f1a2 0202 	sub.w	r2, r2, #2
 8004fb6:	bfcc      	ite	gt
 8004fb8:	2400      	movgt	r4, #0
 8004fba:	2401      	movle	r4, #1
 8004fbc:	2a03      	cmp	r2, #3
 8004fbe:	d848      	bhi.n	8005052 <_dtoa_r+0x282>
 8004fc0:	e8df f002 	tbb	[pc, r2]
 8004fc4:	3a2c2e0b 	.word	0x3a2c2e0b
 8004fc8:	9b05      	ldr	r3, [sp, #20]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	eba3 0308 	sub.w	r3, r3, r8
 8004fd0:	9305      	str	r3, [sp, #20]
 8004fd2:	920a      	str	r2, [sp, #40]	@ 0x28
 8004fd4:	f1c8 0300 	rsb	r3, r8, #0
 8004fd8:	e7e3      	b.n	8004fa2 <_dtoa_r+0x1d2>
 8004fda:	2200      	movs	r2, #0
 8004fdc:	9208      	str	r2, [sp, #32]
 8004fde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004fe0:	2a00      	cmp	r2, #0
 8004fe2:	dc39      	bgt.n	8005058 <_dtoa_r+0x288>
 8004fe4:	f04f 0b01 	mov.w	fp, #1
 8004fe8:	46da      	mov	sl, fp
 8004fea:	465a      	mov	r2, fp
 8004fec:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8004ff0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	2004      	movs	r0, #4
 8004ff8:	f100 0614 	add.w	r6, r0, #20
 8004ffc:	4296      	cmp	r6, r2
 8004ffe:	d930      	bls.n	8005062 <_dtoa_r+0x292>
 8005000:	6079      	str	r1, [r7, #4]
 8005002:	4648      	mov	r0, r9
 8005004:	9304      	str	r3, [sp, #16]
 8005006:	f000 fd39 	bl	8005a7c <_Balloc>
 800500a:	9b04      	ldr	r3, [sp, #16]
 800500c:	4607      	mov	r7, r0
 800500e:	2800      	cmp	r0, #0
 8005010:	d146      	bne.n	80050a0 <_dtoa_r+0x2d0>
 8005012:	4b22      	ldr	r3, [pc, #136]	@ (800509c <_dtoa_r+0x2cc>)
 8005014:	4602      	mov	r2, r0
 8005016:	f240 11af 	movw	r1, #431	@ 0x1af
 800501a:	e6f2      	b.n	8004e02 <_dtoa_r+0x32>
 800501c:	2201      	movs	r2, #1
 800501e:	e7dd      	b.n	8004fdc <_dtoa_r+0x20c>
 8005020:	2200      	movs	r2, #0
 8005022:	9208      	str	r2, [sp, #32]
 8005024:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005026:	eb08 0b02 	add.w	fp, r8, r2
 800502a:	f10b 0a01 	add.w	sl, fp, #1
 800502e:	4652      	mov	r2, sl
 8005030:	2a01      	cmp	r2, #1
 8005032:	bfb8      	it	lt
 8005034:	2201      	movlt	r2, #1
 8005036:	e7db      	b.n	8004ff0 <_dtoa_r+0x220>
 8005038:	2201      	movs	r2, #1
 800503a:	e7f2      	b.n	8005022 <_dtoa_r+0x252>
 800503c:	2401      	movs	r4, #1
 800503e:	2200      	movs	r2, #0
 8005040:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8005044:	f04f 3bff 	mov.w	fp, #4294967295
 8005048:	2100      	movs	r1, #0
 800504a:	46da      	mov	sl, fp
 800504c:	2212      	movs	r2, #18
 800504e:	9109      	str	r1, [sp, #36]	@ 0x24
 8005050:	e7ce      	b.n	8004ff0 <_dtoa_r+0x220>
 8005052:	2201      	movs	r2, #1
 8005054:	9208      	str	r2, [sp, #32]
 8005056:	e7f5      	b.n	8005044 <_dtoa_r+0x274>
 8005058:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800505c:	46da      	mov	sl, fp
 800505e:	465a      	mov	r2, fp
 8005060:	e7c6      	b.n	8004ff0 <_dtoa_r+0x220>
 8005062:	3101      	adds	r1, #1
 8005064:	0040      	lsls	r0, r0, #1
 8005066:	e7c7      	b.n	8004ff8 <_dtoa_r+0x228>
 8005068:	636f4361 	.word	0x636f4361
 800506c:	3fd287a7 	.word	0x3fd287a7
 8005070:	8b60c8b3 	.word	0x8b60c8b3
 8005074:	3fc68a28 	.word	0x3fc68a28
 8005078:	509f79fb 	.word	0x509f79fb
 800507c:	3fd34413 	.word	0x3fd34413
 8005080:	08006d55 	.word	0x08006d55
 8005084:	08006d6c 	.word	0x08006d6c
 8005088:	7ff00000 	.word	0x7ff00000
 800508c:	08006d51 	.word	0x08006d51
 8005090:	08006d25 	.word	0x08006d25
 8005094:	08006d24 	.word	0x08006d24
 8005098:	08006e68 	.word	0x08006e68
 800509c:	08006dc4 	.word	0x08006dc4
 80050a0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80050a4:	f1ba 0f0e 	cmp.w	sl, #14
 80050a8:	6010      	str	r0, [r2, #0]
 80050aa:	d86f      	bhi.n	800518c <_dtoa_r+0x3bc>
 80050ac:	2c00      	cmp	r4, #0
 80050ae:	d06d      	beq.n	800518c <_dtoa_r+0x3bc>
 80050b0:	f1b8 0f00 	cmp.w	r8, #0
 80050b4:	f340 80c2 	ble.w	800523c <_dtoa_r+0x46c>
 80050b8:	4aca      	ldr	r2, [pc, #808]	@ (80053e4 <_dtoa_r+0x614>)
 80050ba:	f008 010f 	and.w	r1, r8, #15
 80050be:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80050c2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80050c6:	ed92 7b00 	vldr	d7, [r2]
 80050ca:	ea4f 1128 	mov.w	r1, r8, asr #4
 80050ce:	f000 80a9 	beq.w	8005224 <_dtoa_r+0x454>
 80050d2:	4ac5      	ldr	r2, [pc, #788]	@ (80053e8 <_dtoa_r+0x618>)
 80050d4:	ed92 6b08 	vldr	d6, [r2, #32]
 80050d8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80050dc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80050e0:	f001 010f 	and.w	r1, r1, #15
 80050e4:	2203      	movs	r2, #3
 80050e6:	48c0      	ldr	r0, [pc, #768]	@ (80053e8 <_dtoa_r+0x618>)
 80050e8:	2900      	cmp	r1, #0
 80050ea:	f040 809d 	bne.w	8005228 <_dtoa_r+0x458>
 80050ee:	ed9d 6b02 	vldr	d6, [sp, #8]
 80050f2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80050f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80050fa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80050fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005100:	2900      	cmp	r1, #0
 8005102:	f000 80c1 	beq.w	8005288 <_dtoa_r+0x4b8>
 8005106:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800510a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800510e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005112:	f140 80b9 	bpl.w	8005288 <_dtoa_r+0x4b8>
 8005116:	f1ba 0f00 	cmp.w	sl, #0
 800511a:	f000 80b5 	beq.w	8005288 <_dtoa_r+0x4b8>
 800511e:	f1bb 0f00 	cmp.w	fp, #0
 8005122:	dd31      	ble.n	8005188 <_dtoa_r+0x3b8>
 8005124:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8005128:	ee27 7b06 	vmul.f64	d7, d7, d6
 800512c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005130:	f108 31ff 	add.w	r1, r8, #4294967295
 8005134:	9104      	str	r1, [sp, #16]
 8005136:	3201      	adds	r2, #1
 8005138:	465c      	mov	r4, fp
 800513a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800513e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8005142:	ee07 2a90 	vmov	s15, r2
 8005146:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800514a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800514e:	ee15 2a90 	vmov	r2, s11
 8005152:	ec51 0b15 	vmov	r0, r1, d5
 8005156:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800515a:	2c00      	cmp	r4, #0
 800515c:	f040 8098 	bne.w	8005290 <_dtoa_r+0x4c0>
 8005160:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8005164:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005168:	ec41 0b17 	vmov	d7, r0, r1
 800516c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005174:	f300 8261 	bgt.w	800563a <_dtoa_r+0x86a>
 8005178:	eeb1 7b47 	vneg.f64	d7, d7
 800517c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005184:	f100 80f5 	bmi.w	8005372 <_dtoa_r+0x5a2>
 8005188:	ed8d 8b02 	vstr	d8, [sp, #8]
 800518c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800518e:	2a00      	cmp	r2, #0
 8005190:	f2c0 812c 	blt.w	80053ec <_dtoa_r+0x61c>
 8005194:	f1b8 0f0e 	cmp.w	r8, #14
 8005198:	f300 8128 	bgt.w	80053ec <_dtoa_r+0x61c>
 800519c:	4b91      	ldr	r3, [pc, #580]	@ (80053e4 <_dtoa_r+0x614>)
 800519e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80051a2:	ed93 6b00 	vldr	d6, [r3]
 80051a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	da03      	bge.n	80051b4 <_dtoa_r+0x3e4>
 80051ac:	f1ba 0f00 	cmp.w	sl, #0
 80051b0:	f340 80d2 	ble.w	8005358 <_dtoa_r+0x588>
 80051b4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80051b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80051bc:	463e      	mov	r6, r7
 80051be:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80051c2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80051c6:	ee15 3a10 	vmov	r3, s10
 80051ca:	3330      	adds	r3, #48	@ 0x30
 80051cc:	f806 3b01 	strb.w	r3, [r6], #1
 80051d0:	1bf3      	subs	r3, r6, r7
 80051d2:	459a      	cmp	sl, r3
 80051d4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80051d8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80051dc:	f040 80f8 	bne.w	80053d0 <_dtoa_r+0x600>
 80051e0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80051e4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80051e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ec:	f300 80dd 	bgt.w	80053aa <_dtoa_r+0x5da>
 80051f0:	eeb4 7b46 	vcmp.f64	d7, d6
 80051f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f8:	d104      	bne.n	8005204 <_dtoa_r+0x434>
 80051fa:	ee15 3a10 	vmov	r3, s10
 80051fe:	07db      	lsls	r3, r3, #31
 8005200:	f100 80d3 	bmi.w	80053aa <_dtoa_r+0x5da>
 8005204:	9901      	ldr	r1, [sp, #4]
 8005206:	4648      	mov	r0, r9
 8005208:	f000 fc78 	bl	8005afc <_Bfree>
 800520c:	2300      	movs	r3, #0
 800520e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005210:	7033      	strb	r3, [r6, #0]
 8005212:	f108 0301 	add.w	r3, r8, #1
 8005216:	6013      	str	r3, [r2, #0]
 8005218:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800521a:	2b00      	cmp	r3, #0
 800521c:	f000 8304 	beq.w	8005828 <_dtoa_r+0xa58>
 8005220:	601e      	str	r6, [r3, #0]
 8005222:	e301      	b.n	8005828 <_dtoa_r+0xa58>
 8005224:	2202      	movs	r2, #2
 8005226:	e75e      	b.n	80050e6 <_dtoa_r+0x316>
 8005228:	07cc      	lsls	r4, r1, #31
 800522a:	d504      	bpl.n	8005236 <_dtoa_r+0x466>
 800522c:	ed90 6b00 	vldr	d6, [r0]
 8005230:	3201      	adds	r2, #1
 8005232:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005236:	1049      	asrs	r1, r1, #1
 8005238:	3008      	adds	r0, #8
 800523a:	e755      	b.n	80050e8 <_dtoa_r+0x318>
 800523c:	d022      	beq.n	8005284 <_dtoa_r+0x4b4>
 800523e:	f1c8 0100 	rsb	r1, r8, #0
 8005242:	4a68      	ldr	r2, [pc, #416]	@ (80053e4 <_dtoa_r+0x614>)
 8005244:	f001 000f 	and.w	r0, r1, #15
 8005248:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800524c:	ed92 7b00 	vldr	d7, [r2]
 8005250:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005254:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005258:	4863      	ldr	r0, [pc, #396]	@ (80053e8 <_dtoa_r+0x618>)
 800525a:	1109      	asrs	r1, r1, #4
 800525c:	2400      	movs	r4, #0
 800525e:	2202      	movs	r2, #2
 8005260:	b929      	cbnz	r1, 800526e <_dtoa_r+0x49e>
 8005262:	2c00      	cmp	r4, #0
 8005264:	f43f af49 	beq.w	80050fa <_dtoa_r+0x32a>
 8005268:	ed8d 7b02 	vstr	d7, [sp, #8]
 800526c:	e745      	b.n	80050fa <_dtoa_r+0x32a>
 800526e:	07ce      	lsls	r6, r1, #31
 8005270:	d505      	bpl.n	800527e <_dtoa_r+0x4ae>
 8005272:	ed90 6b00 	vldr	d6, [r0]
 8005276:	3201      	adds	r2, #1
 8005278:	2401      	movs	r4, #1
 800527a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800527e:	1049      	asrs	r1, r1, #1
 8005280:	3008      	adds	r0, #8
 8005282:	e7ed      	b.n	8005260 <_dtoa_r+0x490>
 8005284:	2202      	movs	r2, #2
 8005286:	e738      	b.n	80050fa <_dtoa_r+0x32a>
 8005288:	f8cd 8010 	str.w	r8, [sp, #16]
 800528c:	4654      	mov	r4, sl
 800528e:	e754      	b.n	800513a <_dtoa_r+0x36a>
 8005290:	4a54      	ldr	r2, [pc, #336]	@ (80053e4 <_dtoa_r+0x614>)
 8005292:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8005296:	ed12 4b02 	vldr	d4, [r2, #-8]
 800529a:	9a08      	ldr	r2, [sp, #32]
 800529c:	ec41 0b17 	vmov	d7, r0, r1
 80052a0:	443c      	add	r4, r7
 80052a2:	b34a      	cbz	r2, 80052f8 <_dtoa_r+0x528>
 80052a4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80052a8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80052ac:	463e      	mov	r6, r7
 80052ae:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80052b2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80052b6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80052ba:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80052be:	ee14 2a90 	vmov	r2, s9
 80052c2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80052c6:	3230      	adds	r2, #48	@ 0x30
 80052c8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80052cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80052d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052d4:	f806 2b01 	strb.w	r2, [r6], #1
 80052d8:	d438      	bmi.n	800534c <_dtoa_r+0x57c>
 80052da:	ee32 5b46 	vsub.f64	d5, d2, d6
 80052de:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80052e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052e6:	d462      	bmi.n	80053ae <_dtoa_r+0x5de>
 80052e8:	42a6      	cmp	r6, r4
 80052ea:	f43f af4d 	beq.w	8005188 <_dtoa_r+0x3b8>
 80052ee:	ee27 7b03 	vmul.f64	d7, d7, d3
 80052f2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80052f6:	e7e0      	b.n	80052ba <_dtoa_r+0x4ea>
 80052f8:	4621      	mov	r1, r4
 80052fa:	463e      	mov	r6, r7
 80052fc:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005300:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8005304:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005308:	ee14 2a90 	vmov	r2, s9
 800530c:	3230      	adds	r2, #48	@ 0x30
 800530e:	f806 2b01 	strb.w	r2, [r6], #1
 8005312:	42a6      	cmp	r6, r4
 8005314:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005318:	ee36 6b45 	vsub.f64	d6, d6, d5
 800531c:	d119      	bne.n	8005352 <_dtoa_r+0x582>
 800531e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8005322:	ee37 4b05 	vadd.f64	d4, d7, d5
 8005326:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800532a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800532e:	dc3e      	bgt.n	80053ae <_dtoa_r+0x5de>
 8005330:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005334:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8005338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800533c:	f57f af24 	bpl.w	8005188 <_dtoa_r+0x3b8>
 8005340:	460e      	mov	r6, r1
 8005342:	3901      	subs	r1, #1
 8005344:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005348:	2b30      	cmp	r3, #48	@ 0x30
 800534a:	d0f9      	beq.n	8005340 <_dtoa_r+0x570>
 800534c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005350:	e758      	b.n	8005204 <_dtoa_r+0x434>
 8005352:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005356:	e7d5      	b.n	8005304 <_dtoa_r+0x534>
 8005358:	d10b      	bne.n	8005372 <_dtoa_r+0x5a2>
 800535a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800535e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005362:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005366:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800536a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800536e:	f2c0 8161 	blt.w	8005634 <_dtoa_r+0x864>
 8005372:	2400      	movs	r4, #0
 8005374:	4625      	mov	r5, r4
 8005376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005378:	43db      	mvns	r3, r3
 800537a:	9304      	str	r3, [sp, #16]
 800537c:	463e      	mov	r6, r7
 800537e:	f04f 0800 	mov.w	r8, #0
 8005382:	4621      	mov	r1, r4
 8005384:	4648      	mov	r0, r9
 8005386:	f000 fbb9 	bl	8005afc <_Bfree>
 800538a:	2d00      	cmp	r5, #0
 800538c:	d0de      	beq.n	800534c <_dtoa_r+0x57c>
 800538e:	f1b8 0f00 	cmp.w	r8, #0
 8005392:	d005      	beq.n	80053a0 <_dtoa_r+0x5d0>
 8005394:	45a8      	cmp	r8, r5
 8005396:	d003      	beq.n	80053a0 <_dtoa_r+0x5d0>
 8005398:	4641      	mov	r1, r8
 800539a:	4648      	mov	r0, r9
 800539c:	f000 fbae 	bl	8005afc <_Bfree>
 80053a0:	4629      	mov	r1, r5
 80053a2:	4648      	mov	r0, r9
 80053a4:	f000 fbaa 	bl	8005afc <_Bfree>
 80053a8:	e7d0      	b.n	800534c <_dtoa_r+0x57c>
 80053aa:	f8cd 8010 	str.w	r8, [sp, #16]
 80053ae:	4633      	mov	r3, r6
 80053b0:	461e      	mov	r6, r3
 80053b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80053b6:	2a39      	cmp	r2, #57	@ 0x39
 80053b8:	d106      	bne.n	80053c8 <_dtoa_r+0x5f8>
 80053ba:	429f      	cmp	r7, r3
 80053bc:	d1f8      	bne.n	80053b0 <_dtoa_r+0x5e0>
 80053be:	9a04      	ldr	r2, [sp, #16]
 80053c0:	3201      	adds	r2, #1
 80053c2:	9204      	str	r2, [sp, #16]
 80053c4:	2230      	movs	r2, #48	@ 0x30
 80053c6:	703a      	strb	r2, [r7, #0]
 80053c8:	781a      	ldrb	r2, [r3, #0]
 80053ca:	3201      	adds	r2, #1
 80053cc:	701a      	strb	r2, [r3, #0]
 80053ce:	e7bd      	b.n	800534c <_dtoa_r+0x57c>
 80053d0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80053d4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80053d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053dc:	f47f aeef 	bne.w	80051be <_dtoa_r+0x3ee>
 80053e0:	e710      	b.n	8005204 <_dtoa_r+0x434>
 80053e2:	bf00      	nop
 80053e4:	08006e68 	.word	0x08006e68
 80053e8:	08006e40 	.word	0x08006e40
 80053ec:	9908      	ldr	r1, [sp, #32]
 80053ee:	2900      	cmp	r1, #0
 80053f0:	f000 80e3 	beq.w	80055ba <_dtoa_r+0x7ea>
 80053f4:	9907      	ldr	r1, [sp, #28]
 80053f6:	2901      	cmp	r1, #1
 80053f8:	f300 80c8 	bgt.w	800558c <_dtoa_r+0x7bc>
 80053fc:	2d00      	cmp	r5, #0
 80053fe:	f000 80c1 	beq.w	8005584 <_dtoa_r+0x7b4>
 8005402:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005406:	9e05      	ldr	r6, [sp, #20]
 8005408:	461c      	mov	r4, r3
 800540a:	9304      	str	r3, [sp, #16]
 800540c:	9b05      	ldr	r3, [sp, #20]
 800540e:	4413      	add	r3, r2
 8005410:	9305      	str	r3, [sp, #20]
 8005412:	9b06      	ldr	r3, [sp, #24]
 8005414:	2101      	movs	r1, #1
 8005416:	4413      	add	r3, r2
 8005418:	4648      	mov	r0, r9
 800541a:	9306      	str	r3, [sp, #24]
 800541c:	f000 fc22 	bl	8005c64 <__i2b>
 8005420:	9b04      	ldr	r3, [sp, #16]
 8005422:	4605      	mov	r5, r0
 8005424:	b166      	cbz	r6, 8005440 <_dtoa_r+0x670>
 8005426:	9a06      	ldr	r2, [sp, #24]
 8005428:	2a00      	cmp	r2, #0
 800542a:	dd09      	ble.n	8005440 <_dtoa_r+0x670>
 800542c:	42b2      	cmp	r2, r6
 800542e:	9905      	ldr	r1, [sp, #20]
 8005430:	bfa8      	it	ge
 8005432:	4632      	movge	r2, r6
 8005434:	1a89      	subs	r1, r1, r2
 8005436:	9105      	str	r1, [sp, #20]
 8005438:	9906      	ldr	r1, [sp, #24]
 800543a:	1ab6      	subs	r6, r6, r2
 800543c:	1a8a      	subs	r2, r1, r2
 800543e:	9206      	str	r2, [sp, #24]
 8005440:	b1fb      	cbz	r3, 8005482 <_dtoa_r+0x6b2>
 8005442:	9a08      	ldr	r2, [sp, #32]
 8005444:	2a00      	cmp	r2, #0
 8005446:	f000 80bc 	beq.w	80055c2 <_dtoa_r+0x7f2>
 800544a:	b19c      	cbz	r4, 8005474 <_dtoa_r+0x6a4>
 800544c:	4629      	mov	r1, r5
 800544e:	4622      	mov	r2, r4
 8005450:	4648      	mov	r0, r9
 8005452:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005454:	f000 fcc6 	bl	8005de4 <__pow5mult>
 8005458:	9a01      	ldr	r2, [sp, #4]
 800545a:	4601      	mov	r1, r0
 800545c:	4605      	mov	r5, r0
 800545e:	4648      	mov	r0, r9
 8005460:	f000 fc16 	bl	8005c90 <__multiply>
 8005464:	9901      	ldr	r1, [sp, #4]
 8005466:	9004      	str	r0, [sp, #16]
 8005468:	4648      	mov	r0, r9
 800546a:	f000 fb47 	bl	8005afc <_Bfree>
 800546e:	9a04      	ldr	r2, [sp, #16]
 8005470:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005472:	9201      	str	r2, [sp, #4]
 8005474:	1b1a      	subs	r2, r3, r4
 8005476:	d004      	beq.n	8005482 <_dtoa_r+0x6b2>
 8005478:	9901      	ldr	r1, [sp, #4]
 800547a:	4648      	mov	r0, r9
 800547c:	f000 fcb2 	bl	8005de4 <__pow5mult>
 8005480:	9001      	str	r0, [sp, #4]
 8005482:	2101      	movs	r1, #1
 8005484:	4648      	mov	r0, r9
 8005486:	f000 fbed 	bl	8005c64 <__i2b>
 800548a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800548c:	4604      	mov	r4, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 81d0 	beq.w	8005834 <_dtoa_r+0xa64>
 8005494:	461a      	mov	r2, r3
 8005496:	4601      	mov	r1, r0
 8005498:	4648      	mov	r0, r9
 800549a:	f000 fca3 	bl	8005de4 <__pow5mult>
 800549e:	9b07      	ldr	r3, [sp, #28]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	4604      	mov	r4, r0
 80054a4:	f300 8095 	bgt.w	80055d2 <_dtoa_r+0x802>
 80054a8:	9b02      	ldr	r3, [sp, #8]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f040 808b 	bne.w	80055c6 <_dtoa_r+0x7f6>
 80054b0:	9b03      	ldr	r3, [sp, #12]
 80054b2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80054b6:	2a00      	cmp	r2, #0
 80054b8:	f040 8087 	bne.w	80055ca <_dtoa_r+0x7fa>
 80054bc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80054c0:	0d12      	lsrs	r2, r2, #20
 80054c2:	0512      	lsls	r2, r2, #20
 80054c4:	2a00      	cmp	r2, #0
 80054c6:	f000 8082 	beq.w	80055ce <_dtoa_r+0x7fe>
 80054ca:	9b05      	ldr	r3, [sp, #20]
 80054cc:	3301      	adds	r3, #1
 80054ce:	9305      	str	r3, [sp, #20]
 80054d0:	9b06      	ldr	r3, [sp, #24]
 80054d2:	3301      	adds	r3, #1
 80054d4:	9306      	str	r3, [sp, #24]
 80054d6:	2301      	movs	r3, #1
 80054d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80054da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f000 81af 	beq.w	8005840 <_dtoa_r+0xa70>
 80054e2:	6922      	ldr	r2, [r4, #16]
 80054e4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80054e8:	6910      	ldr	r0, [r2, #16]
 80054ea:	f000 fb6f 	bl	8005bcc <__hi0bits>
 80054ee:	f1c0 0020 	rsb	r0, r0, #32
 80054f2:	9b06      	ldr	r3, [sp, #24]
 80054f4:	4418      	add	r0, r3
 80054f6:	f010 001f 	ands.w	r0, r0, #31
 80054fa:	d076      	beq.n	80055ea <_dtoa_r+0x81a>
 80054fc:	f1c0 0220 	rsb	r2, r0, #32
 8005500:	2a04      	cmp	r2, #4
 8005502:	dd69      	ble.n	80055d8 <_dtoa_r+0x808>
 8005504:	9b05      	ldr	r3, [sp, #20]
 8005506:	f1c0 001c 	rsb	r0, r0, #28
 800550a:	4403      	add	r3, r0
 800550c:	9305      	str	r3, [sp, #20]
 800550e:	9b06      	ldr	r3, [sp, #24]
 8005510:	4406      	add	r6, r0
 8005512:	4403      	add	r3, r0
 8005514:	9306      	str	r3, [sp, #24]
 8005516:	9b05      	ldr	r3, [sp, #20]
 8005518:	2b00      	cmp	r3, #0
 800551a:	dd05      	ble.n	8005528 <_dtoa_r+0x758>
 800551c:	9901      	ldr	r1, [sp, #4]
 800551e:	461a      	mov	r2, r3
 8005520:	4648      	mov	r0, r9
 8005522:	f000 fcb9 	bl	8005e98 <__lshift>
 8005526:	9001      	str	r0, [sp, #4]
 8005528:	9b06      	ldr	r3, [sp, #24]
 800552a:	2b00      	cmp	r3, #0
 800552c:	dd05      	ble.n	800553a <_dtoa_r+0x76a>
 800552e:	4621      	mov	r1, r4
 8005530:	461a      	mov	r2, r3
 8005532:	4648      	mov	r0, r9
 8005534:	f000 fcb0 	bl	8005e98 <__lshift>
 8005538:	4604      	mov	r4, r0
 800553a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800553c:	2b00      	cmp	r3, #0
 800553e:	d056      	beq.n	80055ee <_dtoa_r+0x81e>
 8005540:	9801      	ldr	r0, [sp, #4]
 8005542:	4621      	mov	r1, r4
 8005544:	f000 fd14 	bl	8005f70 <__mcmp>
 8005548:	2800      	cmp	r0, #0
 800554a:	da50      	bge.n	80055ee <_dtoa_r+0x81e>
 800554c:	f108 33ff 	add.w	r3, r8, #4294967295
 8005550:	9304      	str	r3, [sp, #16]
 8005552:	9901      	ldr	r1, [sp, #4]
 8005554:	2300      	movs	r3, #0
 8005556:	220a      	movs	r2, #10
 8005558:	4648      	mov	r0, r9
 800555a:	f000 faf1 	bl	8005b40 <__multadd>
 800555e:	9b08      	ldr	r3, [sp, #32]
 8005560:	9001      	str	r0, [sp, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	f000 816e 	beq.w	8005844 <_dtoa_r+0xa74>
 8005568:	4629      	mov	r1, r5
 800556a:	2300      	movs	r3, #0
 800556c:	220a      	movs	r2, #10
 800556e:	4648      	mov	r0, r9
 8005570:	f000 fae6 	bl	8005b40 <__multadd>
 8005574:	f1bb 0f00 	cmp.w	fp, #0
 8005578:	4605      	mov	r5, r0
 800557a:	dc64      	bgt.n	8005646 <_dtoa_r+0x876>
 800557c:	9b07      	ldr	r3, [sp, #28]
 800557e:	2b02      	cmp	r3, #2
 8005580:	dc3e      	bgt.n	8005600 <_dtoa_r+0x830>
 8005582:	e060      	b.n	8005646 <_dtoa_r+0x876>
 8005584:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005586:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800558a:	e73c      	b.n	8005406 <_dtoa_r+0x636>
 800558c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8005590:	42a3      	cmp	r3, r4
 8005592:	bfbf      	itttt	lt
 8005594:	1ae2      	sublt	r2, r4, r3
 8005596:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005598:	189b      	addlt	r3, r3, r2
 800559a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800559c:	bfae      	itee	ge
 800559e:	1b1c      	subge	r4, r3, r4
 80055a0:	4623      	movlt	r3, r4
 80055a2:	2400      	movlt	r4, #0
 80055a4:	f1ba 0f00 	cmp.w	sl, #0
 80055a8:	bfb5      	itete	lt
 80055aa:	9a05      	ldrlt	r2, [sp, #20]
 80055ac:	9e05      	ldrge	r6, [sp, #20]
 80055ae:	eba2 060a 	sublt.w	r6, r2, sl
 80055b2:	4652      	movge	r2, sl
 80055b4:	bfb8      	it	lt
 80055b6:	2200      	movlt	r2, #0
 80055b8:	e727      	b.n	800540a <_dtoa_r+0x63a>
 80055ba:	9e05      	ldr	r6, [sp, #20]
 80055bc:	9d08      	ldr	r5, [sp, #32]
 80055be:	461c      	mov	r4, r3
 80055c0:	e730      	b.n	8005424 <_dtoa_r+0x654>
 80055c2:	461a      	mov	r2, r3
 80055c4:	e758      	b.n	8005478 <_dtoa_r+0x6a8>
 80055c6:	2300      	movs	r3, #0
 80055c8:	e786      	b.n	80054d8 <_dtoa_r+0x708>
 80055ca:	9b02      	ldr	r3, [sp, #8]
 80055cc:	e784      	b.n	80054d8 <_dtoa_r+0x708>
 80055ce:	920b      	str	r2, [sp, #44]	@ 0x2c
 80055d0:	e783      	b.n	80054da <_dtoa_r+0x70a>
 80055d2:	2300      	movs	r3, #0
 80055d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80055d6:	e784      	b.n	80054e2 <_dtoa_r+0x712>
 80055d8:	d09d      	beq.n	8005516 <_dtoa_r+0x746>
 80055da:	9b05      	ldr	r3, [sp, #20]
 80055dc:	321c      	adds	r2, #28
 80055de:	4413      	add	r3, r2
 80055e0:	9305      	str	r3, [sp, #20]
 80055e2:	9b06      	ldr	r3, [sp, #24]
 80055e4:	4416      	add	r6, r2
 80055e6:	4413      	add	r3, r2
 80055e8:	e794      	b.n	8005514 <_dtoa_r+0x744>
 80055ea:	4602      	mov	r2, r0
 80055ec:	e7f5      	b.n	80055da <_dtoa_r+0x80a>
 80055ee:	f1ba 0f00 	cmp.w	sl, #0
 80055f2:	f8cd 8010 	str.w	r8, [sp, #16]
 80055f6:	46d3      	mov	fp, sl
 80055f8:	dc21      	bgt.n	800563e <_dtoa_r+0x86e>
 80055fa:	9b07      	ldr	r3, [sp, #28]
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	dd1e      	ble.n	800563e <_dtoa_r+0x86e>
 8005600:	f1bb 0f00 	cmp.w	fp, #0
 8005604:	f47f aeb7 	bne.w	8005376 <_dtoa_r+0x5a6>
 8005608:	4621      	mov	r1, r4
 800560a:	465b      	mov	r3, fp
 800560c:	2205      	movs	r2, #5
 800560e:	4648      	mov	r0, r9
 8005610:	f000 fa96 	bl	8005b40 <__multadd>
 8005614:	4601      	mov	r1, r0
 8005616:	4604      	mov	r4, r0
 8005618:	9801      	ldr	r0, [sp, #4]
 800561a:	f000 fca9 	bl	8005f70 <__mcmp>
 800561e:	2800      	cmp	r0, #0
 8005620:	f77f aea9 	ble.w	8005376 <_dtoa_r+0x5a6>
 8005624:	463e      	mov	r6, r7
 8005626:	2331      	movs	r3, #49	@ 0x31
 8005628:	f806 3b01 	strb.w	r3, [r6], #1
 800562c:	9b04      	ldr	r3, [sp, #16]
 800562e:	3301      	adds	r3, #1
 8005630:	9304      	str	r3, [sp, #16]
 8005632:	e6a4      	b.n	800537e <_dtoa_r+0x5ae>
 8005634:	f8cd 8010 	str.w	r8, [sp, #16]
 8005638:	4654      	mov	r4, sl
 800563a:	4625      	mov	r5, r4
 800563c:	e7f2      	b.n	8005624 <_dtoa_r+0x854>
 800563e:	9b08      	ldr	r3, [sp, #32]
 8005640:	2b00      	cmp	r3, #0
 8005642:	f000 8103 	beq.w	800584c <_dtoa_r+0xa7c>
 8005646:	2e00      	cmp	r6, #0
 8005648:	dd05      	ble.n	8005656 <_dtoa_r+0x886>
 800564a:	4629      	mov	r1, r5
 800564c:	4632      	mov	r2, r6
 800564e:	4648      	mov	r0, r9
 8005650:	f000 fc22 	bl	8005e98 <__lshift>
 8005654:	4605      	mov	r5, r0
 8005656:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005658:	2b00      	cmp	r3, #0
 800565a:	d058      	beq.n	800570e <_dtoa_r+0x93e>
 800565c:	6869      	ldr	r1, [r5, #4]
 800565e:	4648      	mov	r0, r9
 8005660:	f000 fa0c 	bl	8005a7c <_Balloc>
 8005664:	4606      	mov	r6, r0
 8005666:	b928      	cbnz	r0, 8005674 <_dtoa_r+0x8a4>
 8005668:	4b82      	ldr	r3, [pc, #520]	@ (8005874 <_dtoa_r+0xaa4>)
 800566a:	4602      	mov	r2, r0
 800566c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005670:	f7ff bbc7 	b.w	8004e02 <_dtoa_r+0x32>
 8005674:	692a      	ldr	r2, [r5, #16]
 8005676:	3202      	adds	r2, #2
 8005678:	0092      	lsls	r2, r2, #2
 800567a:	f105 010c 	add.w	r1, r5, #12
 800567e:	300c      	adds	r0, #12
 8005680:	f000 ffac 	bl	80065dc <memcpy>
 8005684:	2201      	movs	r2, #1
 8005686:	4631      	mov	r1, r6
 8005688:	4648      	mov	r0, r9
 800568a:	f000 fc05 	bl	8005e98 <__lshift>
 800568e:	1c7b      	adds	r3, r7, #1
 8005690:	9305      	str	r3, [sp, #20]
 8005692:	eb07 030b 	add.w	r3, r7, fp
 8005696:	9309      	str	r3, [sp, #36]	@ 0x24
 8005698:	9b02      	ldr	r3, [sp, #8]
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	46a8      	mov	r8, r5
 80056a0:	9308      	str	r3, [sp, #32]
 80056a2:	4605      	mov	r5, r0
 80056a4:	9b05      	ldr	r3, [sp, #20]
 80056a6:	9801      	ldr	r0, [sp, #4]
 80056a8:	4621      	mov	r1, r4
 80056aa:	f103 3bff 	add.w	fp, r3, #4294967295
 80056ae:	f7ff fb04 	bl	8004cba <quorem>
 80056b2:	4641      	mov	r1, r8
 80056b4:	9002      	str	r0, [sp, #8]
 80056b6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80056ba:	9801      	ldr	r0, [sp, #4]
 80056bc:	f000 fc58 	bl	8005f70 <__mcmp>
 80056c0:	462a      	mov	r2, r5
 80056c2:	9006      	str	r0, [sp, #24]
 80056c4:	4621      	mov	r1, r4
 80056c6:	4648      	mov	r0, r9
 80056c8:	f000 fc6e 	bl	8005fa8 <__mdiff>
 80056cc:	68c2      	ldr	r2, [r0, #12]
 80056ce:	4606      	mov	r6, r0
 80056d0:	b9fa      	cbnz	r2, 8005712 <_dtoa_r+0x942>
 80056d2:	4601      	mov	r1, r0
 80056d4:	9801      	ldr	r0, [sp, #4]
 80056d6:	f000 fc4b 	bl	8005f70 <__mcmp>
 80056da:	4602      	mov	r2, r0
 80056dc:	4631      	mov	r1, r6
 80056de:	4648      	mov	r0, r9
 80056e0:	920a      	str	r2, [sp, #40]	@ 0x28
 80056e2:	f000 fa0b 	bl	8005afc <_Bfree>
 80056e6:	9b07      	ldr	r3, [sp, #28]
 80056e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80056ea:	9e05      	ldr	r6, [sp, #20]
 80056ec:	ea43 0102 	orr.w	r1, r3, r2
 80056f0:	9b08      	ldr	r3, [sp, #32]
 80056f2:	4319      	orrs	r1, r3
 80056f4:	d10f      	bne.n	8005716 <_dtoa_r+0x946>
 80056f6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80056fa:	d028      	beq.n	800574e <_dtoa_r+0x97e>
 80056fc:	9b06      	ldr	r3, [sp, #24]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	dd02      	ble.n	8005708 <_dtoa_r+0x938>
 8005702:	9b02      	ldr	r3, [sp, #8]
 8005704:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8005708:	f88b a000 	strb.w	sl, [fp]
 800570c:	e639      	b.n	8005382 <_dtoa_r+0x5b2>
 800570e:	4628      	mov	r0, r5
 8005710:	e7bd      	b.n	800568e <_dtoa_r+0x8be>
 8005712:	2201      	movs	r2, #1
 8005714:	e7e2      	b.n	80056dc <_dtoa_r+0x90c>
 8005716:	9b06      	ldr	r3, [sp, #24]
 8005718:	2b00      	cmp	r3, #0
 800571a:	db04      	blt.n	8005726 <_dtoa_r+0x956>
 800571c:	9907      	ldr	r1, [sp, #28]
 800571e:	430b      	orrs	r3, r1
 8005720:	9908      	ldr	r1, [sp, #32]
 8005722:	430b      	orrs	r3, r1
 8005724:	d120      	bne.n	8005768 <_dtoa_r+0x998>
 8005726:	2a00      	cmp	r2, #0
 8005728:	ddee      	ble.n	8005708 <_dtoa_r+0x938>
 800572a:	9901      	ldr	r1, [sp, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	4648      	mov	r0, r9
 8005730:	f000 fbb2 	bl	8005e98 <__lshift>
 8005734:	4621      	mov	r1, r4
 8005736:	9001      	str	r0, [sp, #4]
 8005738:	f000 fc1a 	bl	8005f70 <__mcmp>
 800573c:	2800      	cmp	r0, #0
 800573e:	dc03      	bgt.n	8005748 <_dtoa_r+0x978>
 8005740:	d1e2      	bne.n	8005708 <_dtoa_r+0x938>
 8005742:	f01a 0f01 	tst.w	sl, #1
 8005746:	d0df      	beq.n	8005708 <_dtoa_r+0x938>
 8005748:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800574c:	d1d9      	bne.n	8005702 <_dtoa_r+0x932>
 800574e:	2339      	movs	r3, #57	@ 0x39
 8005750:	f88b 3000 	strb.w	r3, [fp]
 8005754:	4633      	mov	r3, r6
 8005756:	461e      	mov	r6, r3
 8005758:	3b01      	subs	r3, #1
 800575a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800575e:	2a39      	cmp	r2, #57	@ 0x39
 8005760:	d053      	beq.n	800580a <_dtoa_r+0xa3a>
 8005762:	3201      	adds	r2, #1
 8005764:	701a      	strb	r2, [r3, #0]
 8005766:	e60c      	b.n	8005382 <_dtoa_r+0x5b2>
 8005768:	2a00      	cmp	r2, #0
 800576a:	dd07      	ble.n	800577c <_dtoa_r+0x9ac>
 800576c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8005770:	d0ed      	beq.n	800574e <_dtoa_r+0x97e>
 8005772:	f10a 0301 	add.w	r3, sl, #1
 8005776:	f88b 3000 	strb.w	r3, [fp]
 800577a:	e602      	b.n	8005382 <_dtoa_r+0x5b2>
 800577c:	9b05      	ldr	r3, [sp, #20]
 800577e:	9a05      	ldr	r2, [sp, #20]
 8005780:	f803 ac01 	strb.w	sl, [r3, #-1]
 8005784:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005786:	4293      	cmp	r3, r2
 8005788:	d029      	beq.n	80057de <_dtoa_r+0xa0e>
 800578a:	9901      	ldr	r1, [sp, #4]
 800578c:	2300      	movs	r3, #0
 800578e:	220a      	movs	r2, #10
 8005790:	4648      	mov	r0, r9
 8005792:	f000 f9d5 	bl	8005b40 <__multadd>
 8005796:	45a8      	cmp	r8, r5
 8005798:	9001      	str	r0, [sp, #4]
 800579a:	f04f 0300 	mov.w	r3, #0
 800579e:	f04f 020a 	mov.w	r2, #10
 80057a2:	4641      	mov	r1, r8
 80057a4:	4648      	mov	r0, r9
 80057a6:	d107      	bne.n	80057b8 <_dtoa_r+0x9e8>
 80057a8:	f000 f9ca 	bl	8005b40 <__multadd>
 80057ac:	4680      	mov	r8, r0
 80057ae:	4605      	mov	r5, r0
 80057b0:	9b05      	ldr	r3, [sp, #20]
 80057b2:	3301      	adds	r3, #1
 80057b4:	9305      	str	r3, [sp, #20]
 80057b6:	e775      	b.n	80056a4 <_dtoa_r+0x8d4>
 80057b8:	f000 f9c2 	bl	8005b40 <__multadd>
 80057bc:	4629      	mov	r1, r5
 80057be:	4680      	mov	r8, r0
 80057c0:	2300      	movs	r3, #0
 80057c2:	220a      	movs	r2, #10
 80057c4:	4648      	mov	r0, r9
 80057c6:	f000 f9bb 	bl	8005b40 <__multadd>
 80057ca:	4605      	mov	r5, r0
 80057cc:	e7f0      	b.n	80057b0 <_dtoa_r+0x9e0>
 80057ce:	f1bb 0f00 	cmp.w	fp, #0
 80057d2:	bfcc      	ite	gt
 80057d4:	465e      	movgt	r6, fp
 80057d6:	2601      	movle	r6, #1
 80057d8:	443e      	add	r6, r7
 80057da:	f04f 0800 	mov.w	r8, #0
 80057de:	9901      	ldr	r1, [sp, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	4648      	mov	r0, r9
 80057e4:	f000 fb58 	bl	8005e98 <__lshift>
 80057e8:	4621      	mov	r1, r4
 80057ea:	9001      	str	r0, [sp, #4]
 80057ec:	f000 fbc0 	bl	8005f70 <__mcmp>
 80057f0:	2800      	cmp	r0, #0
 80057f2:	dcaf      	bgt.n	8005754 <_dtoa_r+0x984>
 80057f4:	d102      	bne.n	80057fc <_dtoa_r+0xa2c>
 80057f6:	f01a 0f01 	tst.w	sl, #1
 80057fa:	d1ab      	bne.n	8005754 <_dtoa_r+0x984>
 80057fc:	4633      	mov	r3, r6
 80057fe:	461e      	mov	r6, r3
 8005800:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005804:	2a30      	cmp	r2, #48	@ 0x30
 8005806:	d0fa      	beq.n	80057fe <_dtoa_r+0xa2e>
 8005808:	e5bb      	b.n	8005382 <_dtoa_r+0x5b2>
 800580a:	429f      	cmp	r7, r3
 800580c:	d1a3      	bne.n	8005756 <_dtoa_r+0x986>
 800580e:	9b04      	ldr	r3, [sp, #16]
 8005810:	3301      	adds	r3, #1
 8005812:	9304      	str	r3, [sp, #16]
 8005814:	2331      	movs	r3, #49	@ 0x31
 8005816:	703b      	strb	r3, [r7, #0]
 8005818:	e5b3      	b.n	8005382 <_dtoa_r+0x5b2>
 800581a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800581c:	4f16      	ldr	r7, [pc, #88]	@ (8005878 <_dtoa_r+0xaa8>)
 800581e:	b11b      	cbz	r3, 8005828 <_dtoa_r+0xa58>
 8005820:	f107 0308 	add.w	r3, r7, #8
 8005824:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8005826:	6013      	str	r3, [r2, #0]
 8005828:	4638      	mov	r0, r7
 800582a:	b011      	add	sp, #68	@ 0x44
 800582c:	ecbd 8b02 	vpop	{d8}
 8005830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005834:	9b07      	ldr	r3, [sp, #28]
 8005836:	2b01      	cmp	r3, #1
 8005838:	f77f ae36 	ble.w	80054a8 <_dtoa_r+0x6d8>
 800583c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800583e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005840:	2001      	movs	r0, #1
 8005842:	e656      	b.n	80054f2 <_dtoa_r+0x722>
 8005844:	f1bb 0f00 	cmp.w	fp, #0
 8005848:	f77f aed7 	ble.w	80055fa <_dtoa_r+0x82a>
 800584c:	463e      	mov	r6, r7
 800584e:	9801      	ldr	r0, [sp, #4]
 8005850:	4621      	mov	r1, r4
 8005852:	f7ff fa32 	bl	8004cba <quorem>
 8005856:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800585a:	f806 ab01 	strb.w	sl, [r6], #1
 800585e:	1bf2      	subs	r2, r6, r7
 8005860:	4593      	cmp	fp, r2
 8005862:	ddb4      	ble.n	80057ce <_dtoa_r+0x9fe>
 8005864:	9901      	ldr	r1, [sp, #4]
 8005866:	2300      	movs	r3, #0
 8005868:	220a      	movs	r2, #10
 800586a:	4648      	mov	r0, r9
 800586c:	f000 f968 	bl	8005b40 <__multadd>
 8005870:	9001      	str	r0, [sp, #4]
 8005872:	e7ec      	b.n	800584e <_dtoa_r+0xa7e>
 8005874:	08006dc4 	.word	0x08006dc4
 8005878:	08006d48 	.word	0x08006d48

0800587c <_free_r>:
 800587c:	b538      	push	{r3, r4, r5, lr}
 800587e:	4605      	mov	r5, r0
 8005880:	2900      	cmp	r1, #0
 8005882:	d041      	beq.n	8005908 <_free_r+0x8c>
 8005884:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005888:	1f0c      	subs	r4, r1, #4
 800588a:	2b00      	cmp	r3, #0
 800588c:	bfb8      	it	lt
 800588e:	18e4      	addlt	r4, r4, r3
 8005890:	f000 f8e8 	bl	8005a64 <__malloc_lock>
 8005894:	4a1d      	ldr	r2, [pc, #116]	@ (800590c <_free_r+0x90>)
 8005896:	6813      	ldr	r3, [r2, #0]
 8005898:	b933      	cbnz	r3, 80058a8 <_free_r+0x2c>
 800589a:	6063      	str	r3, [r4, #4]
 800589c:	6014      	str	r4, [r2, #0]
 800589e:	4628      	mov	r0, r5
 80058a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058a4:	f000 b8e4 	b.w	8005a70 <__malloc_unlock>
 80058a8:	42a3      	cmp	r3, r4
 80058aa:	d908      	bls.n	80058be <_free_r+0x42>
 80058ac:	6820      	ldr	r0, [r4, #0]
 80058ae:	1821      	adds	r1, r4, r0
 80058b0:	428b      	cmp	r3, r1
 80058b2:	bf01      	itttt	eq
 80058b4:	6819      	ldreq	r1, [r3, #0]
 80058b6:	685b      	ldreq	r3, [r3, #4]
 80058b8:	1809      	addeq	r1, r1, r0
 80058ba:	6021      	streq	r1, [r4, #0]
 80058bc:	e7ed      	b.n	800589a <_free_r+0x1e>
 80058be:	461a      	mov	r2, r3
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	b10b      	cbz	r3, 80058c8 <_free_r+0x4c>
 80058c4:	42a3      	cmp	r3, r4
 80058c6:	d9fa      	bls.n	80058be <_free_r+0x42>
 80058c8:	6811      	ldr	r1, [r2, #0]
 80058ca:	1850      	adds	r0, r2, r1
 80058cc:	42a0      	cmp	r0, r4
 80058ce:	d10b      	bne.n	80058e8 <_free_r+0x6c>
 80058d0:	6820      	ldr	r0, [r4, #0]
 80058d2:	4401      	add	r1, r0
 80058d4:	1850      	adds	r0, r2, r1
 80058d6:	4283      	cmp	r3, r0
 80058d8:	6011      	str	r1, [r2, #0]
 80058da:	d1e0      	bne.n	800589e <_free_r+0x22>
 80058dc:	6818      	ldr	r0, [r3, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	6053      	str	r3, [r2, #4]
 80058e2:	4408      	add	r0, r1
 80058e4:	6010      	str	r0, [r2, #0]
 80058e6:	e7da      	b.n	800589e <_free_r+0x22>
 80058e8:	d902      	bls.n	80058f0 <_free_r+0x74>
 80058ea:	230c      	movs	r3, #12
 80058ec:	602b      	str	r3, [r5, #0]
 80058ee:	e7d6      	b.n	800589e <_free_r+0x22>
 80058f0:	6820      	ldr	r0, [r4, #0]
 80058f2:	1821      	adds	r1, r4, r0
 80058f4:	428b      	cmp	r3, r1
 80058f6:	bf04      	itt	eq
 80058f8:	6819      	ldreq	r1, [r3, #0]
 80058fa:	685b      	ldreq	r3, [r3, #4]
 80058fc:	6063      	str	r3, [r4, #4]
 80058fe:	bf04      	itt	eq
 8005900:	1809      	addeq	r1, r1, r0
 8005902:	6021      	streq	r1, [r4, #0]
 8005904:	6054      	str	r4, [r2, #4]
 8005906:	e7ca      	b.n	800589e <_free_r+0x22>
 8005908:	bd38      	pop	{r3, r4, r5, pc}
 800590a:	bf00      	nop
 800590c:	200004d4 	.word	0x200004d4

08005910 <malloc>:
 8005910:	4b02      	ldr	r3, [pc, #8]	@ (800591c <malloc+0xc>)
 8005912:	4601      	mov	r1, r0
 8005914:	6818      	ldr	r0, [r3, #0]
 8005916:	f000 b825 	b.w	8005964 <_malloc_r>
 800591a:	bf00      	nop
 800591c:	20000018 	.word	0x20000018

08005920 <sbrk_aligned>:
 8005920:	b570      	push	{r4, r5, r6, lr}
 8005922:	4e0f      	ldr	r6, [pc, #60]	@ (8005960 <sbrk_aligned+0x40>)
 8005924:	460c      	mov	r4, r1
 8005926:	6831      	ldr	r1, [r6, #0]
 8005928:	4605      	mov	r5, r0
 800592a:	b911      	cbnz	r1, 8005932 <sbrk_aligned+0x12>
 800592c:	f000 fe46 	bl	80065bc <_sbrk_r>
 8005930:	6030      	str	r0, [r6, #0]
 8005932:	4621      	mov	r1, r4
 8005934:	4628      	mov	r0, r5
 8005936:	f000 fe41 	bl	80065bc <_sbrk_r>
 800593a:	1c43      	adds	r3, r0, #1
 800593c:	d103      	bne.n	8005946 <sbrk_aligned+0x26>
 800593e:	f04f 34ff 	mov.w	r4, #4294967295
 8005942:	4620      	mov	r0, r4
 8005944:	bd70      	pop	{r4, r5, r6, pc}
 8005946:	1cc4      	adds	r4, r0, #3
 8005948:	f024 0403 	bic.w	r4, r4, #3
 800594c:	42a0      	cmp	r0, r4
 800594e:	d0f8      	beq.n	8005942 <sbrk_aligned+0x22>
 8005950:	1a21      	subs	r1, r4, r0
 8005952:	4628      	mov	r0, r5
 8005954:	f000 fe32 	bl	80065bc <_sbrk_r>
 8005958:	3001      	adds	r0, #1
 800595a:	d1f2      	bne.n	8005942 <sbrk_aligned+0x22>
 800595c:	e7ef      	b.n	800593e <sbrk_aligned+0x1e>
 800595e:	bf00      	nop
 8005960:	200004d0 	.word	0x200004d0

08005964 <_malloc_r>:
 8005964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005968:	1ccd      	adds	r5, r1, #3
 800596a:	f025 0503 	bic.w	r5, r5, #3
 800596e:	3508      	adds	r5, #8
 8005970:	2d0c      	cmp	r5, #12
 8005972:	bf38      	it	cc
 8005974:	250c      	movcc	r5, #12
 8005976:	2d00      	cmp	r5, #0
 8005978:	4606      	mov	r6, r0
 800597a:	db01      	blt.n	8005980 <_malloc_r+0x1c>
 800597c:	42a9      	cmp	r1, r5
 800597e:	d904      	bls.n	800598a <_malloc_r+0x26>
 8005980:	230c      	movs	r3, #12
 8005982:	6033      	str	r3, [r6, #0]
 8005984:	2000      	movs	r0, #0
 8005986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800598a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a60 <_malloc_r+0xfc>
 800598e:	f000 f869 	bl	8005a64 <__malloc_lock>
 8005992:	f8d8 3000 	ldr.w	r3, [r8]
 8005996:	461c      	mov	r4, r3
 8005998:	bb44      	cbnz	r4, 80059ec <_malloc_r+0x88>
 800599a:	4629      	mov	r1, r5
 800599c:	4630      	mov	r0, r6
 800599e:	f7ff ffbf 	bl	8005920 <sbrk_aligned>
 80059a2:	1c43      	adds	r3, r0, #1
 80059a4:	4604      	mov	r4, r0
 80059a6:	d158      	bne.n	8005a5a <_malloc_r+0xf6>
 80059a8:	f8d8 4000 	ldr.w	r4, [r8]
 80059ac:	4627      	mov	r7, r4
 80059ae:	2f00      	cmp	r7, #0
 80059b0:	d143      	bne.n	8005a3a <_malloc_r+0xd6>
 80059b2:	2c00      	cmp	r4, #0
 80059b4:	d04b      	beq.n	8005a4e <_malloc_r+0xea>
 80059b6:	6823      	ldr	r3, [r4, #0]
 80059b8:	4639      	mov	r1, r7
 80059ba:	4630      	mov	r0, r6
 80059bc:	eb04 0903 	add.w	r9, r4, r3
 80059c0:	f000 fdfc 	bl	80065bc <_sbrk_r>
 80059c4:	4581      	cmp	r9, r0
 80059c6:	d142      	bne.n	8005a4e <_malloc_r+0xea>
 80059c8:	6821      	ldr	r1, [r4, #0]
 80059ca:	1a6d      	subs	r5, r5, r1
 80059cc:	4629      	mov	r1, r5
 80059ce:	4630      	mov	r0, r6
 80059d0:	f7ff ffa6 	bl	8005920 <sbrk_aligned>
 80059d4:	3001      	adds	r0, #1
 80059d6:	d03a      	beq.n	8005a4e <_malloc_r+0xea>
 80059d8:	6823      	ldr	r3, [r4, #0]
 80059da:	442b      	add	r3, r5
 80059dc:	6023      	str	r3, [r4, #0]
 80059de:	f8d8 3000 	ldr.w	r3, [r8]
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	bb62      	cbnz	r2, 8005a40 <_malloc_r+0xdc>
 80059e6:	f8c8 7000 	str.w	r7, [r8]
 80059ea:	e00f      	b.n	8005a0c <_malloc_r+0xa8>
 80059ec:	6822      	ldr	r2, [r4, #0]
 80059ee:	1b52      	subs	r2, r2, r5
 80059f0:	d420      	bmi.n	8005a34 <_malloc_r+0xd0>
 80059f2:	2a0b      	cmp	r2, #11
 80059f4:	d917      	bls.n	8005a26 <_malloc_r+0xc2>
 80059f6:	1961      	adds	r1, r4, r5
 80059f8:	42a3      	cmp	r3, r4
 80059fa:	6025      	str	r5, [r4, #0]
 80059fc:	bf18      	it	ne
 80059fe:	6059      	strne	r1, [r3, #4]
 8005a00:	6863      	ldr	r3, [r4, #4]
 8005a02:	bf08      	it	eq
 8005a04:	f8c8 1000 	streq.w	r1, [r8]
 8005a08:	5162      	str	r2, [r4, r5]
 8005a0a:	604b      	str	r3, [r1, #4]
 8005a0c:	4630      	mov	r0, r6
 8005a0e:	f000 f82f 	bl	8005a70 <__malloc_unlock>
 8005a12:	f104 000b 	add.w	r0, r4, #11
 8005a16:	1d23      	adds	r3, r4, #4
 8005a18:	f020 0007 	bic.w	r0, r0, #7
 8005a1c:	1ac2      	subs	r2, r0, r3
 8005a1e:	bf1c      	itt	ne
 8005a20:	1a1b      	subne	r3, r3, r0
 8005a22:	50a3      	strne	r3, [r4, r2]
 8005a24:	e7af      	b.n	8005986 <_malloc_r+0x22>
 8005a26:	6862      	ldr	r2, [r4, #4]
 8005a28:	42a3      	cmp	r3, r4
 8005a2a:	bf0c      	ite	eq
 8005a2c:	f8c8 2000 	streq.w	r2, [r8]
 8005a30:	605a      	strne	r2, [r3, #4]
 8005a32:	e7eb      	b.n	8005a0c <_malloc_r+0xa8>
 8005a34:	4623      	mov	r3, r4
 8005a36:	6864      	ldr	r4, [r4, #4]
 8005a38:	e7ae      	b.n	8005998 <_malloc_r+0x34>
 8005a3a:	463c      	mov	r4, r7
 8005a3c:	687f      	ldr	r7, [r7, #4]
 8005a3e:	e7b6      	b.n	80059ae <_malloc_r+0x4a>
 8005a40:	461a      	mov	r2, r3
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	42a3      	cmp	r3, r4
 8005a46:	d1fb      	bne.n	8005a40 <_malloc_r+0xdc>
 8005a48:	2300      	movs	r3, #0
 8005a4a:	6053      	str	r3, [r2, #4]
 8005a4c:	e7de      	b.n	8005a0c <_malloc_r+0xa8>
 8005a4e:	230c      	movs	r3, #12
 8005a50:	6033      	str	r3, [r6, #0]
 8005a52:	4630      	mov	r0, r6
 8005a54:	f000 f80c 	bl	8005a70 <__malloc_unlock>
 8005a58:	e794      	b.n	8005984 <_malloc_r+0x20>
 8005a5a:	6005      	str	r5, [r0, #0]
 8005a5c:	e7d6      	b.n	8005a0c <_malloc_r+0xa8>
 8005a5e:	bf00      	nop
 8005a60:	200004d4 	.word	0x200004d4

08005a64 <__malloc_lock>:
 8005a64:	4801      	ldr	r0, [pc, #4]	@ (8005a6c <__malloc_lock+0x8>)
 8005a66:	f7ff b926 	b.w	8004cb6 <__retarget_lock_acquire_recursive>
 8005a6a:	bf00      	nop
 8005a6c:	200004cc 	.word	0x200004cc

08005a70 <__malloc_unlock>:
 8005a70:	4801      	ldr	r0, [pc, #4]	@ (8005a78 <__malloc_unlock+0x8>)
 8005a72:	f7ff b921 	b.w	8004cb8 <__retarget_lock_release_recursive>
 8005a76:	bf00      	nop
 8005a78:	200004cc 	.word	0x200004cc

08005a7c <_Balloc>:
 8005a7c:	b570      	push	{r4, r5, r6, lr}
 8005a7e:	69c6      	ldr	r6, [r0, #28]
 8005a80:	4604      	mov	r4, r0
 8005a82:	460d      	mov	r5, r1
 8005a84:	b976      	cbnz	r6, 8005aa4 <_Balloc+0x28>
 8005a86:	2010      	movs	r0, #16
 8005a88:	f7ff ff42 	bl	8005910 <malloc>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	61e0      	str	r0, [r4, #28]
 8005a90:	b920      	cbnz	r0, 8005a9c <_Balloc+0x20>
 8005a92:	4b18      	ldr	r3, [pc, #96]	@ (8005af4 <_Balloc+0x78>)
 8005a94:	4818      	ldr	r0, [pc, #96]	@ (8005af8 <_Balloc+0x7c>)
 8005a96:	216b      	movs	r1, #107	@ 0x6b
 8005a98:	f000 fdae 	bl	80065f8 <__assert_func>
 8005a9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005aa0:	6006      	str	r6, [r0, #0]
 8005aa2:	60c6      	str	r6, [r0, #12]
 8005aa4:	69e6      	ldr	r6, [r4, #28]
 8005aa6:	68f3      	ldr	r3, [r6, #12]
 8005aa8:	b183      	cbz	r3, 8005acc <_Balloc+0x50>
 8005aaa:	69e3      	ldr	r3, [r4, #28]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ab2:	b9b8      	cbnz	r0, 8005ae4 <_Balloc+0x68>
 8005ab4:	2101      	movs	r1, #1
 8005ab6:	fa01 f605 	lsl.w	r6, r1, r5
 8005aba:	1d72      	adds	r2, r6, #5
 8005abc:	0092      	lsls	r2, r2, #2
 8005abe:	4620      	mov	r0, r4
 8005ac0:	f000 fdb8 	bl	8006634 <_calloc_r>
 8005ac4:	b160      	cbz	r0, 8005ae0 <_Balloc+0x64>
 8005ac6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005aca:	e00e      	b.n	8005aea <_Balloc+0x6e>
 8005acc:	2221      	movs	r2, #33	@ 0x21
 8005ace:	2104      	movs	r1, #4
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	f000 fdaf 	bl	8006634 <_calloc_r>
 8005ad6:	69e3      	ldr	r3, [r4, #28]
 8005ad8:	60f0      	str	r0, [r6, #12]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1e4      	bne.n	8005aaa <_Balloc+0x2e>
 8005ae0:	2000      	movs	r0, #0
 8005ae2:	bd70      	pop	{r4, r5, r6, pc}
 8005ae4:	6802      	ldr	r2, [r0, #0]
 8005ae6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005aea:	2300      	movs	r3, #0
 8005aec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005af0:	e7f7      	b.n	8005ae2 <_Balloc+0x66>
 8005af2:	bf00      	nop
 8005af4:	08006d55 	.word	0x08006d55
 8005af8:	08006dd5 	.word	0x08006dd5

08005afc <_Bfree>:
 8005afc:	b570      	push	{r4, r5, r6, lr}
 8005afe:	69c6      	ldr	r6, [r0, #28]
 8005b00:	4605      	mov	r5, r0
 8005b02:	460c      	mov	r4, r1
 8005b04:	b976      	cbnz	r6, 8005b24 <_Bfree+0x28>
 8005b06:	2010      	movs	r0, #16
 8005b08:	f7ff ff02 	bl	8005910 <malloc>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	61e8      	str	r0, [r5, #28]
 8005b10:	b920      	cbnz	r0, 8005b1c <_Bfree+0x20>
 8005b12:	4b09      	ldr	r3, [pc, #36]	@ (8005b38 <_Bfree+0x3c>)
 8005b14:	4809      	ldr	r0, [pc, #36]	@ (8005b3c <_Bfree+0x40>)
 8005b16:	218f      	movs	r1, #143	@ 0x8f
 8005b18:	f000 fd6e 	bl	80065f8 <__assert_func>
 8005b1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b20:	6006      	str	r6, [r0, #0]
 8005b22:	60c6      	str	r6, [r0, #12]
 8005b24:	b13c      	cbz	r4, 8005b36 <_Bfree+0x3a>
 8005b26:	69eb      	ldr	r3, [r5, #28]
 8005b28:	6862      	ldr	r2, [r4, #4]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b30:	6021      	str	r1, [r4, #0]
 8005b32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005b36:	bd70      	pop	{r4, r5, r6, pc}
 8005b38:	08006d55 	.word	0x08006d55
 8005b3c:	08006dd5 	.word	0x08006dd5

08005b40 <__multadd>:
 8005b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b44:	690d      	ldr	r5, [r1, #16]
 8005b46:	4607      	mov	r7, r0
 8005b48:	460c      	mov	r4, r1
 8005b4a:	461e      	mov	r6, r3
 8005b4c:	f101 0c14 	add.w	ip, r1, #20
 8005b50:	2000      	movs	r0, #0
 8005b52:	f8dc 3000 	ldr.w	r3, [ip]
 8005b56:	b299      	uxth	r1, r3
 8005b58:	fb02 6101 	mla	r1, r2, r1, r6
 8005b5c:	0c1e      	lsrs	r6, r3, #16
 8005b5e:	0c0b      	lsrs	r3, r1, #16
 8005b60:	fb02 3306 	mla	r3, r2, r6, r3
 8005b64:	b289      	uxth	r1, r1
 8005b66:	3001      	adds	r0, #1
 8005b68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005b6c:	4285      	cmp	r5, r0
 8005b6e:	f84c 1b04 	str.w	r1, [ip], #4
 8005b72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005b76:	dcec      	bgt.n	8005b52 <__multadd+0x12>
 8005b78:	b30e      	cbz	r6, 8005bbe <__multadd+0x7e>
 8005b7a:	68a3      	ldr	r3, [r4, #8]
 8005b7c:	42ab      	cmp	r3, r5
 8005b7e:	dc19      	bgt.n	8005bb4 <__multadd+0x74>
 8005b80:	6861      	ldr	r1, [r4, #4]
 8005b82:	4638      	mov	r0, r7
 8005b84:	3101      	adds	r1, #1
 8005b86:	f7ff ff79 	bl	8005a7c <_Balloc>
 8005b8a:	4680      	mov	r8, r0
 8005b8c:	b928      	cbnz	r0, 8005b9a <__multadd+0x5a>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	4b0c      	ldr	r3, [pc, #48]	@ (8005bc4 <__multadd+0x84>)
 8005b92:	480d      	ldr	r0, [pc, #52]	@ (8005bc8 <__multadd+0x88>)
 8005b94:	21ba      	movs	r1, #186	@ 0xba
 8005b96:	f000 fd2f 	bl	80065f8 <__assert_func>
 8005b9a:	6922      	ldr	r2, [r4, #16]
 8005b9c:	3202      	adds	r2, #2
 8005b9e:	f104 010c 	add.w	r1, r4, #12
 8005ba2:	0092      	lsls	r2, r2, #2
 8005ba4:	300c      	adds	r0, #12
 8005ba6:	f000 fd19 	bl	80065dc <memcpy>
 8005baa:	4621      	mov	r1, r4
 8005bac:	4638      	mov	r0, r7
 8005bae:	f7ff ffa5 	bl	8005afc <_Bfree>
 8005bb2:	4644      	mov	r4, r8
 8005bb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005bb8:	3501      	adds	r5, #1
 8005bba:	615e      	str	r6, [r3, #20]
 8005bbc:	6125      	str	r5, [r4, #16]
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bc4:	08006dc4 	.word	0x08006dc4
 8005bc8:	08006dd5 	.word	0x08006dd5

08005bcc <__hi0bits>:
 8005bcc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	bf36      	itet	cc
 8005bd4:	0403      	lslcc	r3, r0, #16
 8005bd6:	2000      	movcs	r0, #0
 8005bd8:	2010      	movcc	r0, #16
 8005bda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005bde:	bf3c      	itt	cc
 8005be0:	021b      	lslcc	r3, r3, #8
 8005be2:	3008      	addcc	r0, #8
 8005be4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005be8:	bf3c      	itt	cc
 8005bea:	011b      	lslcc	r3, r3, #4
 8005bec:	3004      	addcc	r0, #4
 8005bee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bf2:	bf3c      	itt	cc
 8005bf4:	009b      	lslcc	r3, r3, #2
 8005bf6:	3002      	addcc	r0, #2
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	db05      	blt.n	8005c08 <__hi0bits+0x3c>
 8005bfc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005c00:	f100 0001 	add.w	r0, r0, #1
 8005c04:	bf08      	it	eq
 8005c06:	2020      	moveq	r0, #32
 8005c08:	4770      	bx	lr

08005c0a <__lo0bits>:
 8005c0a:	6803      	ldr	r3, [r0, #0]
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	f013 0007 	ands.w	r0, r3, #7
 8005c12:	d00b      	beq.n	8005c2c <__lo0bits+0x22>
 8005c14:	07d9      	lsls	r1, r3, #31
 8005c16:	d421      	bmi.n	8005c5c <__lo0bits+0x52>
 8005c18:	0798      	lsls	r0, r3, #30
 8005c1a:	bf49      	itett	mi
 8005c1c:	085b      	lsrmi	r3, r3, #1
 8005c1e:	089b      	lsrpl	r3, r3, #2
 8005c20:	2001      	movmi	r0, #1
 8005c22:	6013      	strmi	r3, [r2, #0]
 8005c24:	bf5c      	itt	pl
 8005c26:	6013      	strpl	r3, [r2, #0]
 8005c28:	2002      	movpl	r0, #2
 8005c2a:	4770      	bx	lr
 8005c2c:	b299      	uxth	r1, r3
 8005c2e:	b909      	cbnz	r1, 8005c34 <__lo0bits+0x2a>
 8005c30:	0c1b      	lsrs	r3, r3, #16
 8005c32:	2010      	movs	r0, #16
 8005c34:	b2d9      	uxtb	r1, r3
 8005c36:	b909      	cbnz	r1, 8005c3c <__lo0bits+0x32>
 8005c38:	3008      	adds	r0, #8
 8005c3a:	0a1b      	lsrs	r3, r3, #8
 8005c3c:	0719      	lsls	r1, r3, #28
 8005c3e:	bf04      	itt	eq
 8005c40:	091b      	lsreq	r3, r3, #4
 8005c42:	3004      	addeq	r0, #4
 8005c44:	0799      	lsls	r1, r3, #30
 8005c46:	bf04      	itt	eq
 8005c48:	089b      	lsreq	r3, r3, #2
 8005c4a:	3002      	addeq	r0, #2
 8005c4c:	07d9      	lsls	r1, r3, #31
 8005c4e:	d403      	bmi.n	8005c58 <__lo0bits+0x4e>
 8005c50:	085b      	lsrs	r3, r3, #1
 8005c52:	f100 0001 	add.w	r0, r0, #1
 8005c56:	d003      	beq.n	8005c60 <__lo0bits+0x56>
 8005c58:	6013      	str	r3, [r2, #0]
 8005c5a:	4770      	bx	lr
 8005c5c:	2000      	movs	r0, #0
 8005c5e:	4770      	bx	lr
 8005c60:	2020      	movs	r0, #32
 8005c62:	4770      	bx	lr

08005c64 <__i2b>:
 8005c64:	b510      	push	{r4, lr}
 8005c66:	460c      	mov	r4, r1
 8005c68:	2101      	movs	r1, #1
 8005c6a:	f7ff ff07 	bl	8005a7c <_Balloc>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	b928      	cbnz	r0, 8005c7e <__i2b+0x1a>
 8005c72:	4b05      	ldr	r3, [pc, #20]	@ (8005c88 <__i2b+0x24>)
 8005c74:	4805      	ldr	r0, [pc, #20]	@ (8005c8c <__i2b+0x28>)
 8005c76:	f240 1145 	movw	r1, #325	@ 0x145
 8005c7a:	f000 fcbd 	bl	80065f8 <__assert_func>
 8005c7e:	2301      	movs	r3, #1
 8005c80:	6144      	str	r4, [r0, #20]
 8005c82:	6103      	str	r3, [r0, #16]
 8005c84:	bd10      	pop	{r4, pc}
 8005c86:	bf00      	nop
 8005c88:	08006dc4 	.word	0x08006dc4
 8005c8c:	08006dd5 	.word	0x08006dd5

08005c90 <__multiply>:
 8005c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c94:	4614      	mov	r4, r2
 8005c96:	690a      	ldr	r2, [r1, #16]
 8005c98:	6923      	ldr	r3, [r4, #16]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	bfa8      	it	ge
 8005c9e:	4623      	movge	r3, r4
 8005ca0:	460f      	mov	r7, r1
 8005ca2:	bfa4      	itt	ge
 8005ca4:	460c      	movge	r4, r1
 8005ca6:	461f      	movge	r7, r3
 8005ca8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005cac:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005cb0:	68a3      	ldr	r3, [r4, #8]
 8005cb2:	6861      	ldr	r1, [r4, #4]
 8005cb4:	eb0a 0609 	add.w	r6, sl, r9
 8005cb8:	42b3      	cmp	r3, r6
 8005cba:	b085      	sub	sp, #20
 8005cbc:	bfb8      	it	lt
 8005cbe:	3101      	addlt	r1, #1
 8005cc0:	f7ff fedc 	bl	8005a7c <_Balloc>
 8005cc4:	b930      	cbnz	r0, 8005cd4 <__multiply+0x44>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	4b44      	ldr	r3, [pc, #272]	@ (8005ddc <__multiply+0x14c>)
 8005cca:	4845      	ldr	r0, [pc, #276]	@ (8005de0 <__multiply+0x150>)
 8005ccc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005cd0:	f000 fc92 	bl	80065f8 <__assert_func>
 8005cd4:	f100 0514 	add.w	r5, r0, #20
 8005cd8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005cdc:	462b      	mov	r3, r5
 8005cde:	2200      	movs	r2, #0
 8005ce0:	4543      	cmp	r3, r8
 8005ce2:	d321      	bcc.n	8005d28 <__multiply+0x98>
 8005ce4:	f107 0114 	add.w	r1, r7, #20
 8005ce8:	f104 0214 	add.w	r2, r4, #20
 8005cec:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005cf0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005cf4:	9302      	str	r3, [sp, #8]
 8005cf6:	1b13      	subs	r3, r2, r4
 8005cf8:	3b15      	subs	r3, #21
 8005cfa:	f023 0303 	bic.w	r3, r3, #3
 8005cfe:	3304      	adds	r3, #4
 8005d00:	f104 0715 	add.w	r7, r4, #21
 8005d04:	42ba      	cmp	r2, r7
 8005d06:	bf38      	it	cc
 8005d08:	2304      	movcc	r3, #4
 8005d0a:	9301      	str	r3, [sp, #4]
 8005d0c:	9b02      	ldr	r3, [sp, #8]
 8005d0e:	9103      	str	r1, [sp, #12]
 8005d10:	428b      	cmp	r3, r1
 8005d12:	d80c      	bhi.n	8005d2e <__multiply+0x9e>
 8005d14:	2e00      	cmp	r6, #0
 8005d16:	dd03      	ble.n	8005d20 <__multiply+0x90>
 8005d18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d05b      	beq.n	8005dd8 <__multiply+0x148>
 8005d20:	6106      	str	r6, [r0, #16]
 8005d22:	b005      	add	sp, #20
 8005d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d28:	f843 2b04 	str.w	r2, [r3], #4
 8005d2c:	e7d8      	b.n	8005ce0 <__multiply+0x50>
 8005d2e:	f8b1 a000 	ldrh.w	sl, [r1]
 8005d32:	f1ba 0f00 	cmp.w	sl, #0
 8005d36:	d024      	beq.n	8005d82 <__multiply+0xf2>
 8005d38:	f104 0e14 	add.w	lr, r4, #20
 8005d3c:	46a9      	mov	r9, r5
 8005d3e:	f04f 0c00 	mov.w	ip, #0
 8005d42:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005d46:	f8d9 3000 	ldr.w	r3, [r9]
 8005d4a:	fa1f fb87 	uxth.w	fp, r7
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	fb0a 330b 	mla	r3, sl, fp, r3
 8005d54:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8005d58:	f8d9 7000 	ldr.w	r7, [r9]
 8005d5c:	4463      	add	r3, ip
 8005d5e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005d62:	fb0a c70b 	mla	r7, sl, fp, ip
 8005d66:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005d70:	4572      	cmp	r2, lr
 8005d72:	f849 3b04 	str.w	r3, [r9], #4
 8005d76:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005d7a:	d8e2      	bhi.n	8005d42 <__multiply+0xb2>
 8005d7c:	9b01      	ldr	r3, [sp, #4]
 8005d7e:	f845 c003 	str.w	ip, [r5, r3]
 8005d82:	9b03      	ldr	r3, [sp, #12]
 8005d84:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005d88:	3104      	adds	r1, #4
 8005d8a:	f1b9 0f00 	cmp.w	r9, #0
 8005d8e:	d021      	beq.n	8005dd4 <__multiply+0x144>
 8005d90:	682b      	ldr	r3, [r5, #0]
 8005d92:	f104 0c14 	add.w	ip, r4, #20
 8005d96:	46ae      	mov	lr, r5
 8005d98:	f04f 0a00 	mov.w	sl, #0
 8005d9c:	f8bc b000 	ldrh.w	fp, [ip]
 8005da0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005da4:	fb09 770b 	mla	r7, r9, fp, r7
 8005da8:	4457      	add	r7, sl
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005db0:	f84e 3b04 	str.w	r3, [lr], #4
 8005db4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005db8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005dbc:	f8be 3000 	ldrh.w	r3, [lr]
 8005dc0:	fb09 330a 	mla	r3, r9, sl, r3
 8005dc4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005dc8:	4562      	cmp	r2, ip
 8005dca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005dce:	d8e5      	bhi.n	8005d9c <__multiply+0x10c>
 8005dd0:	9f01      	ldr	r7, [sp, #4]
 8005dd2:	51eb      	str	r3, [r5, r7]
 8005dd4:	3504      	adds	r5, #4
 8005dd6:	e799      	b.n	8005d0c <__multiply+0x7c>
 8005dd8:	3e01      	subs	r6, #1
 8005dda:	e79b      	b.n	8005d14 <__multiply+0x84>
 8005ddc:	08006dc4 	.word	0x08006dc4
 8005de0:	08006dd5 	.word	0x08006dd5

08005de4 <__pow5mult>:
 8005de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005de8:	4615      	mov	r5, r2
 8005dea:	f012 0203 	ands.w	r2, r2, #3
 8005dee:	4607      	mov	r7, r0
 8005df0:	460e      	mov	r6, r1
 8005df2:	d007      	beq.n	8005e04 <__pow5mult+0x20>
 8005df4:	4c25      	ldr	r4, [pc, #148]	@ (8005e8c <__pow5mult+0xa8>)
 8005df6:	3a01      	subs	r2, #1
 8005df8:	2300      	movs	r3, #0
 8005dfa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005dfe:	f7ff fe9f 	bl	8005b40 <__multadd>
 8005e02:	4606      	mov	r6, r0
 8005e04:	10ad      	asrs	r5, r5, #2
 8005e06:	d03d      	beq.n	8005e84 <__pow5mult+0xa0>
 8005e08:	69fc      	ldr	r4, [r7, #28]
 8005e0a:	b97c      	cbnz	r4, 8005e2c <__pow5mult+0x48>
 8005e0c:	2010      	movs	r0, #16
 8005e0e:	f7ff fd7f 	bl	8005910 <malloc>
 8005e12:	4602      	mov	r2, r0
 8005e14:	61f8      	str	r0, [r7, #28]
 8005e16:	b928      	cbnz	r0, 8005e24 <__pow5mult+0x40>
 8005e18:	4b1d      	ldr	r3, [pc, #116]	@ (8005e90 <__pow5mult+0xac>)
 8005e1a:	481e      	ldr	r0, [pc, #120]	@ (8005e94 <__pow5mult+0xb0>)
 8005e1c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005e20:	f000 fbea 	bl	80065f8 <__assert_func>
 8005e24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e28:	6004      	str	r4, [r0, #0]
 8005e2a:	60c4      	str	r4, [r0, #12]
 8005e2c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005e30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e34:	b94c      	cbnz	r4, 8005e4a <__pow5mult+0x66>
 8005e36:	f240 2171 	movw	r1, #625	@ 0x271
 8005e3a:	4638      	mov	r0, r7
 8005e3c:	f7ff ff12 	bl	8005c64 <__i2b>
 8005e40:	2300      	movs	r3, #0
 8005e42:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e46:	4604      	mov	r4, r0
 8005e48:	6003      	str	r3, [r0, #0]
 8005e4a:	f04f 0900 	mov.w	r9, #0
 8005e4e:	07eb      	lsls	r3, r5, #31
 8005e50:	d50a      	bpl.n	8005e68 <__pow5mult+0x84>
 8005e52:	4631      	mov	r1, r6
 8005e54:	4622      	mov	r2, r4
 8005e56:	4638      	mov	r0, r7
 8005e58:	f7ff ff1a 	bl	8005c90 <__multiply>
 8005e5c:	4631      	mov	r1, r6
 8005e5e:	4680      	mov	r8, r0
 8005e60:	4638      	mov	r0, r7
 8005e62:	f7ff fe4b 	bl	8005afc <_Bfree>
 8005e66:	4646      	mov	r6, r8
 8005e68:	106d      	asrs	r5, r5, #1
 8005e6a:	d00b      	beq.n	8005e84 <__pow5mult+0xa0>
 8005e6c:	6820      	ldr	r0, [r4, #0]
 8005e6e:	b938      	cbnz	r0, 8005e80 <__pow5mult+0x9c>
 8005e70:	4622      	mov	r2, r4
 8005e72:	4621      	mov	r1, r4
 8005e74:	4638      	mov	r0, r7
 8005e76:	f7ff ff0b 	bl	8005c90 <__multiply>
 8005e7a:	6020      	str	r0, [r4, #0]
 8005e7c:	f8c0 9000 	str.w	r9, [r0]
 8005e80:	4604      	mov	r4, r0
 8005e82:	e7e4      	b.n	8005e4e <__pow5mult+0x6a>
 8005e84:	4630      	mov	r0, r6
 8005e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e8a:	bf00      	nop
 8005e8c:	08006e30 	.word	0x08006e30
 8005e90:	08006d55 	.word	0x08006d55
 8005e94:	08006dd5 	.word	0x08006dd5

08005e98 <__lshift>:
 8005e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e9c:	460c      	mov	r4, r1
 8005e9e:	6849      	ldr	r1, [r1, #4]
 8005ea0:	6923      	ldr	r3, [r4, #16]
 8005ea2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005ea6:	68a3      	ldr	r3, [r4, #8]
 8005ea8:	4607      	mov	r7, r0
 8005eaa:	4691      	mov	r9, r2
 8005eac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005eb0:	f108 0601 	add.w	r6, r8, #1
 8005eb4:	42b3      	cmp	r3, r6
 8005eb6:	db0b      	blt.n	8005ed0 <__lshift+0x38>
 8005eb8:	4638      	mov	r0, r7
 8005eba:	f7ff fddf 	bl	8005a7c <_Balloc>
 8005ebe:	4605      	mov	r5, r0
 8005ec0:	b948      	cbnz	r0, 8005ed6 <__lshift+0x3e>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	4b28      	ldr	r3, [pc, #160]	@ (8005f68 <__lshift+0xd0>)
 8005ec6:	4829      	ldr	r0, [pc, #164]	@ (8005f6c <__lshift+0xd4>)
 8005ec8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005ecc:	f000 fb94 	bl	80065f8 <__assert_func>
 8005ed0:	3101      	adds	r1, #1
 8005ed2:	005b      	lsls	r3, r3, #1
 8005ed4:	e7ee      	b.n	8005eb4 <__lshift+0x1c>
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	f100 0114 	add.w	r1, r0, #20
 8005edc:	f100 0210 	add.w	r2, r0, #16
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	4553      	cmp	r3, sl
 8005ee4:	db33      	blt.n	8005f4e <__lshift+0xb6>
 8005ee6:	6920      	ldr	r0, [r4, #16]
 8005ee8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005eec:	f104 0314 	add.w	r3, r4, #20
 8005ef0:	f019 091f 	ands.w	r9, r9, #31
 8005ef4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005ef8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005efc:	d02b      	beq.n	8005f56 <__lshift+0xbe>
 8005efe:	f1c9 0e20 	rsb	lr, r9, #32
 8005f02:	468a      	mov	sl, r1
 8005f04:	2200      	movs	r2, #0
 8005f06:	6818      	ldr	r0, [r3, #0]
 8005f08:	fa00 f009 	lsl.w	r0, r0, r9
 8005f0c:	4310      	orrs	r0, r2
 8005f0e:	f84a 0b04 	str.w	r0, [sl], #4
 8005f12:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f16:	459c      	cmp	ip, r3
 8005f18:	fa22 f20e 	lsr.w	r2, r2, lr
 8005f1c:	d8f3      	bhi.n	8005f06 <__lshift+0x6e>
 8005f1e:	ebac 0304 	sub.w	r3, ip, r4
 8005f22:	3b15      	subs	r3, #21
 8005f24:	f023 0303 	bic.w	r3, r3, #3
 8005f28:	3304      	adds	r3, #4
 8005f2a:	f104 0015 	add.w	r0, r4, #21
 8005f2e:	4584      	cmp	ip, r0
 8005f30:	bf38      	it	cc
 8005f32:	2304      	movcc	r3, #4
 8005f34:	50ca      	str	r2, [r1, r3]
 8005f36:	b10a      	cbz	r2, 8005f3c <__lshift+0xa4>
 8005f38:	f108 0602 	add.w	r6, r8, #2
 8005f3c:	3e01      	subs	r6, #1
 8005f3e:	4638      	mov	r0, r7
 8005f40:	612e      	str	r6, [r5, #16]
 8005f42:	4621      	mov	r1, r4
 8005f44:	f7ff fdda 	bl	8005afc <_Bfree>
 8005f48:	4628      	mov	r0, r5
 8005f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f4e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005f52:	3301      	adds	r3, #1
 8005f54:	e7c5      	b.n	8005ee2 <__lshift+0x4a>
 8005f56:	3904      	subs	r1, #4
 8005f58:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f5c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f60:	459c      	cmp	ip, r3
 8005f62:	d8f9      	bhi.n	8005f58 <__lshift+0xc0>
 8005f64:	e7ea      	b.n	8005f3c <__lshift+0xa4>
 8005f66:	bf00      	nop
 8005f68:	08006dc4 	.word	0x08006dc4
 8005f6c:	08006dd5 	.word	0x08006dd5

08005f70 <__mcmp>:
 8005f70:	690a      	ldr	r2, [r1, #16]
 8005f72:	4603      	mov	r3, r0
 8005f74:	6900      	ldr	r0, [r0, #16]
 8005f76:	1a80      	subs	r0, r0, r2
 8005f78:	b530      	push	{r4, r5, lr}
 8005f7a:	d10e      	bne.n	8005f9a <__mcmp+0x2a>
 8005f7c:	3314      	adds	r3, #20
 8005f7e:	3114      	adds	r1, #20
 8005f80:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005f84:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005f88:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005f8c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005f90:	4295      	cmp	r5, r2
 8005f92:	d003      	beq.n	8005f9c <__mcmp+0x2c>
 8005f94:	d205      	bcs.n	8005fa2 <__mcmp+0x32>
 8005f96:	f04f 30ff 	mov.w	r0, #4294967295
 8005f9a:	bd30      	pop	{r4, r5, pc}
 8005f9c:	42a3      	cmp	r3, r4
 8005f9e:	d3f3      	bcc.n	8005f88 <__mcmp+0x18>
 8005fa0:	e7fb      	b.n	8005f9a <__mcmp+0x2a>
 8005fa2:	2001      	movs	r0, #1
 8005fa4:	e7f9      	b.n	8005f9a <__mcmp+0x2a>
	...

08005fa8 <__mdiff>:
 8005fa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fac:	4689      	mov	r9, r1
 8005fae:	4606      	mov	r6, r0
 8005fb0:	4611      	mov	r1, r2
 8005fb2:	4648      	mov	r0, r9
 8005fb4:	4614      	mov	r4, r2
 8005fb6:	f7ff ffdb 	bl	8005f70 <__mcmp>
 8005fba:	1e05      	subs	r5, r0, #0
 8005fbc:	d112      	bne.n	8005fe4 <__mdiff+0x3c>
 8005fbe:	4629      	mov	r1, r5
 8005fc0:	4630      	mov	r0, r6
 8005fc2:	f7ff fd5b 	bl	8005a7c <_Balloc>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	b928      	cbnz	r0, 8005fd6 <__mdiff+0x2e>
 8005fca:	4b3f      	ldr	r3, [pc, #252]	@ (80060c8 <__mdiff+0x120>)
 8005fcc:	f240 2137 	movw	r1, #567	@ 0x237
 8005fd0:	483e      	ldr	r0, [pc, #248]	@ (80060cc <__mdiff+0x124>)
 8005fd2:	f000 fb11 	bl	80065f8 <__assert_func>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005fdc:	4610      	mov	r0, r2
 8005fde:	b003      	add	sp, #12
 8005fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fe4:	bfbc      	itt	lt
 8005fe6:	464b      	movlt	r3, r9
 8005fe8:	46a1      	movlt	r9, r4
 8005fea:	4630      	mov	r0, r6
 8005fec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005ff0:	bfba      	itte	lt
 8005ff2:	461c      	movlt	r4, r3
 8005ff4:	2501      	movlt	r5, #1
 8005ff6:	2500      	movge	r5, #0
 8005ff8:	f7ff fd40 	bl	8005a7c <_Balloc>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	b918      	cbnz	r0, 8006008 <__mdiff+0x60>
 8006000:	4b31      	ldr	r3, [pc, #196]	@ (80060c8 <__mdiff+0x120>)
 8006002:	f240 2145 	movw	r1, #581	@ 0x245
 8006006:	e7e3      	b.n	8005fd0 <__mdiff+0x28>
 8006008:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800600c:	6926      	ldr	r6, [r4, #16]
 800600e:	60c5      	str	r5, [r0, #12]
 8006010:	f109 0310 	add.w	r3, r9, #16
 8006014:	f109 0514 	add.w	r5, r9, #20
 8006018:	f104 0e14 	add.w	lr, r4, #20
 800601c:	f100 0b14 	add.w	fp, r0, #20
 8006020:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006024:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006028:	9301      	str	r3, [sp, #4]
 800602a:	46d9      	mov	r9, fp
 800602c:	f04f 0c00 	mov.w	ip, #0
 8006030:	9b01      	ldr	r3, [sp, #4]
 8006032:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006036:	f853 af04 	ldr.w	sl, [r3, #4]!
 800603a:	9301      	str	r3, [sp, #4]
 800603c:	fa1f f38a 	uxth.w	r3, sl
 8006040:	4619      	mov	r1, r3
 8006042:	b283      	uxth	r3, r0
 8006044:	1acb      	subs	r3, r1, r3
 8006046:	0c00      	lsrs	r0, r0, #16
 8006048:	4463      	add	r3, ip
 800604a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800604e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006052:	b29b      	uxth	r3, r3
 8006054:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006058:	4576      	cmp	r6, lr
 800605a:	f849 3b04 	str.w	r3, [r9], #4
 800605e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006062:	d8e5      	bhi.n	8006030 <__mdiff+0x88>
 8006064:	1b33      	subs	r3, r6, r4
 8006066:	3b15      	subs	r3, #21
 8006068:	f023 0303 	bic.w	r3, r3, #3
 800606c:	3415      	adds	r4, #21
 800606e:	3304      	adds	r3, #4
 8006070:	42a6      	cmp	r6, r4
 8006072:	bf38      	it	cc
 8006074:	2304      	movcc	r3, #4
 8006076:	441d      	add	r5, r3
 8006078:	445b      	add	r3, fp
 800607a:	461e      	mov	r6, r3
 800607c:	462c      	mov	r4, r5
 800607e:	4544      	cmp	r4, r8
 8006080:	d30e      	bcc.n	80060a0 <__mdiff+0xf8>
 8006082:	f108 0103 	add.w	r1, r8, #3
 8006086:	1b49      	subs	r1, r1, r5
 8006088:	f021 0103 	bic.w	r1, r1, #3
 800608c:	3d03      	subs	r5, #3
 800608e:	45a8      	cmp	r8, r5
 8006090:	bf38      	it	cc
 8006092:	2100      	movcc	r1, #0
 8006094:	440b      	add	r3, r1
 8006096:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800609a:	b191      	cbz	r1, 80060c2 <__mdiff+0x11a>
 800609c:	6117      	str	r7, [r2, #16]
 800609e:	e79d      	b.n	8005fdc <__mdiff+0x34>
 80060a0:	f854 1b04 	ldr.w	r1, [r4], #4
 80060a4:	46e6      	mov	lr, ip
 80060a6:	0c08      	lsrs	r0, r1, #16
 80060a8:	fa1c fc81 	uxtah	ip, ip, r1
 80060ac:	4471      	add	r1, lr
 80060ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80060b2:	b289      	uxth	r1, r1
 80060b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80060b8:	f846 1b04 	str.w	r1, [r6], #4
 80060bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80060c0:	e7dd      	b.n	800607e <__mdiff+0xd6>
 80060c2:	3f01      	subs	r7, #1
 80060c4:	e7e7      	b.n	8006096 <__mdiff+0xee>
 80060c6:	bf00      	nop
 80060c8:	08006dc4 	.word	0x08006dc4
 80060cc:	08006dd5 	.word	0x08006dd5

080060d0 <__d2b>:
 80060d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80060d4:	460f      	mov	r7, r1
 80060d6:	2101      	movs	r1, #1
 80060d8:	ec59 8b10 	vmov	r8, r9, d0
 80060dc:	4616      	mov	r6, r2
 80060de:	f7ff fccd 	bl	8005a7c <_Balloc>
 80060e2:	4604      	mov	r4, r0
 80060e4:	b930      	cbnz	r0, 80060f4 <__d2b+0x24>
 80060e6:	4602      	mov	r2, r0
 80060e8:	4b23      	ldr	r3, [pc, #140]	@ (8006178 <__d2b+0xa8>)
 80060ea:	4824      	ldr	r0, [pc, #144]	@ (800617c <__d2b+0xac>)
 80060ec:	f240 310f 	movw	r1, #783	@ 0x30f
 80060f0:	f000 fa82 	bl	80065f8 <__assert_func>
 80060f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80060f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80060fc:	b10d      	cbz	r5, 8006102 <__d2b+0x32>
 80060fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006102:	9301      	str	r3, [sp, #4]
 8006104:	f1b8 0300 	subs.w	r3, r8, #0
 8006108:	d023      	beq.n	8006152 <__d2b+0x82>
 800610a:	4668      	mov	r0, sp
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	f7ff fd7c 	bl	8005c0a <__lo0bits>
 8006112:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006116:	b1d0      	cbz	r0, 800614e <__d2b+0x7e>
 8006118:	f1c0 0320 	rsb	r3, r0, #32
 800611c:	fa02 f303 	lsl.w	r3, r2, r3
 8006120:	430b      	orrs	r3, r1
 8006122:	40c2      	lsrs	r2, r0
 8006124:	6163      	str	r3, [r4, #20]
 8006126:	9201      	str	r2, [sp, #4]
 8006128:	9b01      	ldr	r3, [sp, #4]
 800612a:	61a3      	str	r3, [r4, #24]
 800612c:	2b00      	cmp	r3, #0
 800612e:	bf0c      	ite	eq
 8006130:	2201      	moveq	r2, #1
 8006132:	2202      	movne	r2, #2
 8006134:	6122      	str	r2, [r4, #16]
 8006136:	b1a5      	cbz	r5, 8006162 <__d2b+0x92>
 8006138:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800613c:	4405      	add	r5, r0
 800613e:	603d      	str	r5, [r7, #0]
 8006140:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006144:	6030      	str	r0, [r6, #0]
 8006146:	4620      	mov	r0, r4
 8006148:	b003      	add	sp, #12
 800614a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800614e:	6161      	str	r1, [r4, #20]
 8006150:	e7ea      	b.n	8006128 <__d2b+0x58>
 8006152:	a801      	add	r0, sp, #4
 8006154:	f7ff fd59 	bl	8005c0a <__lo0bits>
 8006158:	9b01      	ldr	r3, [sp, #4]
 800615a:	6163      	str	r3, [r4, #20]
 800615c:	3020      	adds	r0, #32
 800615e:	2201      	movs	r2, #1
 8006160:	e7e8      	b.n	8006134 <__d2b+0x64>
 8006162:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006166:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800616a:	6038      	str	r0, [r7, #0]
 800616c:	6918      	ldr	r0, [r3, #16]
 800616e:	f7ff fd2d 	bl	8005bcc <__hi0bits>
 8006172:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006176:	e7e5      	b.n	8006144 <__d2b+0x74>
 8006178:	08006dc4 	.word	0x08006dc4
 800617c:	08006dd5 	.word	0x08006dd5

08006180 <__ssputs_r>:
 8006180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006184:	688e      	ldr	r6, [r1, #8]
 8006186:	461f      	mov	r7, r3
 8006188:	42be      	cmp	r6, r7
 800618a:	680b      	ldr	r3, [r1, #0]
 800618c:	4682      	mov	sl, r0
 800618e:	460c      	mov	r4, r1
 8006190:	4690      	mov	r8, r2
 8006192:	d82d      	bhi.n	80061f0 <__ssputs_r+0x70>
 8006194:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006198:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800619c:	d026      	beq.n	80061ec <__ssputs_r+0x6c>
 800619e:	6965      	ldr	r5, [r4, #20]
 80061a0:	6909      	ldr	r1, [r1, #16]
 80061a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061a6:	eba3 0901 	sub.w	r9, r3, r1
 80061aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061ae:	1c7b      	adds	r3, r7, #1
 80061b0:	444b      	add	r3, r9
 80061b2:	106d      	asrs	r5, r5, #1
 80061b4:	429d      	cmp	r5, r3
 80061b6:	bf38      	it	cc
 80061b8:	461d      	movcc	r5, r3
 80061ba:	0553      	lsls	r3, r2, #21
 80061bc:	d527      	bpl.n	800620e <__ssputs_r+0x8e>
 80061be:	4629      	mov	r1, r5
 80061c0:	f7ff fbd0 	bl	8005964 <_malloc_r>
 80061c4:	4606      	mov	r6, r0
 80061c6:	b360      	cbz	r0, 8006222 <__ssputs_r+0xa2>
 80061c8:	6921      	ldr	r1, [r4, #16]
 80061ca:	464a      	mov	r2, r9
 80061cc:	f000 fa06 	bl	80065dc <memcpy>
 80061d0:	89a3      	ldrh	r3, [r4, #12]
 80061d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80061d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061da:	81a3      	strh	r3, [r4, #12]
 80061dc:	6126      	str	r6, [r4, #16]
 80061de:	6165      	str	r5, [r4, #20]
 80061e0:	444e      	add	r6, r9
 80061e2:	eba5 0509 	sub.w	r5, r5, r9
 80061e6:	6026      	str	r6, [r4, #0]
 80061e8:	60a5      	str	r5, [r4, #8]
 80061ea:	463e      	mov	r6, r7
 80061ec:	42be      	cmp	r6, r7
 80061ee:	d900      	bls.n	80061f2 <__ssputs_r+0x72>
 80061f0:	463e      	mov	r6, r7
 80061f2:	6820      	ldr	r0, [r4, #0]
 80061f4:	4632      	mov	r2, r6
 80061f6:	4641      	mov	r1, r8
 80061f8:	f000 f9c6 	bl	8006588 <memmove>
 80061fc:	68a3      	ldr	r3, [r4, #8]
 80061fe:	1b9b      	subs	r3, r3, r6
 8006200:	60a3      	str	r3, [r4, #8]
 8006202:	6823      	ldr	r3, [r4, #0]
 8006204:	4433      	add	r3, r6
 8006206:	6023      	str	r3, [r4, #0]
 8006208:	2000      	movs	r0, #0
 800620a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800620e:	462a      	mov	r2, r5
 8006210:	f000 fa36 	bl	8006680 <_realloc_r>
 8006214:	4606      	mov	r6, r0
 8006216:	2800      	cmp	r0, #0
 8006218:	d1e0      	bne.n	80061dc <__ssputs_r+0x5c>
 800621a:	6921      	ldr	r1, [r4, #16]
 800621c:	4650      	mov	r0, sl
 800621e:	f7ff fb2d 	bl	800587c <_free_r>
 8006222:	230c      	movs	r3, #12
 8006224:	f8ca 3000 	str.w	r3, [sl]
 8006228:	89a3      	ldrh	r3, [r4, #12]
 800622a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800622e:	81a3      	strh	r3, [r4, #12]
 8006230:	f04f 30ff 	mov.w	r0, #4294967295
 8006234:	e7e9      	b.n	800620a <__ssputs_r+0x8a>
	...

08006238 <_svfiprintf_r>:
 8006238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800623c:	4698      	mov	r8, r3
 800623e:	898b      	ldrh	r3, [r1, #12]
 8006240:	061b      	lsls	r3, r3, #24
 8006242:	b09d      	sub	sp, #116	@ 0x74
 8006244:	4607      	mov	r7, r0
 8006246:	460d      	mov	r5, r1
 8006248:	4614      	mov	r4, r2
 800624a:	d510      	bpl.n	800626e <_svfiprintf_r+0x36>
 800624c:	690b      	ldr	r3, [r1, #16]
 800624e:	b973      	cbnz	r3, 800626e <_svfiprintf_r+0x36>
 8006250:	2140      	movs	r1, #64	@ 0x40
 8006252:	f7ff fb87 	bl	8005964 <_malloc_r>
 8006256:	6028      	str	r0, [r5, #0]
 8006258:	6128      	str	r0, [r5, #16]
 800625a:	b930      	cbnz	r0, 800626a <_svfiprintf_r+0x32>
 800625c:	230c      	movs	r3, #12
 800625e:	603b      	str	r3, [r7, #0]
 8006260:	f04f 30ff 	mov.w	r0, #4294967295
 8006264:	b01d      	add	sp, #116	@ 0x74
 8006266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800626a:	2340      	movs	r3, #64	@ 0x40
 800626c:	616b      	str	r3, [r5, #20]
 800626e:	2300      	movs	r3, #0
 8006270:	9309      	str	r3, [sp, #36]	@ 0x24
 8006272:	2320      	movs	r3, #32
 8006274:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006278:	f8cd 800c 	str.w	r8, [sp, #12]
 800627c:	2330      	movs	r3, #48	@ 0x30
 800627e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800641c <_svfiprintf_r+0x1e4>
 8006282:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006286:	f04f 0901 	mov.w	r9, #1
 800628a:	4623      	mov	r3, r4
 800628c:	469a      	mov	sl, r3
 800628e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006292:	b10a      	cbz	r2, 8006298 <_svfiprintf_r+0x60>
 8006294:	2a25      	cmp	r2, #37	@ 0x25
 8006296:	d1f9      	bne.n	800628c <_svfiprintf_r+0x54>
 8006298:	ebba 0b04 	subs.w	fp, sl, r4
 800629c:	d00b      	beq.n	80062b6 <_svfiprintf_r+0x7e>
 800629e:	465b      	mov	r3, fp
 80062a0:	4622      	mov	r2, r4
 80062a2:	4629      	mov	r1, r5
 80062a4:	4638      	mov	r0, r7
 80062a6:	f7ff ff6b 	bl	8006180 <__ssputs_r>
 80062aa:	3001      	adds	r0, #1
 80062ac:	f000 80a7 	beq.w	80063fe <_svfiprintf_r+0x1c6>
 80062b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062b2:	445a      	add	r2, fp
 80062b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80062b6:	f89a 3000 	ldrb.w	r3, [sl]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f000 809f 	beq.w	80063fe <_svfiprintf_r+0x1c6>
 80062c0:	2300      	movs	r3, #0
 80062c2:	f04f 32ff 	mov.w	r2, #4294967295
 80062c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062ca:	f10a 0a01 	add.w	sl, sl, #1
 80062ce:	9304      	str	r3, [sp, #16]
 80062d0:	9307      	str	r3, [sp, #28]
 80062d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80062d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80062d8:	4654      	mov	r4, sl
 80062da:	2205      	movs	r2, #5
 80062dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062e0:	484e      	ldr	r0, [pc, #312]	@ (800641c <_svfiprintf_r+0x1e4>)
 80062e2:	f7f9 ffad 	bl	8000240 <memchr>
 80062e6:	9a04      	ldr	r2, [sp, #16]
 80062e8:	b9d8      	cbnz	r0, 8006322 <_svfiprintf_r+0xea>
 80062ea:	06d0      	lsls	r0, r2, #27
 80062ec:	bf44      	itt	mi
 80062ee:	2320      	movmi	r3, #32
 80062f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062f4:	0711      	lsls	r1, r2, #28
 80062f6:	bf44      	itt	mi
 80062f8:	232b      	movmi	r3, #43	@ 0x2b
 80062fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062fe:	f89a 3000 	ldrb.w	r3, [sl]
 8006302:	2b2a      	cmp	r3, #42	@ 0x2a
 8006304:	d015      	beq.n	8006332 <_svfiprintf_r+0xfa>
 8006306:	9a07      	ldr	r2, [sp, #28]
 8006308:	4654      	mov	r4, sl
 800630a:	2000      	movs	r0, #0
 800630c:	f04f 0c0a 	mov.w	ip, #10
 8006310:	4621      	mov	r1, r4
 8006312:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006316:	3b30      	subs	r3, #48	@ 0x30
 8006318:	2b09      	cmp	r3, #9
 800631a:	d94b      	bls.n	80063b4 <_svfiprintf_r+0x17c>
 800631c:	b1b0      	cbz	r0, 800634c <_svfiprintf_r+0x114>
 800631e:	9207      	str	r2, [sp, #28]
 8006320:	e014      	b.n	800634c <_svfiprintf_r+0x114>
 8006322:	eba0 0308 	sub.w	r3, r0, r8
 8006326:	fa09 f303 	lsl.w	r3, r9, r3
 800632a:	4313      	orrs	r3, r2
 800632c:	9304      	str	r3, [sp, #16]
 800632e:	46a2      	mov	sl, r4
 8006330:	e7d2      	b.n	80062d8 <_svfiprintf_r+0xa0>
 8006332:	9b03      	ldr	r3, [sp, #12]
 8006334:	1d19      	adds	r1, r3, #4
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	9103      	str	r1, [sp, #12]
 800633a:	2b00      	cmp	r3, #0
 800633c:	bfbb      	ittet	lt
 800633e:	425b      	neglt	r3, r3
 8006340:	f042 0202 	orrlt.w	r2, r2, #2
 8006344:	9307      	strge	r3, [sp, #28]
 8006346:	9307      	strlt	r3, [sp, #28]
 8006348:	bfb8      	it	lt
 800634a:	9204      	strlt	r2, [sp, #16]
 800634c:	7823      	ldrb	r3, [r4, #0]
 800634e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006350:	d10a      	bne.n	8006368 <_svfiprintf_r+0x130>
 8006352:	7863      	ldrb	r3, [r4, #1]
 8006354:	2b2a      	cmp	r3, #42	@ 0x2a
 8006356:	d132      	bne.n	80063be <_svfiprintf_r+0x186>
 8006358:	9b03      	ldr	r3, [sp, #12]
 800635a:	1d1a      	adds	r2, r3, #4
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	9203      	str	r2, [sp, #12]
 8006360:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006364:	3402      	adds	r4, #2
 8006366:	9305      	str	r3, [sp, #20]
 8006368:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800642c <_svfiprintf_r+0x1f4>
 800636c:	7821      	ldrb	r1, [r4, #0]
 800636e:	2203      	movs	r2, #3
 8006370:	4650      	mov	r0, sl
 8006372:	f7f9 ff65 	bl	8000240 <memchr>
 8006376:	b138      	cbz	r0, 8006388 <_svfiprintf_r+0x150>
 8006378:	9b04      	ldr	r3, [sp, #16]
 800637a:	eba0 000a 	sub.w	r0, r0, sl
 800637e:	2240      	movs	r2, #64	@ 0x40
 8006380:	4082      	lsls	r2, r0
 8006382:	4313      	orrs	r3, r2
 8006384:	3401      	adds	r4, #1
 8006386:	9304      	str	r3, [sp, #16]
 8006388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800638c:	4824      	ldr	r0, [pc, #144]	@ (8006420 <_svfiprintf_r+0x1e8>)
 800638e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006392:	2206      	movs	r2, #6
 8006394:	f7f9 ff54 	bl	8000240 <memchr>
 8006398:	2800      	cmp	r0, #0
 800639a:	d036      	beq.n	800640a <_svfiprintf_r+0x1d2>
 800639c:	4b21      	ldr	r3, [pc, #132]	@ (8006424 <_svfiprintf_r+0x1ec>)
 800639e:	bb1b      	cbnz	r3, 80063e8 <_svfiprintf_r+0x1b0>
 80063a0:	9b03      	ldr	r3, [sp, #12]
 80063a2:	3307      	adds	r3, #7
 80063a4:	f023 0307 	bic.w	r3, r3, #7
 80063a8:	3308      	adds	r3, #8
 80063aa:	9303      	str	r3, [sp, #12]
 80063ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063ae:	4433      	add	r3, r6
 80063b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80063b2:	e76a      	b.n	800628a <_svfiprintf_r+0x52>
 80063b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80063b8:	460c      	mov	r4, r1
 80063ba:	2001      	movs	r0, #1
 80063bc:	e7a8      	b.n	8006310 <_svfiprintf_r+0xd8>
 80063be:	2300      	movs	r3, #0
 80063c0:	3401      	adds	r4, #1
 80063c2:	9305      	str	r3, [sp, #20]
 80063c4:	4619      	mov	r1, r3
 80063c6:	f04f 0c0a 	mov.w	ip, #10
 80063ca:	4620      	mov	r0, r4
 80063cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063d0:	3a30      	subs	r2, #48	@ 0x30
 80063d2:	2a09      	cmp	r2, #9
 80063d4:	d903      	bls.n	80063de <_svfiprintf_r+0x1a6>
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d0c6      	beq.n	8006368 <_svfiprintf_r+0x130>
 80063da:	9105      	str	r1, [sp, #20]
 80063dc:	e7c4      	b.n	8006368 <_svfiprintf_r+0x130>
 80063de:	fb0c 2101 	mla	r1, ip, r1, r2
 80063e2:	4604      	mov	r4, r0
 80063e4:	2301      	movs	r3, #1
 80063e6:	e7f0      	b.n	80063ca <_svfiprintf_r+0x192>
 80063e8:	ab03      	add	r3, sp, #12
 80063ea:	9300      	str	r3, [sp, #0]
 80063ec:	462a      	mov	r2, r5
 80063ee:	4b0e      	ldr	r3, [pc, #56]	@ (8006428 <_svfiprintf_r+0x1f0>)
 80063f0:	a904      	add	r1, sp, #16
 80063f2:	4638      	mov	r0, r7
 80063f4:	f7fd ff14 	bl	8004220 <_printf_float>
 80063f8:	1c42      	adds	r2, r0, #1
 80063fa:	4606      	mov	r6, r0
 80063fc:	d1d6      	bne.n	80063ac <_svfiprintf_r+0x174>
 80063fe:	89ab      	ldrh	r3, [r5, #12]
 8006400:	065b      	lsls	r3, r3, #25
 8006402:	f53f af2d 	bmi.w	8006260 <_svfiprintf_r+0x28>
 8006406:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006408:	e72c      	b.n	8006264 <_svfiprintf_r+0x2c>
 800640a:	ab03      	add	r3, sp, #12
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	462a      	mov	r2, r5
 8006410:	4b05      	ldr	r3, [pc, #20]	@ (8006428 <_svfiprintf_r+0x1f0>)
 8006412:	a904      	add	r1, sp, #16
 8006414:	4638      	mov	r0, r7
 8006416:	f7fe f98b 	bl	8004730 <_printf_i>
 800641a:	e7ed      	b.n	80063f8 <_svfiprintf_r+0x1c0>
 800641c:	08006f30 	.word	0x08006f30
 8006420:	08006f3a 	.word	0x08006f3a
 8006424:	08004221 	.word	0x08004221
 8006428:	08006181 	.word	0x08006181
 800642c:	08006f36 	.word	0x08006f36

08006430 <__sflush_r>:
 8006430:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006438:	0716      	lsls	r6, r2, #28
 800643a:	4605      	mov	r5, r0
 800643c:	460c      	mov	r4, r1
 800643e:	d454      	bmi.n	80064ea <__sflush_r+0xba>
 8006440:	684b      	ldr	r3, [r1, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	dc02      	bgt.n	800644c <__sflush_r+0x1c>
 8006446:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006448:	2b00      	cmp	r3, #0
 800644a:	dd48      	ble.n	80064de <__sflush_r+0xae>
 800644c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800644e:	2e00      	cmp	r6, #0
 8006450:	d045      	beq.n	80064de <__sflush_r+0xae>
 8006452:	2300      	movs	r3, #0
 8006454:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006458:	682f      	ldr	r7, [r5, #0]
 800645a:	6a21      	ldr	r1, [r4, #32]
 800645c:	602b      	str	r3, [r5, #0]
 800645e:	d030      	beq.n	80064c2 <__sflush_r+0x92>
 8006460:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006462:	89a3      	ldrh	r3, [r4, #12]
 8006464:	0759      	lsls	r1, r3, #29
 8006466:	d505      	bpl.n	8006474 <__sflush_r+0x44>
 8006468:	6863      	ldr	r3, [r4, #4]
 800646a:	1ad2      	subs	r2, r2, r3
 800646c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800646e:	b10b      	cbz	r3, 8006474 <__sflush_r+0x44>
 8006470:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006472:	1ad2      	subs	r2, r2, r3
 8006474:	2300      	movs	r3, #0
 8006476:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006478:	6a21      	ldr	r1, [r4, #32]
 800647a:	4628      	mov	r0, r5
 800647c:	47b0      	blx	r6
 800647e:	1c43      	adds	r3, r0, #1
 8006480:	89a3      	ldrh	r3, [r4, #12]
 8006482:	d106      	bne.n	8006492 <__sflush_r+0x62>
 8006484:	6829      	ldr	r1, [r5, #0]
 8006486:	291d      	cmp	r1, #29
 8006488:	d82b      	bhi.n	80064e2 <__sflush_r+0xb2>
 800648a:	4a2a      	ldr	r2, [pc, #168]	@ (8006534 <__sflush_r+0x104>)
 800648c:	410a      	asrs	r2, r1
 800648e:	07d6      	lsls	r6, r2, #31
 8006490:	d427      	bmi.n	80064e2 <__sflush_r+0xb2>
 8006492:	2200      	movs	r2, #0
 8006494:	6062      	str	r2, [r4, #4]
 8006496:	04d9      	lsls	r1, r3, #19
 8006498:	6922      	ldr	r2, [r4, #16]
 800649a:	6022      	str	r2, [r4, #0]
 800649c:	d504      	bpl.n	80064a8 <__sflush_r+0x78>
 800649e:	1c42      	adds	r2, r0, #1
 80064a0:	d101      	bne.n	80064a6 <__sflush_r+0x76>
 80064a2:	682b      	ldr	r3, [r5, #0]
 80064a4:	b903      	cbnz	r3, 80064a8 <__sflush_r+0x78>
 80064a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80064a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064aa:	602f      	str	r7, [r5, #0]
 80064ac:	b1b9      	cbz	r1, 80064de <__sflush_r+0xae>
 80064ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80064b2:	4299      	cmp	r1, r3
 80064b4:	d002      	beq.n	80064bc <__sflush_r+0x8c>
 80064b6:	4628      	mov	r0, r5
 80064b8:	f7ff f9e0 	bl	800587c <_free_r>
 80064bc:	2300      	movs	r3, #0
 80064be:	6363      	str	r3, [r4, #52]	@ 0x34
 80064c0:	e00d      	b.n	80064de <__sflush_r+0xae>
 80064c2:	2301      	movs	r3, #1
 80064c4:	4628      	mov	r0, r5
 80064c6:	47b0      	blx	r6
 80064c8:	4602      	mov	r2, r0
 80064ca:	1c50      	adds	r0, r2, #1
 80064cc:	d1c9      	bne.n	8006462 <__sflush_r+0x32>
 80064ce:	682b      	ldr	r3, [r5, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d0c6      	beq.n	8006462 <__sflush_r+0x32>
 80064d4:	2b1d      	cmp	r3, #29
 80064d6:	d001      	beq.n	80064dc <__sflush_r+0xac>
 80064d8:	2b16      	cmp	r3, #22
 80064da:	d11e      	bne.n	800651a <__sflush_r+0xea>
 80064dc:	602f      	str	r7, [r5, #0]
 80064de:	2000      	movs	r0, #0
 80064e0:	e022      	b.n	8006528 <__sflush_r+0xf8>
 80064e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064e6:	b21b      	sxth	r3, r3
 80064e8:	e01b      	b.n	8006522 <__sflush_r+0xf2>
 80064ea:	690f      	ldr	r7, [r1, #16]
 80064ec:	2f00      	cmp	r7, #0
 80064ee:	d0f6      	beq.n	80064de <__sflush_r+0xae>
 80064f0:	0793      	lsls	r3, r2, #30
 80064f2:	680e      	ldr	r6, [r1, #0]
 80064f4:	bf08      	it	eq
 80064f6:	694b      	ldreq	r3, [r1, #20]
 80064f8:	600f      	str	r7, [r1, #0]
 80064fa:	bf18      	it	ne
 80064fc:	2300      	movne	r3, #0
 80064fe:	eba6 0807 	sub.w	r8, r6, r7
 8006502:	608b      	str	r3, [r1, #8]
 8006504:	f1b8 0f00 	cmp.w	r8, #0
 8006508:	dde9      	ble.n	80064de <__sflush_r+0xae>
 800650a:	6a21      	ldr	r1, [r4, #32]
 800650c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800650e:	4643      	mov	r3, r8
 8006510:	463a      	mov	r2, r7
 8006512:	4628      	mov	r0, r5
 8006514:	47b0      	blx	r6
 8006516:	2800      	cmp	r0, #0
 8006518:	dc08      	bgt.n	800652c <__sflush_r+0xfc>
 800651a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800651e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006522:	81a3      	strh	r3, [r4, #12]
 8006524:	f04f 30ff 	mov.w	r0, #4294967295
 8006528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800652c:	4407      	add	r7, r0
 800652e:	eba8 0800 	sub.w	r8, r8, r0
 8006532:	e7e7      	b.n	8006504 <__sflush_r+0xd4>
 8006534:	dfbffffe 	.word	0xdfbffffe

08006538 <_fflush_r>:
 8006538:	b538      	push	{r3, r4, r5, lr}
 800653a:	690b      	ldr	r3, [r1, #16]
 800653c:	4605      	mov	r5, r0
 800653e:	460c      	mov	r4, r1
 8006540:	b913      	cbnz	r3, 8006548 <_fflush_r+0x10>
 8006542:	2500      	movs	r5, #0
 8006544:	4628      	mov	r0, r5
 8006546:	bd38      	pop	{r3, r4, r5, pc}
 8006548:	b118      	cbz	r0, 8006552 <_fflush_r+0x1a>
 800654a:	6a03      	ldr	r3, [r0, #32]
 800654c:	b90b      	cbnz	r3, 8006552 <_fflush_r+0x1a>
 800654e:	f7fe fa9b 	bl	8004a88 <__sinit>
 8006552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d0f3      	beq.n	8006542 <_fflush_r+0xa>
 800655a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800655c:	07d0      	lsls	r0, r2, #31
 800655e:	d404      	bmi.n	800656a <_fflush_r+0x32>
 8006560:	0599      	lsls	r1, r3, #22
 8006562:	d402      	bmi.n	800656a <_fflush_r+0x32>
 8006564:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006566:	f7fe fba6 	bl	8004cb6 <__retarget_lock_acquire_recursive>
 800656a:	4628      	mov	r0, r5
 800656c:	4621      	mov	r1, r4
 800656e:	f7ff ff5f 	bl	8006430 <__sflush_r>
 8006572:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006574:	07da      	lsls	r2, r3, #31
 8006576:	4605      	mov	r5, r0
 8006578:	d4e4      	bmi.n	8006544 <_fflush_r+0xc>
 800657a:	89a3      	ldrh	r3, [r4, #12]
 800657c:	059b      	lsls	r3, r3, #22
 800657e:	d4e1      	bmi.n	8006544 <_fflush_r+0xc>
 8006580:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006582:	f7fe fb99 	bl	8004cb8 <__retarget_lock_release_recursive>
 8006586:	e7dd      	b.n	8006544 <_fflush_r+0xc>

08006588 <memmove>:
 8006588:	4288      	cmp	r0, r1
 800658a:	b510      	push	{r4, lr}
 800658c:	eb01 0402 	add.w	r4, r1, r2
 8006590:	d902      	bls.n	8006598 <memmove+0x10>
 8006592:	4284      	cmp	r4, r0
 8006594:	4623      	mov	r3, r4
 8006596:	d807      	bhi.n	80065a8 <memmove+0x20>
 8006598:	1e43      	subs	r3, r0, #1
 800659a:	42a1      	cmp	r1, r4
 800659c:	d008      	beq.n	80065b0 <memmove+0x28>
 800659e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80065a6:	e7f8      	b.n	800659a <memmove+0x12>
 80065a8:	4402      	add	r2, r0
 80065aa:	4601      	mov	r1, r0
 80065ac:	428a      	cmp	r2, r1
 80065ae:	d100      	bne.n	80065b2 <memmove+0x2a>
 80065b0:	bd10      	pop	{r4, pc}
 80065b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80065ba:	e7f7      	b.n	80065ac <memmove+0x24>

080065bc <_sbrk_r>:
 80065bc:	b538      	push	{r3, r4, r5, lr}
 80065be:	4d06      	ldr	r5, [pc, #24]	@ (80065d8 <_sbrk_r+0x1c>)
 80065c0:	2300      	movs	r3, #0
 80065c2:	4604      	mov	r4, r0
 80065c4:	4608      	mov	r0, r1
 80065c6:	602b      	str	r3, [r5, #0]
 80065c8:	f7fa fea8 	bl	800131c <_sbrk>
 80065cc:	1c43      	adds	r3, r0, #1
 80065ce:	d102      	bne.n	80065d6 <_sbrk_r+0x1a>
 80065d0:	682b      	ldr	r3, [r5, #0]
 80065d2:	b103      	cbz	r3, 80065d6 <_sbrk_r+0x1a>
 80065d4:	6023      	str	r3, [r4, #0]
 80065d6:	bd38      	pop	{r3, r4, r5, pc}
 80065d8:	200004c8 	.word	0x200004c8

080065dc <memcpy>:
 80065dc:	440a      	add	r2, r1
 80065de:	4291      	cmp	r1, r2
 80065e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80065e4:	d100      	bne.n	80065e8 <memcpy+0xc>
 80065e6:	4770      	bx	lr
 80065e8:	b510      	push	{r4, lr}
 80065ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065f2:	4291      	cmp	r1, r2
 80065f4:	d1f9      	bne.n	80065ea <memcpy+0xe>
 80065f6:	bd10      	pop	{r4, pc}

080065f8 <__assert_func>:
 80065f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80065fa:	4614      	mov	r4, r2
 80065fc:	461a      	mov	r2, r3
 80065fe:	4b09      	ldr	r3, [pc, #36]	@ (8006624 <__assert_func+0x2c>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4605      	mov	r5, r0
 8006604:	68d8      	ldr	r0, [r3, #12]
 8006606:	b954      	cbnz	r4, 800661e <__assert_func+0x26>
 8006608:	4b07      	ldr	r3, [pc, #28]	@ (8006628 <__assert_func+0x30>)
 800660a:	461c      	mov	r4, r3
 800660c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006610:	9100      	str	r1, [sp, #0]
 8006612:	462b      	mov	r3, r5
 8006614:	4905      	ldr	r1, [pc, #20]	@ (800662c <__assert_func+0x34>)
 8006616:	f000 f86f 	bl	80066f8 <fiprintf>
 800661a:	f000 f87f 	bl	800671c <abort>
 800661e:	4b04      	ldr	r3, [pc, #16]	@ (8006630 <__assert_func+0x38>)
 8006620:	e7f4      	b.n	800660c <__assert_func+0x14>
 8006622:	bf00      	nop
 8006624:	20000018 	.word	0x20000018
 8006628:	08006f86 	.word	0x08006f86
 800662c:	08006f58 	.word	0x08006f58
 8006630:	08006f4b 	.word	0x08006f4b

08006634 <_calloc_r>:
 8006634:	b570      	push	{r4, r5, r6, lr}
 8006636:	fba1 5402 	umull	r5, r4, r1, r2
 800663a:	b93c      	cbnz	r4, 800664c <_calloc_r+0x18>
 800663c:	4629      	mov	r1, r5
 800663e:	f7ff f991 	bl	8005964 <_malloc_r>
 8006642:	4606      	mov	r6, r0
 8006644:	b928      	cbnz	r0, 8006652 <_calloc_r+0x1e>
 8006646:	2600      	movs	r6, #0
 8006648:	4630      	mov	r0, r6
 800664a:	bd70      	pop	{r4, r5, r6, pc}
 800664c:	220c      	movs	r2, #12
 800664e:	6002      	str	r2, [r0, #0]
 8006650:	e7f9      	b.n	8006646 <_calloc_r+0x12>
 8006652:	462a      	mov	r2, r5
 8006654:	4621      	mov	r1, r4
 8006656:	f7fe fab0 	bl	8004bba <memset>
 800665a:	e7f5      	b.n	8006648 <_calloc_r+0x14>

0800665c <__ascii_mbtowc>:
 800665c:	b082      	sub	sp, #8
 800665e:	b901      	cbnz	r1, 8006662 <__ascii_mbtowc+0x6>
 8006660:	a901      	add	r1, sp, #4
 8006662:	b142      	cbz	r2, 8006676 <__ascii_mbtowc+0x1a>
 8006664:	b14b      	cbz	r3, 800667a <__ascii_mbtowc+0x1e>
 8006666:	7813      	ldrb	r3, [r2, #0]
 8006668:	600b      	str	r3, [r1, #0]
 800666a:	7812      	ldrb	r2, [r2, #0]
 800666c:	1e10      	subs	r0, r2, #0
 800666e:	bf18      	it	ne
 8006670:	2001      	movne	r0, #1
 8006672:	b002      	add	sp, #8
 8006674:	4770      	bx	lr
 8006676:	4610      	mov	r0, r2
 8006678:	e7fb      	b.n	8006672 <__ascii_mbtowc+0x16>
 800667a:	f06f 0001 	mvn.w	r0, #1
 800667e:	e7f8      	b.n	8006672 <__ascii_mbtowc+0x16>

08006680 <_realloc_r>:
 8006680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006684:	4680      	mov	r8, r0
 8006686:	4615      	mov	r5, r2
 8006688:	460c      	mov	r4, r1
 800668a:	b921      	cbnz	r1, 8006696 <_realloc_r+0x16>
 800668c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006690:	4611      	mov	r1, r2
 8006692:	f7ff b967 	b.w	8005964 <_malloc_r>
 8006696:	b92a      	cbnz	r2, 80066a4 <_realloc_r+0x24>
 8006698:	f7ff f8f0 	bl	800587c <_free_r>
 800669c:	2400      	movs	r4, #0
 800669e:	4620      	mov	r0, r4
 80066a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066a4:	f000 f841 	bl	800672a <_malloc_usable_size_r>
 80066a8:	4285      	cmp	r5, r0
 80066aa:	4606      	mov	r6, r0
 80066ac:	d802      	bhi.n	80066b4 <_realloc_r+0x34>
 80066ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80066b2:	d8f4      	bhi.n	800669e <_realloc_r+0x1e>
 80066b4:	4629      	mov	r1, r5
 80066b6:	4640      	mov	r0, r8
 80066b8:	f7ff f954 	bl	8005964 <_malloc_r>
 80066bc:	4607      	mov	r7, r0
 80066be:	2800      	cmp	r0, #0
 80066c0:	d0ec      	beq.n	800669c <_realloc_r+0x1c>
 80066c2:	42b5      	cmp	r5, r6
 80066c4:	462a      	mov	r2, r5
 80066c6:	4621      	mov	r1, r4
 80066c8:	bf28      	it	cs
 80066ca:	4632      	movcs	r2, r6
 80066cc:	f7ff ff86 	bl	80065dc <memcpy>
 80066d0:	4621      	mov	r1, r4
 80066d2:	4640      	mov	r0, r8
 80066d4:	f7ff f8d2 	bl	800587c <_free_r>
 80066d8:	463c      	mov	r4, r7
 80066da:	e7e0      	b.n	800669e <_realloc_r+0x1e>

080066dc <__ascii_wctomb>:
 80066dc:	4603      	mov	r3, r0
 80066de:	4608      	mov	r0, r1
 80066e0:	b141      	cbz	r1, 80066f4 <__ascii_wctomb+0x18>
 80066e2:	2aff      	cmp	r2, #255	@ 0xff
 80066e4:	d904      	bls.n	80066f0 <__ascii_wctomb+0x14>
 80066e6:	228a      	movs	r2, #138	@ 0x8a
 80066e8:	601a      	str	r2, [r3, #0]
 80066ea:	f04f 30ff 	mov.w	r0, #4294967295
 80066ee:	4770      	bx	lr
 80066f0:	700a      	strb	r2, [r1, #0]
 80066f2:	2001      	movs	r0, #1
 80066f4:	4770      	bx	lr
	...

080066f8 <fiprintf>:
 80066f8:	b40e      	push	{r1, r2, r3}
 80066fa:	b503      	push	{r0, r1, lr}
 80066fc:	4601      	mov	r1, r0
 80066fe:	ab03      	add	r3, sp, #12
 8006700:	4805      	ldr	r0, [pc, #20]	@ (8006718 <fiprintf+0x20>)
 8006702:	f853 2b04 	ldr.w	r2, [r3], #4
 8006706:	6800      	ldr	r0, [r0, #0]
 8006708:	9301      	str	r3, [sp, #4]
 800670a:	f000 f83f 	bl	800678c <_vfiprintf_r>
 800670e:	b002      	add	sp, #8
 8006710:	f85d eb04 	ldr.w	lr, [sp], #4
 8006714:	b003      	add	sp, #12
 8006716:	4770      	bx	lr
 8006718:	20000018 	.word	0x20000018

0800671c <abort>:
 800671c:	b508      	push	{r3, lr}
 800671e:	2006      	movs	r0, #6
 8006720:	f000 fa08 	bl	8006b34 <raise>
 8006724:	2001      	movs	r0, #1
 8006726:	f7fa fd81 	bl	800122c <_exit>

0800672a <_malloc_usable_size_r>:
 800672a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800672e:	1f18      	subs	r0, r3, #4
 8006730:	2b00      	cmp	r3, #0
 8006732:	bfbc      	itt	lt
 8006734:	580b      	ldrlt	r3, [r1, r0]
 8006736:	18c0      	addlt	r0, r0, r3
 8006738:	4770      	bx	lr

0800673a <__sfputc_r>:
 800673a:	6893      	ldr	r3, [r2, #8]
 800673c:	3b01      	subs	r3, #1
 800673e:	2b00      	cmp	r3, #0
 8006740:	b410      	push	{r4}
 8006742:	6093      	str	r3, [r2, #8]
 8006744:	da08      	bge.n	8006758 <__sfputc_r+0x1e>
 8006746:	6994      	ldr	r4, [r2, #24]
 8006748:	42a3      	cmp	r3, r4
 800674a:	db01      	blt.n	8006750 <__sfputc_r+0x16>
 800674c:	290a      	cmp	r1, #10
 800674e:	d103      	bne.n	8006758 <__sfputc_r+0x1e>
 8006750:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006754:	f000 b932 	b.w	80069bc <__swbuf_r>
 8006758:	6813      	ldr	r3, [r2, #0]
 800675a:	1c58      	adds	r0, r3, #1
 800675c:	6010      	str	r0, [r2, #0]
 800675e:	7019      	strb	r1, [r3, #0]
 8006760:	4608      	mov	r0, r1
 8006762:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006766:	4770      	bx	lr

08006768 <__sfputs_r>:
 8006768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800676a:	4606      	mov	r6, r0
 800676c:	460f      	mov	r7, r1
 800676e:	4614      	mov	r4, r2
 8006770:	18d5      	adds	r5, r2, r3
 8006772:	42ac      	cmp	r4, r5
 8006774:	d101      	bne.n	800677a <__sfputs_r+0x12>
 8006776:	2000      	movs	r0, #0
 8006778:	e007      	b.n	800678a <__sfputs_r+0x22>
 800677a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800677e:	463a      	mov	r2, r7
 8006780:	4630      	mov	r0, r6
 8006782:	f7ff ffda 	bl	800673a <__sfputc_r>
 8006786:	1c43      	adds	r3, r0, #1
 8006788:	d1f3      	bne.n	8006772 <__sfputs_r+0xa>
 800678a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800678c <_vfiprintf_r>:
 800678c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006790:	460d      	mov	r5, r1
 8006792:	b09d      	sub	sp, #116	@ 0x74
 8006794:	4614      	mov	r4, r2
 8006796:	4698      	mov	r8, r3
 8006798:	4606      	mov	r6, r0
 800679a:	b118      	cbz	r0, 80067a4 <_vfiprintf_r+0x18>
 800679c:	6a03      	ldr	r3, [r0, #32]
 800679e:	b90b      	cbnz	r3, 80067a4 <_vfiprintf_r+0x18>
 80067a0:	f7fe f972 	bl	8004a88 <__sinit>
 80067a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80067a6:	07d9      	lsls	r1, r3, #31
 80067a8:	d405      	bmi.n	80067b6 <_vfiprintf_r+0x2a>
 80067aa:	89ab      	ldrh	r3, [r5, #12]
 80067ac:	059a      	lsls	r2, r3, #22
 80067ae:	d402      	bmi.n	80067b6 <_vfiprintf_r+0x2a>
 80067b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067b2:	f7fe fa80 	bl	8004cb6 <__retarget_lock_acquire_recursive>
 80067b6:	89ab      	ldrh	r3, [r5, #12]
 80067b8:	071b      	lsls	r3, r3, #28
 80067ba:	d501      	bpl.n	80067c0 <_vfiprintf_r+0x34>
 80067bc:	692b      	ldr	r3, [r5, #16]
 80067be:	b99b      	cbnz	r3, 80067e8 <_vfiprintf_r+0x5c>
 80067c0:	4629      	mov	r1, r5
 80067c2:	4630      	mov	r0, r6
 80067c4:	f000 f938 	bl	8006a38 <__swsetup_r>
 80067c8:	b170      	cbz	r0, 80067e8 <_vfiprintf_r+0x5c>
 80067ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80067cc:	07dc      	lsls	r4, r3, #31
 80067ce:	d504      	bpl.n	80067da <_vfiprintf_r+0x4e>
 80067d0:	f04f 30ff 	mov.w	r0, #4294967295
 80067d4:	b01d      	add	sp, #116	@ 0x74
 80067d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067da:	89ab      	ldrh	r3, [r5, #12]
 80067dc:	0598      	lsls	r0, r3, #22
 80067de:	d4f7      	bmi.n	80067d0 <_vfiprintf_r+0x44>
 80067e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067e2:	f7fe fa69 	bl	8004cb8 <__retarget_lock_release_recursive>
 80067e6:	e7f3      	b.n	80067d0 <_vfiprintf_r+0x44>
 80067e8:	2300      	movs	r3, #0
 80067ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80067ec:	2320      	movs	r3, #32
 80067ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80067f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80067f6:	2330      	movs	r3, #48	@ 0x30
 80067f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80069a8 <_vfiprintf_r+0x21c>
 80067fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006800:	f04f 0901 	mov.w	r9, #1
 8006804:	4623      	mov	r3, r4
 8006806:	469a      	mov	sl, r3
 8006808:	f813 2b01 	ldrb.w	r2, [r3], #1
 800680c:	b10a      	cbz	r2, 8006812 <_vfiprintf_r+0x86>
 800680e:	2a25      	cmp	r2, #37	@ 0x25
 8006810:	d1f9      	bne.n	8006806 <_vfiprintf_r+0x7a>
 8006812:	ebba 0b04 	subs.w	fp, sl, r4
 8006816:	d00b      	beq.n	8006830 <_vfiprintf_r+0xa4>
 8006818:	465b      	mov	r3, fp
 800681a:	4622      	mov	r2, r4
 800681c:	4629      	mov	r1, r5
 800681e:	4630      	mov	r0, r6
 8006820:	f7ff ffa2 	bl	8006768 <__sfputs_r>
 8006824:	3001      	adds	r0, #1
 8006826:	f000 80a7 	beq.w	8006978 <_vfiprintf_r+0x1ec>
 800682a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800682c:	445a      	add	r2, fp
 800682e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006830:	f89a 3000 	ldrb.w	r3, [sl]
 8006834:	2b00      	cmp	r3, #0
 8006836:	f000 809f 	beq.w	8006978 <_vfiprintf_r+0x1ec>
 800683a:	2300      	movs	r3, #0
 800683c:	f04f 32ff 	mov.w	r2, #4294967295
 8006840:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006844:	f10a 0a01 	add.w	sl, sl, #1
 8006848:	9304      	str	r3, [sp, #16]
 800684a:	9307      	str	r3, [sp, #28]
 800684c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006850:	931a      	str	r3, [sp, #104]	@ 0x68
 8006852:	4654      	mov	r4, sl
 8006854:	2205      	movs	r2, #5
 8006856:	f814 1b01 	ldrb.w	r1, [r4], #1
 800685a:	4853      	ldr	r0, [pc, #332]	@ (80069a8 <_vfiprintf_r+0x21c>)
 800685c:	f7f9 fcf0 	bl	8000240 <memchr>
 8006860:	9a04      	ldr	r2, [sp, #16]
 8006862:	b9d8      	cbnz	r0, 800689c <_vfiprintf_r+0x110>
 8006864:	06d1      	lsls	r1, r2, #27
 8006866:	bf44      	itt	mi
 8006868:	2320      	movmi	r3, #32
 800686a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800686e:	0713      	lsls	r3, r2, #28
 8006870:	bf44      	itt	mi
 8006872:	232b      	movmi	r3, #43	@ 0x2b
 8006874:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006878:	f89a 3000 	ldrb.w	r3, [sl]
 800687c:	2b2a      	cmp	r3, #42	@ 0x2a
 800687e:	d015      	beq.n	80068ac <_vfiprintf_r+0x120>
 8006880:	9a07      	ldr	r2, [sp, #28]
 8006882:	4654      	mov	r4, sl
 8006884:	2000      	movs	r0, #0
 8006886:	f04f 0c0a 	mov.w	ip, #10
 800688a:	4621      	mov	r1, r4
 800688c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006890:	3b30      	subs	r3, #48	@ 0x30
 8006892:	2b09      	cmp	r3, #9
 8006894:	d94b      	bls.n	800692e <_vfiprintf_r+0x1a2>
 8006896:	b1b0      	cbz	r0, 80068c6 <_vfiprintf_r+0x13a>
 8006898:	9207      	str	r2, [sp, #28]
 800689a:	e014      	b.n	80068c6 <_vfiprintf_r+0x13a>
 800689c:	eba0 0308 	sub.w	r3, r0, r8
 80068a0:	fa09 f303 	lsl.w	r3, r9, r3
 80068a4:	4313      	orrs	r3, r2
 80068a6:	9304      	str	r3, [sp, #16]
 80068a8:	46a2      	mov	sl, r4
 80068aa:	e7d2      	b.n	8006852 <_vfiprintf_r+0xc6>
 80068ac:	9b03      	ldr	r3, [sp, #12]
 80068ae:	1d19      	adds	r1, r3, #4
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	9103      	str	r1, [sp, #12]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	bfbb      	ittet	lt
 80068b8:	425b      	neglt	r3, r3
 80068ba:	f042 0202 	orrlt.w	r2, r2, #2
 80068be:	9307      	strge	r3, [sp, #28]
 80068c0:	9307      	strlt	r3, [sp, #28]
 80068c2:	bfb8      	it	lt
 80068c4:	9204      	strlt	r2, [sp, #16]
 80068c6:	7823      	ldrb	r3, [r4, #0]
 80068c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80068ca:	d10a      	bne.n	80068e2 <_vfiprintf_r+0x156>
 80068cc:	7863      	ldrb	r3, [r4, #1]
 80068ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80068d0:	d132      	bne.n	8006938 <_vfiprintf_r+0x1ac>
 80068d2:	9b03      	ldr	r3, [sp, #12]
 80068d4:	1d1a      	adds	r2, r3, #4
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	9203      	str	r2, [sp, #12]
 80068da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80068de:	3402      	adds	r4, #2
 80068e0:	9305      	str	r3, [sp, #20]
 80068e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80069b8 <_vfiprintf_r+0x22c>
 80068e6:	7821      	ldrb	r1, [r4, #0]
 80068e8:	2203      	movs	r2, #3
 80068ea:	4650      	mov	r0, sl
 80068ec:	f7f9 fca8 	bl	8000240 <memchr>
 80068f0:	b138      	cbz	r0, 8006902 <_vfiprintf_r+0x176>
 80068f2:	9b04      	ldr	r3, [sp, #16]
 80068f4:	eba0 000a 	sub.w	r0, r0, sl
 80068f8:	2240      	movs	r2, #64	@ 0x40
 80068fa:	4082      	lsls	r2, r0
 80068fc:	4313      	orrs	r3, r2
 80068fe:	3401      	adds	r4, #1
 8006900:	9304      	str	r3, [sp, #16]
 8006902:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006906:	4829      	ldr	r0, [pc, #164]	@ (80069ac <_vfiprintf_r+0x220>)
 8006908:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800690c:	2206      	movs	r2, #6
 800690e:	f7f9 fc97 	bl	8000240 <memchr>
 8006912:	2800      	cmp	r0, #0
 8006914:	d03f      	beq.n	8006996 <_vfiprintf_r+0x20a>
 8006916:	4b26      	ldr	r3, [pc, #152]	@ (80069b0 <_vfiprintf_r+0x224>)
 8006918:	bb1b      	cbnz	r3, 8006962 <_vfiprintf_r+0x1d6>
 800691a:	9b03      	ldr	r3, [sp, #12]
 800691c:	3307      	adds	r3, #7
 800691e:	f023 0307 	bic.w	r3, r3, #7
 8006922:	3308      	adds	r3, #8
 8006924:	9303      	str	r3, [sp, #12]
 8006926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006928:	443b      	add	r3, r7
 800692a:	9309      	str	r3, [sp, #36]	@ 0x24
 800692c:	e76a      	b.n	8006804 <_vfiprintf_r+0x78>
 800692e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006932:	460c      	mov	r4, r1
 8006934:	2001      	movs	r0, #1
 8006936:	e7a8      	b.n	800688a <_vfiprintf_r+0xfe>
 8006938:	2300      	movs	r3, #0
 800693a:	3401      	adds	r4, #1
 800693c:	9305      	str	r3, [sp, #20]
 800693e:	4619      	mov	r1, r3
 8006940:	f04f 0c0a 	mov.w	ip, #10
 8006944:	4620      	mov	r0, r4
 8006946:	f810 2b01 	ldrb.w	r2, [r0], #1
 800694a:	3a30      	subs	r2, #48	@ 0x30
 800694c:	2a09      	cmp	r2, #9
 800694e:	d903      	bls.n	8006958 <_vfiprintf_r+0x1cc>
 8006950:	2b00      	cmp	r3, #0
 8006952:	d0c6      	beq.n	80068e2 <_vfiprintf_r+0x156>
 8006954:	9105      	str	r1, [sp, #20]
 8006956:	e7c4      	b.n	80068e2 <_vfiprintf_r+0x156>
 8006958:	fb0c 2101 	mla	r1, ip, r1, r2
 800695c:	4604      	mov	r4, r0
 800695e:	2301      	movs	r3, #1
 8006960:	e7f0      	b.n	8006944 <_vfiprintf_r+0x1b8>
 8006962:	ab03      	add	r3, sp, #12
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	462a      	mov	r2, r5
 8006968:	4b12      	ldr	r3, [pc, #72]	@ (80069b4 <_vfiprintf_r+0x228>)
 800696a:	a904      	add	r1, sp, #16
 800696c:	4630      	mov	r0, r6
 800696e:	f7fd fc57 	bl	8004220 <_printf_float>
 8006972:	4607      	mov	r7, r0
 8006974:	1c78      	adds	r0, r7, #1
 8006976:	d1d6      	bne.n	8006926 <_vfiprintf_r+0x19a>
 8006978:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800697a:	07d9      	lsls	r1, r3, #31
 800697c:	d405      	bmi.n	800698a <_vfiprintf_r+0x1fe>
 800697e:	89ab      	ldrh	r3, [r5, #12]
 8006980:	059a      	lsls	r2, r3, #22
 8006982:	d402      	bmi.n	800698a <_vfiprintf_r+0x1fe>
 8006984:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006986:	f7fe f997 	bl	8004cb8 <__retarget_lock_release_recursive>
 800698a:	89ab      	ldrh	r3, [r5, #12]
 800698c:	065b      	lsls	r3, r3, #25
 800698e:	f53f af1f 	bmi.w	80067d0 <_vfiprintf_r+0x44>
 8006992:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006994:	e71e      	b.n	80067d4 <_vfiprintf_r+0x48>
 8006996:	ab03      	add	r3, sp, #12
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	462a      	mov	r2, r5
 800699c:	4b05      	ldr	r3, [pc, #20]	@ (80069b4 <_vfiprintf_r+0x228>)
 800699e:	a904      	add	r1, sp, #16
 80069a0:	4630      	mov	r0, r6
 80069a2:	f7fd fec5 	bl	8004730 <_printf_i>
 80069a6:	e7e4      	b.n	8006972 <_vfiprintf_r+0x1e6>
 80069a8:	08006f30 	.word	0x08006f30
 80069ac:	08006f3a 	.word	0x08006f3a
 80069b0:	08004221 	.word	0x08004221
 80069b4:	08006769 	.word	0x08006769
 80069b8:	08006f36 	.word	0x08006f36

080069bc <__swbuf_r>:
 80069bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069be:	460e      	mov	r6, r1
 80069c0:	4614      	mov	r4, r2
 80069c2:	4605      	mov	r5, r0
 80069c4:	b118      	cbz	r0, 80069ce <__swbuf_r+0x12>
 80069c6:	6a03      	ldr	r3, [r0, #32]
 80069c8:	b90b      	cbnz	r3, 80069ce <__swbuf_r+0x12>
 80069ca:	f7fe f85d 	bl	8004a88 <__sinit>
 80069ce:	69a3      	ldr	r3, [r4, #24]
 80069d0:	60a3      	str	r3, [r4, #8]
 80069d2:	89a3      	ldrh	r3, [r4, #12]
 80069d4:	071a      	lsls	r2, r3, #28
 80069d6:	d501      	bpl.n	80069dc <__swbuf_r+0x20>
 80069d8:	6923      	ldr	r3, [r4, #16]
 80069da:	b943      	cbnz	r3, 80069ee <__swbuf_r+0x32>
 80069dc:	4621      	mov	r1, r4
 80069de:	4628      	mov	r0, r5
 80069e0:	f000 f82a 	bl	8006a38 <__swsetup_r>
 80069e4:	b118      	cbz	r0, 80069ee <__swbuf_r+0x32>
 80069e6:	f04f 37ff 	mov.w	r7, #4294967295
 80069ea:	4638      	mov	r0, r7
 80069ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069ee:	6823      	ldr	r3, [r4, #0]
 80069f0:	6922      	ldr	r2, [r4, #16]
 80069f2:	1a98      	subs	r0, r3, r2
 80069f4:	6963      	ldr	r3, [r4, #20]
 80069f6:	b2f6      	uxtb	r6, r6
 80069f8:	4283      	cmp	r3, r0
 80069fa:	4637      	mov	r7, r6
 80069fc:	dc05      	bgt.n	8006a0a <__swbuf_r+0x4e>
 80069fe:	4621      	mov	r1, r4
 8006a00:	4628      	mov	r0, r5
 8006a02:	f7ff fd99 	bl	8006538 <_fflush_r>
 8006a06:	2800      	cmp	r0, #0
 8006a08:	d1ed      	bne.n	80069e6 <__swbuf_r+0x2a>
 8006a0a:	68a3      	ldr	r3, [r4, #8]
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	60a3      	str	r3, [r4, #8]
 8006a10:	6823      	ldr	r3, [r4, #0]
 8006a12:	1c5a      	adds	r2, r3, #1
 8006a14:	6022      	str	r2, [r4, #0]
 8006a16:	701e      	strb	r6, [r3, #0]
 8006a18:	6962      	ldr	r2, [r4, #20]
 8006a1a:	1c43      	adds	r3, r0, #1
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d004      	beq.n	8006a2a <__swbuf_r+0x6e>
 8006a20:	89a3      	ldrh	r3, [r4, #12]
 8006a22:	07db      	lsls	r3, r3, #31
 8006a24:	d5e1      	bpl.n	80069ea <__swbuf_r+0x2e>
 8006a26:	2e0a      	cmp	r6, #10
 8006a28:	d1df      	bne.n	80069ea <__swbuf_r+0x2e>
 8006a2a:	4621      	mov	r1, r4
 8006a2c:	4628      	mov	r0, r5
 8006a2e:	f7ff fd83 	bl	8006538 <_fflush_r>
 8006a32:	2800      	cmp	r0, #0
 8006a34:	d0d9      	beq.n	80069ea <__swbuf_r+0x2e>
 8006a36:	e7d6      	b.n	80069e6 <__swbuf_r+0x2a>

08006a38 <__swsetup_r>:
 8006a38:	b538      	push	{r3, r4, r5, lr}
 8006a3a:	4b29      	ldr	r3, [pc, #164]	@ (8006ae0 <__swsetup_r+0xa8>)
 8006a3c:	4605      	mov	r5, r0
 8006a3e:	6818      	ldr	r0, [r3, #0]
 8006a40:	460c      	mov	r4, r1
 8006a42:	b118      	cbz	r0, 8006a4c <__swsetup_r+0x14>
 8006a44:	6a03      	ldr	r3, [r0, #32]
 8006a46:	b90b      	cbnz	r3, 8006a4c <__swsetup_r+0x14>
 8006a48:	f7fe f81e 	bl	8004a88 <__sinit>
 8006a4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a50:	0719      	lsls	r1, r3, #28
 8006a52:	d422      	bmi.n	8006a9a <__swsetup_r+0x62>
 8006a54:	06da      	lsls	r2, r3, #27
 8006a56:	d407      	bmi.n	8006a68 <__swsetup_r+0x30>
 8006a58:	2209      	movs	r2, #9
 8006a5a:	602a      	str	r2, [r5, #0]
 8006a5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a60:	81a3      	strh	r3, [r4, #12]
 8006a62:	f04f 30ff 	mov.w	r0, #4294967295
 8006a66:	e033      	b.n	8006ad0 <__swsetup_r+0x98>
 8006a68:	0758      	lsls	r0, r3, #29
 8006a6a:	d512      	bpl.n	8006a92 <__swsetup_r+0x5a>
 8006a6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a6e:	b141      	cbz	r1, 8006a82 <__swsetup_r+0x4a>
 8006a70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a74:	4299      	cmp	r1, r3
 8006a76:	d002      	beq.n	8006a7e <__swsetup_r+0x46>
 8006a78:	4628      	mov	r0, r5
 8006a7a:	f7fe feff 	bl	800587c <_free_r>
 8006a7e:	2300      	movs	r3, #0
 8006a80:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a82:	89a3      	ldrh	r3, [r4, #12]
 8006a84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006a88:	81a3      	strh	r3, [r4, #12]
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	6063      	str	r3, [r4, #4]
 8006a8e:	6923      	ldr	r3, [r4, #16]
 8006a90:	6023      	str	r3, [r4, #0]
 8006a92:	89a3      	ldrh	r3, [r4, #12]
 8006a94:	f043 0308 	orr.w	r3, r3, #8
 8006a98:	81a3      	strh	r3, [r4, #12]
 8006a9a:	6923      	ldr	r3, [r4, #16]
 8006a9c:	b94b      	cbnz	r3, 8006ab2 <__swsetup_r+0x7a>
 8006a9e:	89a3      	ldrh	r3, [r4, #12]
 8006aa0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006aa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006aa8:	d003      	beq.n	8006ab2 <__swsetup_r+0x7a>
 8006aaa:	4621      	mov	r1, r4
 8006aac:	4628      	mov	r0, r5
 8006aae:	f000 f883 	bl	8006bb8 <__smakebuf_r>
 8006ab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ab6:	f013 0201 	ands.w	r2, r3, #1
 8006aba:	d00a      	beq.n	8006ad2 <__swsetup_r+0x9a>
 8006abc:	2200      	movs	r2, #0
 8006abe:	60a2      	str	r2, [r4, #8]
 8006ac0:	6962      	ldr	r2, [r4, #20]
 8006ac2:	4252      	negs	r2, r2
 8006ac4:	61a2      	str	r2, [r4, #24]
 8006ac6:	6922      	ldr	r2, [r4, #16]
 8006ac8:	b942      	cbnz	r2, 8006adc <__swsetup_r+0xa4>
 8006aca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006ace:	d1c5      	bne.n	8006a5c <__swsetup_r+0x24>
 8006ad0:	bd38      	pop	{r3, r4, r5, pc}
 8006ad2:	0799      	lsls	r1, r3, #30
 8006ad4:	bf58      	it	pl
 8006ad6:	6962      	ldrpl	r2, [r4, #20]
 8006ad8:	60a2      	str	r2, [r4, #8]
 8006ada:	e7f4      	b.n	8006ac6 <__swsetup_r+0x8e>
 8006adc:	2000      	movs	r0, #0
 8006ade:	e7f7      	b.n	8006ad0 <__swsetup_r+0x98>
 8006ae0:	20000018 	.word	0x20000018

08006ae4 <_raise_r>:
 8006ae4:	291f      	cmp	r1, #31
 8006ae6:	b538      	push	{r3, r4, r5, lr}
 8006ae8:	4605      	mov	r5, r0
 8006aea:	460c      	mov	r4, r1
 8006aec:	d904      	bls.n	8006af8 <_raise_r+0x14>
 8006aee:	2316      	movs	r3, #22
 8006af0:	6003      	str	r3, [r0, #0]
 8006af2:	f04f 30ff 	mov.w	r0, #4294967295
 8006af6:	bd38      	pop	{r3, r4, r5, pc}
 8006af8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006afa:	b112      	cbz	r2, 8006b02 <_raise_r+0x1e>
 8006afc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006b00:	b94b      	cbnz	r3, 8006b16 <_raise_r+0x32>
 8006b02:	4628      	mov	r0, r5
 8006b04:	f000 f830 	bl	8006b68 <_getpid_r>
 8006b08:	4622      	mov	r2, r4
 8006b0a:	4601      	mov	r1, r0
 8006b0c:	4628      	mov	r0, r5
 8006b0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b12:	f000 b817 	b.w	8006b44 <_kill_r>
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d00a      	beq.n	8006b30 <_raise_r+0x4c>
 8006b1a:	1c59      	adds	r1, r3, #1
 8006b1c:	d103      	bne.n	8006b26 <_raise_r+0x42>
 8006b1e:	2316      	movs	r3, #22
 8006b20:	6003      	str	r3, [r0, #0]
 8006b22:	2001      	movs	r0, #1
 8006b24:	e7e7      	b.n	8006af6 <_raise_r+0x12>
 8006b26:	2100      	movs	r1, #0
 8006b28:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	4798      	blx	r3
 8006b30:	2000      	movs	r0, #0
 8006b32:	e7e0      	b.n	8006af6 <_raise_r+0x12>

08006b34 <raise>:
 8006b34:	4b02      	ldr	r3, [pc, #8]	@ (8006b40 <raise+0xc>)
 8006b36:	4601      	mov	r1, r0
 8006b38:	6818      	ldr	r0, [r3, #0]
 8006b3a:	f7ff bfd3 	b.w	8006ae4 <_raise_r>
 8006b3e:	bf00      	nop
 8006b40:	20000018 	.word	0x20000018

08006b44 <_kill_r>:
 8006b44:	b538      	push	{r3, r4, r5, lr}
 8006b46:	4d07      	ldr	r5, [pc, #28]	@ (8006b64 <_kill_r+0x20>)
 8006b48:	2300      	movs	r3, #0
 8006b4a:	4604      	mov	r4, r0
 8006b4c:	4608      	mov	r0, r1
 8006b4e:	4611      	mov	r1, r2
 8006b50:	602b      	str	r3, [r5, #0]
 8006b52:	f7fa fb5b 	bl	800120c <_kill>
 8006b56:	1c43      	adds	r3, r0, #1
 8006b58:	d102      	bne.n	8006b60 <_kill_r+0x1c>
 8006b5a:	682b      	ldr	r3, [r5, #0]
 8006b5c:	b103      	cbz	r3, 8006b60 <_kill_r+0x1c>
 8006b5e:	6023      	str	r3, [r4, #0]
 8006b60:	bd38      	pop	{r3, r4, r5, pc}
 8006b62:	bf00      	nop
 8006b64:	200004c8 	.word	0x200004c8

08006b68 <_getpid_r>:
 8006b68:	f7fa bb48 	b.w	80011fc <_getpid>

08006b6c <__swhatbuf_r>:
 8006b6c:	b570      	push	{r4, r5, r6, lr}
 8006b6e:	460c      	mov	r4, r1
 8006b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b74:	2900      	cmp	r1, #0
 8006b76:	b096      	sub	sp, #88	@ 0x58
 8006b78:	4615      	mov	r5, r2
 8006b7a:	461e      	mov	r6, r3
 8006b7c:	da0d      	bge.n	8006b9a <__swhatbuf_r+0x2e>
 8006b7e:	89a3      	ldrh	r3, [r4, #12]
 8006b80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006b84:	f04f 0100 	mov.w	r1, #0
 8006b88:	bf14      	ite	ne
 8006b8a:	2340      	movne	r3, #64	@ 0x40
 8006b8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006b90:	2000      	movs	r0, #0
 8006b92:	6031      	str	r1, [r6, #0]
 8006b94:	602b      	str	r3, [r5, #0]
 8006b96:	b016      	add	sp, #88	@ 0x58
 8006b98:	bd70      	pop	{r4, r5, r6, pc}
 8006b9a:	466a      	mov	r2, sp
 8006b9c:	f000 f848 	bl	8006c30 <_fstat_r>
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	dbec      	blt.n	8006b7e <__swhatbuf_r+0x12>
 8006ba4:	9901      	ldr	r1, [sp, #4]
 8006ba6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006baa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006bae:	4259      	negs	r1, r3
 8006bb0:	4159      	adcs	r1, r3
 8006bb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006bb6:	e7eb      	b.n	8006b90 <__swhatbuf_r+0x24>

08006bb8 <__smakebuf_r>:
 8006bb8:	898b      	ldrh	r3, [r1, #12]
 8006bba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bbc:	079d      	lsls	r5, r3, #30
 8006bbe:	4606      	mov	r6, r0
 8006bc0:	460c      	mov	r4, r1
 8006bc2:	d507      	bpl.n	8006bd4 <__smakebuf_r+0x1c>
 8006bc4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006bc8:	6023      	str	r3, [r4, #0]
 8006bca:	6123      	str	r3, [r4, #16]
 8006bcc:	2301      	movs	r3, #1
 8006bce:	6163      	str	r3, [r4, #20]
 8006bd0:	b003      	add	sp, #12
 8006bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bd4:	ab01      	add	r3, sp, #4
 8006bd6:	466a      	mov	r2, sp
 8006bd8:	f7ff ffc8 	bl	8006b6c <__swhatbuf_r>
 8006bdc:	9f00      	ldr	r7, [sp, #0]
 8006bde:	4605      	mov	r5, r0
 8006be0:	4639      	mov	r1, r7
 8006be2:	4630      	mov	r0, r6
 8006be4:	f7fe febe 	bl	8005964 <_malloc_r>
 8006be8:	b948      	cbnz	r0, 8006bfe <__smakebuf_r+0x46>
 8006bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bee:	059a      	lsls	r2, r3, #22
 8006bf0:	d4ee      	bmi.n	8006bd0 <__smakebuf_r+0x18>
 8006bf2:	f023 0303 	bic.w	r3, r3, #3
 8006bf6:	f043 0302 	orr.w	r3, r3, #2
 8006bfa:	81a3      	strh	r3, [r4, #12]
 8006bfc:	e7e2      	b.n	8006bc4 <__smakebuf_r+0xc>
 8006bfe:	89a3      	ldrh	r3, [r4, #12]
 8006c00:	6020      	str	r0, [r4, #0]
 8006c02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c06:	81a3      	strh	r3, [r4, #12]
 8006c08:	9b01      	ldr	r3, [sp, #4]
 8006c0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006c0e:	b15b      	cbz	r3, 8006c28 <__smakebuf_r+0x70>
 8006c10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c14:	4630      	mov	r0, r6
 8006c16:	f000 f81d 	bl	8006c54 <_isatty_r>
 8006c1a:	b128      	cbz	r0, 8006c28 <__smakebuf_r+0x70>
 8006c1c:	89a3      	ldrh	r3, [r4, #12]
 8006c1e:	f023 0303 	bic.w	r3, r3, #3
 8006c22:	f043 0301 	orr.w	r3, r3, #1
 8006c26:	81a3      	strh	r3, [r4, #12]
 8006c28:	89a3      	ldrh	r3, [r4, #12]
 8006c2a:	431d      	orrs	r5, r3
 8006c2c:	81a5      	strh	r5, [r4, #12]
 8006c2e:	e7cf      	b.n	8006bd0 <__smakebuf_r+0x18>

08006c30 <_fstat_r>:
 8006c30:	b538      	push	{r3, r4, r5, lr}
 8006c32:	4d07      	ldr	r5, [pc, #28]	@ (8006c50 <_fstat_r+0x20>)
 8006c34:	2300      	movs	r3, #0
 8006c36:	4604      	mov	r4, r0
 8006c38:	4608      	mov	r0, r1
 8006c3a:	4611      	mov	r1, r2
 8006c3c:	602b      	str	r3, [r5, #0]
 8006c3e:	f7fa fb45 	bl	80012cc <_fstat>
 8006c42:	1c43      	adds	r3, r0, #1
 8006c44:	d102      	bne.n	8006c4c <_fstat_r+0x1c>
 8006c46:	682b      	ldr	r3, [r5, #0]
 8006c48:	b103      	cbz	r3, 8006c4c <_fstat_r+0x1c>
 8006c4a:	6023      	str	r3, [r4, #0]
 8006c4c:	bd38      	pop	{r3, r4, r5, pc}
 8006c4e:	bf00      	nop
 8006c50:	200004c8 	.word	0x200004c8

08006c54 <_isatty_r>:
 8006c54:	b538      	push	{r3, r4, r5, lr}
 8006c56:	4d06      	ldr	r5, [pc, #24]	@ (8006c70 <_isatty_r+0x1c>)
 8006c58:	2300      	movs	r3, #0
 8006c5a:	4604      	mov	r4, r0
 8006c5c:	4608      	mov	r0, r1
 8006c5e:	602b      	str	r3, [r5, #0]
 8006c60:	f7fa fb44 	bl	80012ec <_isatty>
 8006c64:	1c43      	adds	r3, r0, #1
 8006c66:	d102      	bne.n	8006c6e <_isatty_r+0x1a>
 8006c68:	682b      	ldr	r3, [r5, #0]
 8006c6a:	b103      	cbz	r3, 8006c6e <_isatty_r+0x1a>
 8006c6c:	6023      	str	r3, [r4, #0]
 8006c6e:	bd38      	pop	{r3, r4, r5, pc}
 8006c70:	200004c8 	.word	0x200004c8

08006c74 <_init>:
 8006c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c76:	bf00      	nop
 8006c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c7a:	bc08      	pop	{r3}
 8006c7c:	469e      	mov	lr, r3
 8006c7e:	4770      	bx	lr

08006c80 <_fini>:
 8006c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c82:	bf00      	nop
 8006c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c86:	bc08      	pop	{r3}
 8006c88:	469e      	mov	lr, r3
 8006c8a:	4770      	bx	lr
